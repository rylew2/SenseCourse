{
    "CS-6035": " This was a much better course than I initially expected.  The 4 projects were challenging but educational and doable.  The video lectures and book readings were also good.  This course makes me want to take other OMSCS security courses now. Overall, this course was good, but not great. The 4 projects are where 90% of the learning occurs. The quizzes are easy but the 2 exams are nonsense. The questions were randomly pulled for the textbook and poorly worded. The TAs were very responsive and with some minor changes, the class could be great. I took the summer version of this class so it didn't have the extra credit options. \n\nSKILLS NEEDED: some C and assembler required for first project. For last project, its important you understand HTML, HTML forms and some PHP. Not having that general understanding seemed to be a barrier for some taking the class. \n\nThis class gives you a good broad overview of Information Security. It doesn't go too deeply into things. But the assignments are very well designed. The first one was challenging for me (even though I have lots of C and some Assembly experience). \n\nThe lectures cover a LOT and there's a lot of reading as well. So it was a bit challenging to just keep up with it in a busy schedule (esp. after having taken several lecture-light courses). The quizzes do a good job of keeping you on track in the schedule and on getting a summary of what is learned. \n\nThe TAs and professor have plenty of office hours but its mostly drop in or by arrangement. So I didn't really take advantage of this. \n\nIn terms of teaching I give this class full marks. \n\nMy only complaint is having to deal with strange wording issues in the Quizzes and Exams (as others have pointed out here). Generally such things don't bother me, but in this case it was more trying to figure out how the grader will respond than what the correct answer was. That needs improvement. An entry-level class with interesting assignments. A very well balanced and informative course. I took it over a summer that made it a bit more time consuming and difficult, but overall the pedagogy was very good. Most of the readings are from one book and the assignments were interesting to solve rather than tedious This class had a lot of reading and covered a vast amount of material. Unfortunately for me, my reading comp is not what it used to be!!\n\nThe projects were great at demonstrating the subject material. However, from a non-CS background, they were INCREDIBLY (for me) time consuming, and occasionally frustrating. However, writing exploits (buffer overflows) and doing cross-site request forgeries, cross site scripting, sql injections - how cool! I havent written a line of C code in 25+ years, so learning some C and learning to use a C debugger would be helpful. I recommend starting early on the projects. Appreciated the optional extra-credit project. However, I didnt have time available during the semester (with the workload of 6300 and my job) to dedicate time to them. So, at the last minute I submitted half of the optional project 2. 5, and believe I got a few extra points to help the class average. \n\nDO follow the assignment instructions. I lost 10 points on the first assignment for placing an exploit file within my writeup, and the instructions said to attach it separately. My bad!\n\nI learned a tremendous amount in this course. Although there was minimal if any interaction with the instructor, the TAs were more than involved, had access to him (and in one instance interceded on my behalf), were highly knowledgeable and available daily. And, until the last project I didnt realize they had chat rooms during their office hours where we could get help when needed. \n\nI do have another security text I purchased a few years ago. I found the Stallings text to be an awesome asset to one's library. The book was great, and I feel was a key to the tests and quizzes. The second half of the class, given my overall daily workload, I was not able to keep up with the reading, and am cramming for the final. \n\n\nTo me, this should be a required course for anyone in CS. I look forward to taking the network security class. Seems like peoples concerns were heard. Spring 2016 syllabus has (20) 1% quizzes, (4) 15% projects, (2) 10% exams, and (1) optional 10% project for a grade boost. First project took a bit of time to learn about how to use gdb and machine code in general. Preparing for midterm now, which coveres 10 chapters. \nThe second project was a bit annoying to get the VM set up. I was sure I ran the malware analysis correctly, but don't think the results were coming out correctly. I got a new laptop after this project to ensure that I would not have any technical issues for the remainder of my OMSCS life. Project 4 and optional project 4. 5 were easy because I am familiar with JS and SQL. Project 3 was buggy, and the instructor recognized that stating that he will address that in future courses. \nI missed a bunch of quizzes because of poor time management, but still ended up with an A in the course. Overall the class touches upon many interesting topics and is a good second course to take with something more intense, such as ML.  I really enjoyed this course. Lectures were well designed and we were given enough guidance on the projects in order to complete them successfully. Exams were relatively straightforward. Given that I did well on the projects, I hardly needed to even complete the final exam which was nice. Given the option of prioritizing projects was really nice since I'm not the greatest test taker. The class was very interesting and covered most of the current security concerns that should be in any developers mind as they write code.  The front half of the class and project 1 had a higher time commitment (12 hours / week) for me compared to the second half (4-6 hours / week). The videos are good, but not the best ones I've seen in the OMS CS program.  The videos didn't always illustrate complex things such as DES, AES, RSA, and TLS hand-shake clearly, but supplementing with other sources and the book cleared that up.  I used the international edition of the book which is less expensive, but sacrifices the on-line material and some additional chapters which would have been helpful in a couple cases.  The first assignment in C was more challenging for me, but the other assignments were fairly easy and straight forward.  We used C, Python, and JavaScript, but you don't have to have a significant amount of programming experience in those; you can Google your way through most of it.  The hardest part of the class is retaining all of the facts about all the different aspects of Info Sec for the tests. Great class! The work load is somewhat light but the projects were extremely interesting and enlightening. It definitely opened my eyes to many security vulnerabilities I had not previously considered. I took it over the summer and thought it was a good fit for short summer term. I found the subject matter interesting even though I had no prior interest in security. Projects are not very challenging but rather tricky as most projects involve exploiting some security vulnerability. Over all this was a interesting and worthwhile class. The projects are really interesting and I learned a lot from them. The quizzes are kind of a waste of time; they feel like busywork. The tests were not exactly hard, but the questions were oddly worded with a lot of distracting errors which made them very tricky.\n\nThe projects are the biggest part of your grade, which is a good thing. They cover a wide range of topics and require a lot of different skills. They were challenging but doable.\n\nThe class was hard because it's so wide ranging; you will almost definitely have to work with something you are totally unfamiliar with at some point. You will have to put in some time doing research outside of the class materials to learn the tool you are working with. I had an overall positive experience with this course. \n\nThere are 4 projects, 2 optional projects, 10 quizzes, 2 exams, a book to read, and a bunnnnch of lectures (that also have quizzes). \n\nThe thing I disliked the most about this course is the busy work that comes with it. The projects were great and I watched all the lectures. But the quizzes, the exams, and the reading just did not help me learn at all. The hard part about the exams is that you really don't know where questions are coming from... quizzes? book? lectures? projects? all of the above? So that makes studying harder. \n\nWhat I liked about the course were the projects. They really helped me understand the material we were learning and I felt like I was able to really grasp some of the fundamental aspects of software security that I was missing from my undergrad. Since I had a computer science background these projects weren't too difficult. You'll need to know: C, Python, HTML, PHP, and JavaScript. \n\nThe only other comment I have is that the TAs/Instructor didn't participate in Piazza as much as I would have liked. It made the whole semester feel disorganized. For example, the instructors didn't post anything about the first exam until 2-3 days before it opened. Makes studying pretty hard. They also didn't post anything about the final. \n\nOverall, I liked the class and learned a lot from it! <b>EDIT 2:</b> Project 4 grade received on May 4 in the late morning and apparently I was not suspected of cheating.  A simple update on Piazza could have saved me, and probably many others, a lot of stress.  I still stand by everything else I said below in the original review and edit 1.\n\n<b>EDIT 1:</b> As of May 4, I have to downgrade my review from \"liked\" to \"neutral\" due to some stressful communication issues.  We were told on May 1 that all project 4 grades were expected to be returned later that night.  Also on the night of May 1, we were told that the instruction team found out some students used past projects on GitHub to complete project 4.  After this, the instruction team basically fell silent with very little exception.  Like many others, I don't have my project 4 grade yet.  I didn't cheat on project 4 or at all in this course, so the fact that I have neither my grade nor even the smallest relevant update from the instruction team is getting very frustrating and making me anxious, especially since it's now been 2.5 days since we heard anything relevant.  I'm sure I'm not alone in this.  My mind is racing at the thought of all the ridiculous hoops I'll probably need to jump through to fight a wrongful cheating accusation, and it's causing a lot of unnecessary stress.  Take this course with caution.\n\n<b>Original review:</b><br/>\nThis was a great course and was not too demanding. There are 10 open-book quizzes, each worth 2% of the grade. Almost every question is verbatim from the textbook or lecture notes. There are two closed-book exams worth 10% each. They were on par with the quizzes in difficulty, maybe a little more so since notes weren't allowed and they covered more material. The final exam was not cumulative. There were four projects, each worth 15%. The projects were some of the most interesting and fun I've ever done in CS, as an undergrad or grad student. We had about a month to do each project, which is <b>way</b> more than necessary. For that reason, IIS is a fantastic course to pair with another course.\n\nProject 1 is all about buffer overflows. Knowing C helps a bit but is by no means a necessity. It's probably more important to know about internal memory architecture at a somewhat high level. This project was definitely the most time consuming for me, and I think I can objectively say it's the one with the most amount of work. (P4 might be more work if you have literally no web dev experience.)\n\nProject 2 is about malware analysis. I'm not that interested in malware but I still enjoyed working on this project. It was a massive decrease in difficulty and workload from project 1 also. No programming required for this project; it's all with a tool in a provided VM.\n\nProject 3 is about cryptography. This one was awesome. Some basic cryptographic algorithm programming in Python. Previous knowledge of Python will absolutely be helpful, and even if you don't there is plenty of time to learn it before the deadline. A ton of guidance is given and a lot of the code is already provided.\n\nProject 4 is about web security and exploiting XSRF and XSS vulnerabilities, and doing an SQL injection. This one was extremely easy if you have previous HTML and JavaScript experience. There is some PHP code in the files we're provided, so it helps to know that a bit. But if you have previous programming experience then understanding the PHP code will not be an issue. Also, the only code we actually had to write ourselves for this is HTML and JavaScript.\n\nReally cool stuff. The textbook is dry AF and probably the worst part of the course. The lectures were so-so but informative. Mostly absentee professor on Piazza, but seriously, who cares? We learn material from the professors' lecture videos, not from their Piazza posts.\n\nI definitely recommend taking this class. If you're lucky, your Piazza forum will be filled, like it was this semester, with highly entertaining posts from people constantly whining about the dumbest things, largely because they can't read/follow instructions or they need some serious hand-holding and spoon-feeding.\n Really enjoyed the course.  I really enjoyed this course. The projects are fun and are more challenging than the tests or quizzes. This should go without saying but start the projects early. Use an electronic version of the book, which will help you study and take quizzes more efficiently. You'll need some basic proficiency in one of (python, c/c++, java) and some basic web development experience. So if you have never built a webpage and used a bit of javascript, you should look into that some. Please don't ignore Piazza no matter how smart you are. The TAs will clarify inconsistencies between the required text and the Udacity lectures and will remove confusion about quiz questions and assignments. You'll probably kick yourself if you miss questions and parts of assignments just because you missed a good Piazza post.  Interesting concepts on security. Interchanging instructors between 1st 1/2 and the 2nd 1/2 of the course felt more of a detour, but none the less the projects were fun to work on. The only thing to add, start working on projects early as project 1 and 3 are very time consuming. Pretty great class! Projects are awesome great way to learn about security. I'd recommend leaving time to read the chapters, the lecture doesn't really cover a lot of the topics that will be on the exam. I'd recommend that you do one of the extra credits. As mentioned in some earlier comments, It's an intro course. That's why it says \"Intro\" in the name. But if you've got little to no info sec experience this is a fun way to get some. The readings were a bit long, but there was a lot of material surveyed and they were well worth it. The lectures were very approachable, but there wasn't much depth in most of them. They were typically a bit of a review of the readings rather than instruction of the material. But that may be an artifact of my habit of reading first, then watching the lectures. The projects though... These were the most fun of any projects I've had in the program so far and I learned a ton doing them. You will feel like a l33t H@x0r at least once in this class. You know. If you're into that kind of thing... Good intro to security for those who have interest. I thought I would be one of those but this class made it clear to me that I actually don't! Back to the actual meat of the class though, I believe the projects is a good attempt to apply the topics learnt. The book can get very dry and lengthy. Without the readings,the workload for the class would be much less. The TAs are great in this class but I didn't hear much from Prof. Wenke Lee at all. There were just a couple of posts from him throughout the entire semester. Great class. I would definitely recommend taking it with another class, especially if you have a hard class you need to take because the class is not difficult. \nThe first half of the semester is basically common sense stuff, really if you know little about security, you know enough for the first half. The second half of the class, which I consider to start with cryptography, is a little more challenging, but it is not difficult to grasp the concepts. \n\nMy favorite part was the projects - 4 projects + 4 optional, of the optional you only can do 1. \nProject 1 - Easy, work with C and gdb\nProject 2 - Easy, triggering malware\nProject 3 - Easy, basically doing a test for an app that one of the TA's built - Very bad project in my opinion because I didn't learn anything and really did not get anything out of it. \nProject 4 - Easy, you \"hack\" a fake website. \nNot as easy as the other 3, but if you know JS and HTML you will be fine. It took me a bit more time than the others simply because I was confused as to what I was doing. \n\nMidterm was not difficult, all true/false and multiple choice questions. You can only answer them one at a time, so that was annoying because you could not go back and double check. The questions were similar to the Quizzes, but some of the questions did get me. \n\nI should mention this is my first class in the program and I would definitely recommend it to anyone who is new and thinking about taking it.  This class covered some basic topics around Information Security. There was a lot of reading to do but it was worth it to go in-depth into some topics. the projects were really interesting and taught me a lot. \n\nThe TAs are active on Piazza and Slack and help out a lot. \n\nIt was a little hard to keep up in the shortened summer semester, but it was definitely manageable. The material: This course covers a LOT of ground. In the summer term, we read almost the entire book, and there were just under 18 hours of lectures. That being said, the material is broad and not very deep. This is definitely a survey course. \n\nGrading: For this term, 20% of the final grade comes from ten quizzes (open book/open note), 60% from four projects (equally weighted), and 20% from two exams (equally weighted). The exams are a midterm and final, and the final is not cumulative. \n\nThe projects: These took me from 6 to 12 hours each. The projects were:\n1. Execute a buffer overflow attack - make sure you're up on your C programming and have an intimate knowledge of how the OS lays programs out in memory. \n2. Malware analysis - we used a virtual machine to safely study malware. This project is basically following the instructions with no independent thought. \n3. Cryptography - implement cipher block chaining, and search a keyspace to try to crack ciphertext. Your choice of Python or Java for the assignment. \n4. Web security - launch a XSS, XSRF, and SQL injection attack against pre-supplied PHP code. \n\nAs you can see, these projects target different skillsets. You may have an easy time with one over the other. \n\nThe exams: There is very little required in the way of synthesis with the material, but there is a LOT of material to learn. The class average for the first exam was an 80. I'm writing this before getting the results of the final exam. \n\nBonus project: the professors graciously allowed us a 10% extra credit project. Do it - it's fire insurance against a bad exam performance and can almost guarantee you the A. \n\nFinal verdict: this class was fun, and I learned a lot. When you solve the projects, it feels like magic (OMG - I just launched a buffer overflow attack!). I'd recommend this course.  Poor TA support during the semester I took the class, including one encryption assignment where the reference data file was just plain wrong. Perhaps to be expected in an intro/survey course, but frequent changes of tech stack were a bit maddening. Almost every assignment required a different programming language.  My first class in OMSCS and I really enjoyed it. Reading reviews of other classes vs. this class I'm really happy it was my first. It's rather general but with no security knowledge coming in that was fine by mean. The lectures are easy to watch and you do get the general ideas you need from them. The book is SUPER dry but needed. Not necessarily to read all the way through but to skim for sure. Certain sections won't be touched in the videos. Lots of googling and piazza will help you through the projects. They're not hard you just don't always have the specifics you need to complete them. Shout out to TA Scott for helping me through two of them when there was a bug in the VM / wasn't given enough info to start with. Quizzes are crazy easy but the exam are definitely harder. Not sure hard but not as easy as everything else. You can't always anticipate the questions and they can be really vague. You should be able to fine in the class regardless of the exams, though. Glad I took - think every dev should have at least a basic knowledge of security.  Most of the projects were not as challenging as the other courses I've taken, but they were far more interesting and really helped us engage with the material. Overall, this class was the most fun of any I've taken so far and was the most rewarding. I feel like I took a lot away from this class, even though it was a fairly light time commitment.  There ere weekly quizzes, and a lot of lectures & text book to cover each week, but manageable. The 4 projects were challenging if you didn't know C, HTML, or whatever language, but were also fun. The TAs were great in helping sutdents, and also from students helping students on Piazza. I used to IT consider really dry (let's be honest, it can be) but after this class I have new appreciation for it. I have no regrets taking this class. The Instructors did a great job designing it. This is my 2nd class in the program and I really enjoyed it overall. Although I took it in a full semester, I think this would be better as a summer course because there were about 4 \"down\" weeks in the course where I didn't do anything. \n\nThe projects span a wide range of topics, but are very manageable. I thought the 1st project, Buffer Overflow was the hardest if you don't have background in C and memory architecture. The 2nd, Malware Analysis, was very straightforward. The Cryptography project was also fairly easy since you don't have to write your own mathematical algorithms unless you really want to. (So you can make it more challenging if you desire by not using libraries.) Finally, 4th Web Security project definitely seemed very hard for those who had never done any web development. If you have encountered JS/HTML/PHP, it is fine. \n\nThe Canvas quizzes are worth 20% of your grade and open book. So basically, 20% of your grade should be 100% right off the bat. The exams were a bit more random/tricky with some material included that is barely even covered in 2 sentences in the book. I read most of the book, but overall I probably won't retain much since the book is dry and topics are quickly covered. I somewhat regret spending time reading since I don't feel I walked away from the reading with a really deep understanding, but rather with a surface level acquaintance with terminology to pass an exam. I'm sure I will forget all the specialized terminology within a few weeks, hopefully the general concepts stick though. \n\nOverall, it was a fun course.   A very good core course and relevant. Plenty of decent reading for students and you are free to make it as difficult and thorough as you would like to. It can however be very challenging though for those new to the subject matter. The easiest class. I spent a total of six afternoons in the entire semester to deal with 4 projects and 2 exams. And in the end, I overdid it because the curving is generous. Forget about the book, slides and Udacity. Wikipedia is good enough. Overall the course is great! The projects in this class were the highlight for me. The lectures weren't that great but they do cover the material well. Overall I enjoyed this class very much. This course covers a lot of topics and I love the projects. Work load is definitely not high, but those projects are not trivial.  Very easy class. You can get many points from online quiz (open book and you can try as many times as you want) and projects. Projects are mostly straight forward expect for the stack buffer overflow assignment on Project 1. Project 3 and 4 are also fun (I like programming assignments). Tests can be tricky and sentences in questions I felt bit ambiguous. But if you do well in quizes and projects, you should be fine as long as you can secure 60% or so in these exams.\n\nThe lectures and a book are super dry and even you can skip totally if you want to focus on grading. I have a neutral impression on this class. Cakewalk compared to many of the other courses in the program. The projects are the meat of the course but also where you learn the most, by far. Hit them immediately once they are released and you'll finish them in a couple of days for the most part, but you might get stuck on a few parts and need additional days to do extra research. Don't wait on the projects until the last few days.\n\nYou'll find some people in this class whining and complaining. Here's a rough piece of advice...if you can't handle this course, leave the program.  Easy class and interesting material. This is an interesting class with some pretty fun projects. \n\nYou are graded on 10 open note quizzes, 4 projects, 1 optional project, and 2 closed book exams. \n\nMost people I think get by with these quizzes pretty easily since you can find the answers on the internet or search for them through the textbook. Regardless of how you approach the quizzes, I would highly suggest reading the textbook for the exams. While the Udacity videos are very interesting, they do not provide enough of a background for you to be able to do well on the exams and it is likely the intention of the instructor that you really take the time to go over the material in the textbook. \n\nThe projects are pretty engaging and require a mixed bag of skills. Even if you're not familiar with the language (like C for the first project) the instructors give you ample time to complete each of the 4 projects. Additionally you have the option to do an extra project to boost your average if you did poorly on one of the other ones. I have an engineering (not CS) background and got an A in this class. That said, I was quite disappointed with the class. I was surprised how poorly and lazily administered the class was. Regularly the students had to remind the instructors to open the quizzes or post projects based on the schedule. The textbook is a must only because the quiz questions are verbatim from the book. The exams, which are a major part of the grade, had very little quality control and were very unbalanced (neglecting several topics but focusing too many questions on a single topic). The only redeeming part is the projects, which are pretty interesting. But for a CS newbie, it required more time than it should have. Also, be prepared to think about breaking things rather than building. That was the challenge for me. Previous classes (CN, DBS, GIOS) This course involves lots of computer security concepts. Need to complete both video lectures and textbook chapters in order to do quizzes once a week. Some people liked the projects more than the others. You will use python, c, and JavaScript when working on projects. It is more about how you are interested in this lesson. Lectures to me have no interests at all. Each one is about 60min long on average and full of concepts.  This has been an interesting course because I've had an interest in security. Hopefully in the future, they reduce the weighting of the midterm/final exams, emphasize the projects, and break the projects apart a little more. Unfortunately, the quizzes and exams are essentially rote memory tests. I watched the lectures, but found the book more informative and that's what the quizzes were largely based upon. The projects were the best part pedagogically.  This is a solid course in that it balances a lot of content (some of which will be unavoidably dry) with fun assignments that teach you the concepts (like hacking a VM to get root privileges).\n\nAll 4 projects were tricky in their own way and can be harder/easier depending on your knowledge.\n\nIn terms of languages, Project 1 requires some C, Project 3 required Python and Project 4 required some HTML/javascript.\n\nAll project are doable but you need to give them like 3 full days each unless they are squarely within your knowledge area. Luckily, you usually have about a month for each one, so you can spread these 3 days out. I was a big fan of this class even though the exams killed me (I did not prepare well enough for them, totally on me). Here's the breakdown of assignments:\n\n10 quizzes - these are all easy and straight from the book and some lectures. Mostly quizzing you on definitions and a few characteristics of certain ideas. Very few times will you find a \"gotcha\" type of question here. \n\n4 Projects - Project 1 was a stack overflow exploit in C. I was new to both C and this type of attack so there were some growing pains here (plenty of resources online). Project 2 I had a blast with, we analyzed malware running on VMs. Project 3 was about decrypting keys using Python. This was a lot of fun even though the grading came back less than I expected, probably my favorite project I've done in this program. Project 4 was all about using Javascript to exploit XSS attacks. The gotchas in this project were a bit rough for me but I got graded really well. \n\n2 Exams (not open book/notes) - It seems that most of these questions came from different places from the text and lectures. At times they could seem like really minute details for questions but it is what it is. If I were to have to do this class over I would go through all the lectures and take notes. This would have helped me a lot. Also the proctoring was a hassle for some students (I had no issues). \n\nExtra credit project - this is offered to give you an additional 10 points to your final grade. Unfortunately part of one of the extra credit projects is totally a \"get all the points or none\" kind of or deal. Seems like an odd format for students who need additional help. \n\nOverall you should get a decent-good grade in this course. I enjoyed it and at times wish I could have focused more on certain aspects of InfoSec. A whole course on network security, or malware, or decryption would be a ton of fun! I recommend this course to anyone, just do a better job of taking lecture notes than I did. One of the most practical courses in the program. If you've been around the interwebs for a while, some of the topics will be very familiar, but this course may fill in some gaps in knowledge and give you more practice breaking/protecting systems. I really enjoyed the Assignments -- they're almost like puzzles that don't always seem clear at first, but there's a solution that's obvious after the fact. \n\nThe lectures are pretty unadorned, but cover the material. The one on RSA was a standout -- I finally understood something I've \"known\" for years. The tests and quizzes are multiple choice and pretty much straight from the book and lectures, but the questions are sometimes a bit ambiguous. \n\nThis is a good course to pair with if you're taking more than one. Great class and great structure. First things first: This was a course with an attached \"easy\" label\"; I'd say this is a course with a reasonable difficulty, **but I wouldn't categorize it as easy**. You'll need to study quite a bit and do a lot of research if you want to succeed, and most of that you'll do alone (books and resources are not provided).\n\nThe course lessons consist in video lectures from Udacity, and a textbook. They may overlap, but not necessarility.\n\nGrading is based on four take-home projects - which are just slightly related to what you see in lectures, ten open-book quizzes, and two closed-everything, one-hour proctored exams.\n\nThe projects are nice, and they'll force you to learn quite a bit on various security topics, but be aware: **most of the time you'll be on your own**. TAs will provide very limited help, and the professor is nowhere to be seen.\n\nAlso, sometimes you'll encounter badly worded, contradictory or plain wrong questions or requirements, be it in projects, exams, or quizzes: **try asking for clarifications, but don't expect proper answers**. Most of the times you'll be ignored. This is not so bad as it seems, because such questions are not a lot; but it can be frustrating if your final score is around a threshold for a grade. My suggestion is: **ignore them and go on**, you may think that spending time in \"fighting\" those will let you recover some points, but that won't work. Just go on.\n\nGeneral recommendations:\n* try achieving a 100% score in open-book quizzes. Their total value is the same as the two exams, so spend a bit of time on those, and take your time to crawl the textbook and the lessons for the proper answers.\n* start working early on projects, so you can ask on Piazza and Slack if you've got problems. **I recommend using textbooks** about the various topics, sometimes online resources are vague and make you waste time.\n* For the exams, **you must study all the lessons and the relevant chapters in the textbook**. Try understanding the underlying concept, but be advised that, without a good amount of luck, you won't get perfect scores there; some questions in the exams are overwhelmingly specific and you won't be able to answer them - but if you do well in projects and quizzes, an A is totally feasible. I wouldn't waste too much time on \"great exams\".\n\n\n Course was good, it had a lot of work in Fall 2015 with weekly quiz and multiple projects and 2 exams. Between the lectures, reading and projects, it was about 10-12 hours per week. I got what I wanted out of this course which was a survey introduction to Info Sec. As others have said the projects are the reason to take this course. They are fun and interesting. \n\nThere is a lot of reading required for this course but I I think it can be avoided since the book is dry and strangely organized. You'll need to reference the text to complete the quizzes. For the exams, I found that skimming the text for information and then intense flashcard memorization before the test to be a successful strategy. \n\nI liked the structure and presentation of the video lectures. I thought they were organized well and did a great job of distilling relevant information from the text. \n\nFor me the weak point of the class was in terms of the leadership and administration of the course. There were some outstanding TAs in this course, who were generally available to guide students on projects and the concepts underlying them. However, when it came to matters of policy and offering a cohesive message on things that came up, particularly in terms of graded content, there was no unified voice, and sometimes questions would go unanswered. \nThere were some minor snags endured because the course switched from TSquare to Canvas but those were teeny and inconsequential. However, a few times, things that should not have mattered turned into frustrating issues because no one would address them.  This was my fifth course in the program, and I'm not convinced that this frustration is rooted in an unreasonable expectation of course organization and leadership. These courses can't entirely run themselves. \n\nOverall, I'm glad I took this course and would recommend it to anyone who is curious about the topic and has had no exposure to it otherwise.  A great introductory course to the world of information security as well as to the OMSCS program itself. There is a bit of a learning curve (and a larger workload) at the start of the semester, but the workload goes way down as you progress through the course. \nThe material is very interesting and the TAs are very active on piazza. The textbook readings weren't very helpful, but the projects more than made up for it. There were 4 projects, all of which were very immersive and very interesting. I would definitely recommend spending most of the time just working and understanding the projects in greater detail.  Like someone else said, this class was little more than a GPA booster. Don't expect to come out with a portfolio of projects that will get you into the security industry. Some of the projects in this course were almost exactly the same as an undergrad info security course I took from another institution. Not much to say about this class. The topics were interesting, and the projects were easy but entertaining. This would be a great first course to take or to pair with another course, and I recommend it for anyone interested in computer security concepts. Just don't expect a ton of depth - rather, this course provides general information about many different aspects of information security. very interesting projects, get hands on real attacks. great course overall. I went in knowing nothing much about security. I found the information very informative and learned a ton. I feel I can discuss problems intelligently and discuss solutions. The information was interesting. Videos were well done, even though the first professor explained better than the second even though he was a bit repetitive. Overall, I'd rank it as one of my more enjoyable classes. Two things I'd recommend for improvement. One, the quiz questions seemed out of context and were many times pulled straight from book. The exam questions had alot of vagueness and felt were not written that well. The second complaint is that while the TA's were good about answering Piazza questions they were not so great at answering followups on Piazza. A followup question many times has as much meat as the original and kept seeing followups marked as satisfied when they clearly were not.\n\nOverall, I'd recommend the class for the material and the projects were a blast and interestingly challenging. Only project I didn't enjoy as much was the virus analysis one. All the rest were really fun and cool. These was the best part of the class. I disagree that the class was super easy, I found certain parts hard and the projects always took some level of cleverness to solve. The exam were fairly hard and again the questions were not the best. I'd recommend the class and hope you enjoy. A very simple class that provides a good overview of information security. Can be taken along with a time-consuming course as this course is an easy A. I liked this class a lot! The material was really interesting and most of the projects were exciting (yes I think that's the right word). Had a bit of difficulty studying for the test as the textbook covered many many terms, if you don't have experience in the industry it may be overwhelming. My tactic was to hit the projects early/hard and struggle to a B on the exams which makes an A very achievable in the course. This class had a lot of interesting material, but it was presented too quickly and shallowly. It really should be split into two courses. The assignments were somewhat challenging, but didn't do much to actually reinforce the material as it was taught. \n\nDue to the condensed summer schedule and size of the class, there were some issues that arose due to changing how assignments were going to be graded at the last minute, with basically no warning. \n\nThe Professor and TAs varied significantly in their Piazza presence and willingness to help. Generally, it was low all around.  I liked this course. Not having any real background in security, I felt it was good for my knowledge level. I can see where this could be mundane for those with security experience but thought the course was very well suited for my experience level with the subject matter. TAs were very good and responsive. I am familiar with information security but never had any actual projects or have done work with it before. The reading/lectures were a bit dry and I found myself dozing off most of the time :^)\n\nI was really interested in the cryptography section and this course was a great intro to the math and what goes behind the scenes. \n\nI found project 1 (buffer overflow) the most time consuming (10 - 15 hours) out of all 4 projects since it has been a while since touching C. I really enjoyed project 3 (cryptography cracking with Python) and project 4 (exploiting website vulnerabilities, should be familiar with PHP, javascript, HTML)\n\nFor exams, I reviewed the Udacity lectures and skimmed through the book. Mostly rote memorization. Overall, a pretty good course covering a lot of high-level topics.  The material in general is pretty easy and straight forward.  The only thing difficult about this course, speaking only from my perspective, is that a couple of the projects took me a substantial amount of time not because of the security related topic but because to complete the assignment it required knowledge of the project environment that I had absolutely no experience with; e.g., in the last project dealing with web vulnerabilities you have to work with Javascript, which was completely foreign to me, so I took more time learning about Javascript than figuring out the vulnerability.  Outside of the projects, I averaged 2 hours a week on this course to cover lectures, textbook, quizzes and exams.  But factoring in the time I took on the projects which soaked up a lot of time, it bumps my average way up.  They give you about 4 weeks for every project, so if you are not a procrastinator like me you should be good. This class has its moments, both good and bad. As others pointed out, there is a large breadth of topics covered (and a corresponding lack of depth), which similarly has pros and cons. \n\nThe good: A lot of the topics are quite interesting, and if you are not a security person already, you will probably leave this class more aware of some area(s) of security that can help you in your career. The technical meat of some of the projects can be both interesting, challenging, and fun. They make it easy to get an A if you put in the effort. \n\nThe bad: Sometimes, getting started on the projects is hard for the wrong reasons (environment setup, somewhat lacking documentation for specific things, etc). It is nothing that one can't get past, but if you have limited cycles, those problems can at times be frustrating. The really unfortunate result of that was that it was the crack in the foundation of the class opened up the floodgates of incessant whining on Piazza. I understand a bit of grumbling about the project setup problems, but people started complaining about every little thing, when the reality was that most people probably did fine in the class. I truly believe that if we hadn't had those project problems, people would not have complained so much about other things. Sorry fellow students, but please make sure you are making a constructive comment before you reach for that \"anonymous\" button!\n\nThe ugly: As with any security class, you will leave realizing how insecure everything is. Good luck sleeping!\n\nSecret key to success: Buckle down and do the readings (don't just skim!). It will makes the quizzes and exams easier, and there is sometimes a deeper dive of content, or even non-overlapping content in the texts. You will get more out of the class. \n\nFinal note: To the anyone that suggests Googling for quiz answers: are you sure you want to be in the program? If you just want a piece of paper, I there are some other lovely online degrees you can pursue.  I took this my first semester in the program and thought it was a great first course. \n\nThere are 4 projects. The first project required some understanding of GDB, the 2nd required no programming (analysis of malware), and the 3rd was implementing mathematical logic in a few lines of code. I am currently working on the 4th project, which appears to be the most challenging and open-ended design project. \n\n There are 10 open-book quizzes and 2 closed-book multiple choice exams. I found the first exam easy to study for by focusing on the assigned textbook readings and reviewing the quizzes. Definitely read the textbook as there is material covered on the exam that isn't presented in lectures, only the textbook.\n\nI took this course in combination with Intro to OS. I think Intro to Info Security is a good class to take in combination with others because you can easily catch up on it if you need to focus on a different class. I think the material is interesting and clearly presented. Really liked the class, but I liked more were the projects. You definitely must get the book for this class. This is a great intro class to information security. Low workload and easy & fun projects. Highly recommended. This class was very informative but since I don't have a great interest in security, it was kind of a drag. Although, some of the projects were enjoyable I don't think we were given enough to really know what we were doing for some. They expected us to search for answers or ask around which I find strange. I have learned a lot from doing the projects. Exam questions are sometimes not clear. People including me lost some points from T/F type of questions because of the grammar and ambiguity. For me, reading lecture notes created by other student helped me with exams. \n\nFor projects, make sure to use TA, piazza, and slack. Just try to prepare ahead of time since they give you like a month to do it after each project releases. I felt like I could have learned more if I started ahead of time because I probably would dived into the subject deeper. But I ended up working on projects too late so I worked just enough to get a good grade. Shame on me :( This course was a pretty good selection for my first semester in the program. The projects were by far the highlight of the course. All four of the projects are incredibly interesting and engaging and leave you with a much greater understanding of the topic of focus upon completion. Definitely touch up on your C and HTML/Javascript for the First and Fourth project before you take the course. The projects aren't extremely difficult but do require a fair amount of research and thinking. The course lectures/book reading is pretty dry, and, bar a few topics, I didn't really enjoy it. There's also quite a lot of reading. If you plan on taking notes the reading can be quite a time sink from week to week. The Exams do require you to spend some time understanding the material at a level greater than just simple memorization. Assignments are the best part of this course. They are challenging and help learn the concepts better. The lectures could have been better. As the course title says, it is an intro course and hence material is spread thin across multiple topics. Gives you kind of a nudge in the direction of understanding information security broadly but you will need much more in case you plan to work in this area. NS/IIS form a good combination for people pursuing Computing Systems specialization. This was a great course.  Its not difficult and the instructor isn't around all the time but I don't think he really needs to be either.  The TA's did their best to answer questions and correct any errors and I thought they did a good job.  \n\nYou can put in little effort and pass the class. That's completely okay.  You can also do all of the readings assigned and independent research and expand on the projects on your own and learn a lot more.  This class is the epitome of you get out of it what you put in.\n\nI really enjoyed the projects.  They are not heavy on the programming but more of puzzles.  Projects included C, Python, Javascript, and reading PHP.  You only need to do very basic tasks in these languages and you don't need a deep knowledge in any of them.\n\nI even enjoyed reading through the book and I can't really say that about any other class.  I must like the subject matter. :)  \n\nThe exams are not difficult if you watch the lectures and do the readings.  The exams are very similar to the quizzes you take weekly.  The quizzes are open book. Overall, a good course. Provides a decent overview of computer security concepts, but doesn't dive into most of them very deeply. \n\nLectures:\nSome of the lectures are quite long. Most of them repeated or rephrased what was in the book. Not the best lectures I've had so far, but not terrible either. \n\nHomework:\nThere's a quiz portion to your grade. The quizzes are open everything and were taken verbatim from phrases in the textbook. To make the best use of them, it's best to read, watch lectures, and then attempt the quiz with everything put away. Afterwards, you can check your answers and submit. \n\nThe projects in this class were probably the best part. There are four projects that each focus on some aspect of computer security. Most required writing some code, while one consisted of analyzing malware. Each one took me 4 to 5 hours to complete, so not terribly hard. The project that dealt with finding vulnerabilities in a web application was the most fun. There were also some optional projects which could be used to bump up a low test or project grade. \n\nTests\nTests were multiple choice and proctored. They didn't take too long to complete, and if you actually were doing the reading, they were fairly straightforward. \n\nGrading/Administration:\nThe TAs were fairly active on Piazza. Grading seemed fair to me, with most projects auto graded. There were a few projects that had hiccups, but the TAs seemed to fix them within a few days. \n\nAdditionally, it was nice that the class offered optional projects. \n\nBook:\nThe textbook for this class was interesting at its best, and extremely dry at its worst. You _might_ be able to get by without the textbook here, but it was extremely useful in studying for tests and quizzes. \n\nConclusion:\nWorth taking if you're looking for a summer class and don't have broad knowledge of information security concepts.  I took this course in my first semester as I could not get into any other courses. I did not like this course even though I got an A, may be its to do with the fact that I am planning to do ML specialization and therefore don't really care for many topics discussed in the course and only took this course to meet the \"Two foundation course\" requirements. \n\nAssignments are interesting but the nature of security industry is such that every vulnerability gets patched so fact so I felt like I was doing gimmicky assignments with not much practical use. I felt this was more like an undergraduate course. \n\nTAs are useless, they hardly ever reply on Piazza. The lectures are Dry. This was a self taught class and students were replying to each other. I was searching youtube and google for solution to assignment/assignment like problems and found quite a few. \n\nFor few weeks during the second half of the course I did not spend even an hr on the course.  \n\nTake this class if\na. You want a relatively easy A class. \nb. Security topic in general excites you. \nc. You want to take two courses in a semester and this one could be easier of the two. \n\nI would personally not take this class, I think it was useless from learning outcome perspective. But I guess an \"A\" on transcript helps.  Project 1 does include C programming, so be aware of that going in. With enough research, you can find some good sources to get you going in the right direction if you're strong suit is not at the system level of programming. Project 2 is decent and includes some malware analysis. Project 3 is possibly the best I've done in my few classes, heavy on the math behind cryptography (public key). It is very interesting and was created new for this semester. P3 is very interesting, I'm sure all will enjoy. P4 is also pretty neat as it revolves around internet security exploits. \n\nOverall workload for this class is pretty manageable. 5-10 hours a week. One major help is the bonus project, which can add 10% to your grade. This can cancel out a bad project or two if you need it (projects were 15% of our grade, tests 10%). \n\nThe downside during Fall 2016 semester was inattentive TAs. Our third project was released two weeks late due to all the TAs forgetting about it. It's likely that the professor will be more active due to this management gap in future semesters, so I wouldn't worry about it in the future. \n\nOverall, I'd recommend this course. I learned a lot and found it very interesting. If there are any \"Security Now\" podcast listeners, this is the classroom version of the show; very interesting. This is my second course in the program, and I would consider this a good beginner OMSCS course. The workload is very manageable. The content is not too difficult to understand. The projects don't require a very strong programming skillset. That being said, understanding some basic C and assembly will help with the first project which uses gdb to exploit a buffer overflow, so the ability to read/understand some assembly line by line is useful. The third project involves some Python but coding ability is again not the skill being tested. The final project involved HTML, PHP, Javascript. The exams are very conceptual and were significantly more challenging than the projects. Quizzes are easy and are the same final grade value as the two exams. The material starts off dry but gets very good by the first exam and the entire second half of the course covers some very interesting topics. Study hard for the exams, complete all the quizzes, and put some time into the projects, and it is a fairly easy A. I thought the class was extremely interesting. The lectures were a very high level overview of each topic. There were 10 quizzes (about one per week), 2 exams, and 4 projects. There was also an optional project for extra credit. Each of the projects probably only took 10-20 hours to do, but I enjoyed doing the work for them. I did not think it was too difficult or too easy. This is a class that you probably should have a background of C, Python, JavaScript, HTML, and PHP, but if you don't, then you can probably pick up the skills required for this class pretty quickly. I was looking forward to this class but found it disappointing.\n\nThe textbook is not very engaging and I felt like there was too much assigned reading every week. There are weekly open-book quizzes, but they essentially pull questions from the textbook verbatim.\n\nThe projects are interesting and they are the best aspect of the class. Unfortunately, they can be a nightmare logistically. Almost every project was extended due to technical errors and issues. These are the same issues that are reported in previous reviews on here, so there is no reason for them to happen each semester. Often the instructions are unclear and questions on Piazza can go unanswered for a long time.\n\nThere are two exams and they often focus on minutia and trivia from the textbook and lectures. Like the quizzes, they are true/false and multiple choice, but they are not open-book.\n\nOverall, it feels like little effort was put into this class. There are two professors and only one briefly appeared on Piazza a few times during the semester. The tests focus on rote memorization rather than testing your understanding of the material and concepts. Despite all this, the class is still easy and can make a good choice to ease into the program with. I enjoyed this course immensely. The lectures were straightforward, the book is excellent, and the assignments are interesting and informative without being too time consuming. If you're going to take this course, it's good to know some basic number theory for the cryptography portion, but aside from that everything is covered well and is easy to pick up even for absolute beginners. This course was hot and cold for me.  I really liked 3 of the 4 projects.  The first, third, and fourth projects I thought did a great job of demonstrating the security issues for each topic, exposing me to the programming related to the topic, but not requiring advanced programming techniques in any of them.  This is a security course and they did well to teach that on these projects.  \n\nI didn't feel like I learned much from the second project other than I don't want to be a malware researcher.\n\nThe quizzes, book, lectures, and exams are all just ok.  Maybe because I'm not in the security field, but I found the material and how it was covered to be pretty dry.  Given that this course is highly relevant to our every day lives, I felt like the academic material could be more engaging.  \n\nOverall, I'd suggest this course for a student without a cyber-security background.  Take this as your first course to hopefully start out strong or pair up later on with another class that's not a time sink like cs-6200 was for me. easy couse - Lectures was okay. I felt like the material could have been presented in a more natural manner, even though there were many technical terms to explain. \n- Quizzes could definitely be improved. Many of the questions were taken straight from the textbook. If the instructors wrote their own quizzes, it could challenge the students to learn and understand the material better. \n- Lots of reading to do from the textbook if you want to get the most from the course. Although the instructor says all the quiz answers can be derived from the slides, I think some of that is a far stretch. I feel it is easier to personally fill in the gaps through reading the textbook. \n- Projects were enjoyable and challenging. There were four in total. The third was a new one in this semester that had a lot of technical issues and bugs. I don't think it was an appropriate project to ask students to test out a smartphone app. Fortunately, there was an alternative option for that project (which was a literature project and designing a smartphone app that uses pki). \n- Bonus extra credit was available if you complete additional problems related to a project. \n- Exams were fair. Multiple choice and T/F on proctortrack. \n- Professors and TAs were helpful. They even held office hours almost everyday in the week! That is amazing!!\n- Overall I enjoyed the content and recommend others to take this course too.  I took this in the summer, so there may not be as big of a workload in the fall or spring. There was also no extra credit offered. Overall the course is very informative, and I enjoyed taking it, but with the condensed semesters, I found it hard to keep up with everything, especially since I took the whole duration of time allotted to project 1 and was playing catch up for most of the semester. \n\nThe first project was in C, and was interesting, but took me a while to get. The second one did not involve any development, but was still interesting. The third was in Python, and the forth was in HTML / PHP / Javascript. I already took Networking and Network Security before taking this class, so the second half of the semester was pretty simple. \n\nThe quizzes aren't too bad, and were useful when studying for the exams. There is a good deal of reading, and the lectures are informative, but do not cover enough for the exams. I would recommend doing both the readings and the lectures. I really enjoyed this course. This is a cursory review of security, so no topic is dwelled on for too long in class (but you are of course welcome to spend more time on it, as there is plenty of supporting material provided). Although the lectures were often blah, the projects were the highlight of the course. \n\nI have very minimal programming experience, or experience with Linux, so I struggled with some of the projects, but they were very interesting and satisfying. I wish I was faster at figuring things out, as that would have given me time to do extra projects, which 1) counted for extra credit and 2) sounded very interesting. As it was, I learned a lot (mostly from projects but partly from lectures) and really enjoyed the semester. \n\nI would recommend this course to those who do not have much programming background, as it is doable and interesting; and for those who do, you'll spend way less time on the projects than I did, and that would enable you to dig into the subject matter even more.  The projects for this course are very fun. They seem simple at first, due to the fact that they are small, but they can be quite tricky to complete. You should brush up on C, pointers, Python, HTML and JavaScript prior to taking this course. The midterm and final are multiple choice questions using Proctortrack which come directly from the book. Ample time is provided to complete the exams, with time remaining to go over your answers. Make sure you complete one of the extra credit assignments, as it could make the difference between earning an A or a B in the course. Overall, you will learn a plethora of security concepts in this course, I highly recommend it. A good course if you need to wrap your head around security aspects .. its a very good beginners course .. I used a lot of concepts in my job. \nThe only thing is that instructors are not that active on piazza .. and the project descriptions can be a little vague, and would need clarifications on piazza ..  I really enjoyed this class, and especially the projects. I had prior backgrounds on some of the topics covered, and this class helped me to assemble the bits and pieces together. \n\nLectures: they cover really broad range of topics, from buffer overflow (low level application security) to web security. Each topic is not discussed in great details, but given that this course is an introductory course, this is quite expected. \n\nQuizzes: Most of the questions are taken straight from the book. If you watch the lectures and read the book, it is very easy to get 100% for the quizzes. \n\nProjects: The projects are fun, and help to understand and appreciate the topics better. Sometimes it takes a while to get what each project is about, but once you get a hang of it, the project can be done in a reasonable amount of time. (I spent about 7 - 10 hours per project) Furthermore the classmates are very helpful with the projects, even to the extent of almost giving away some of the answers. Most of the projects are auto-graded, so the answers are only either correct or wrong and no room for subjectivity. There were some hiccups with the auto-grading but the TAs quickly rectified them. \n\nExams: Similar level of difficulty with quizzes, not that challenging but good understanding of the concepts is needed to provide correct answers. \n\nOptional projects: Intended to be a grade boost, but it seems everybody did quite well so that the final grade curve was also boosted. Students are allowed to submit multiple optional projects but only one will go into the final grade. \n\nOverall it is a fun class, worth taking if you have little or no background in computer security. The workload is quite reasonable, and definitely will be lighter on normal spring / fall semesters.  I'll start with the good:\n\n1) The class has some fascinating topics. You'll learn the basics of how to do things like buffer overflows, malware analysis, encryption (cracking), and exploiting vulnerable websites. \n\n2)Some of the TAs were particularly good to work with. I'm looking at you Matt and Peter. \n\n3) Some of the projects were really fun. Project #1 (overflows) and Project #4 (web vulnerabilities). \n\n4) You get the opportunity for extra credit via an optional project that expands on one of the \"official\" projects. \n\nNow unfortunately the things I didn't like:\n\n1) I can't say this strongly enough, \"logistics\". I get this is a summer course so everything is condensed, but there were problems across the board regarding issues with projects and issues with autograders. The \"optional\" project grading policy was changed no less than 3 times within a week of the end of the semester. \n\n2) Get ready for some quizzes with \"subjective\" or \"ambiguous\" true/false questions. Good luck arguing them. They'll say not to read into them too much; but then come back at your challenge with some convoluted worded reasoning why you're wrong. \n\n3) The book is absolutely tedious to read. The authors need to understand the concept of \"run on\" sentences. \n\n4) Grades on practically EVERYTHING were held up because someone was suspected of cheating. \n\n5) Some of the projects seemed like straight busy work (cough Project #2). \n\n6) Some of the projects seemed like they added extraneous stuff just to make our life harder (cough Project #3). \n\n7) They'll crackdown on cheating, but let students ask questions on Piazza that practically go through step by step what to do. Seriously. Wait till a day or two before the projects are due and just read through Piazza and you won't need to do any work. This has got to be the biggest \"nope\" for me. I think it demeans the value of the program when people no longer have to try or even research on their own.  What I really appreciated about this class is the amount of prep work the professor and TAs did to give us semi-realistic systems to \"hack\", viruses to inspect, and examples of compromised code. I distinctly remember the fake bank account that we had to get into and the scavenger hunt assignment. The assignments/mini-projects tied the course together very well. The projects were interesting, challenging, and rewarding. I actually had fun doing a few of them. Several languages are required to understand or complete the projects: C++, Python, PHP, and SQL. Start and finish the projects early as possible and you'll be alright. The tests, on the other hand, were at easy to fair level. I over studied for them. \n\nMajority of my time was spent on reading practically the whole book to complete weekly quizzes, going through weekly lectures which didn't always intersect with book, preparing for tests, and coding/doing the projects.  This is a fairly easy course with very interesting assignments. My favourite would have to be the first one on C with return to libc attacks and the web one with XSS attacks. \n\nMy recommendation for studying midsem+finals is go through the quizzes and memorise definitions. It is quite a dry way of studying, but that strategy you should be easily able to beat the class average. As others have previously pointed out before, the quizzes and exams feel more like excepts and definitions pulled out of the text book so be prepared for that. This was one of my first courses in OMSCS. I had only surface level experience with information security, but after taking the course, feel quite knowledgeable. Most of it is directly applicable to my job, and is definitely a worthwhile course!\n\nThe best part of the course were the projects. Many of them were challenging (in a good way) and had a good coverage of a lot of different areas related to information security. The course definitely fulfilled my expectations of what Ga. Tech courses should be like. \n\nLooking forward to the sequel (Network Security) I took this class in my second semester along with AI. My first semester consisted of CS 6250 CN and CS 6340 SAT. I completed a computer engineering degree in 2014 as my only previous computer science exposure before this program for comparison to your circumstances.\n\nThis course is lighter compared to the harder courses in terms of pace and difficulty. The projects are less frequent at about one a month and are easier to figure out, especially when you have no background in the topic. I fell in this category for all of the projects so I averaged about 20 hours total a project between coding and writing the report. If you have significant experience in C with buffer overflows, or HTML/Javascript, then all of these projects can be completed in one night for you. The quizzes are straight from the lectures and book, so the book has great value for these. The tests focus on details and terminology from large amounts of chapters and lectures so memorizing that much information is the hardest part. The TAs and professor run the course very well and all our issues with Canvas will be figured out by the time later students take this course.\n\nI recommend this course as a great first course if you are coming from a technical background that is not computer science or engineering. This can also be paired with the harder courses like AI, ML, and GA.  Loved this class Light course to begin with. Gives a basic idea of how various malware attacks work and how they can be detected. \n I enjoyed this class, mostly because the projects were quite fun. They are like a series of puzzles to solve. They are very open ended, and the steps to complete them are left to the student to figure out, but generally speaking, you know when you've got it right thanks to well defined completion criteria or provided test data to compare against. The first project requires GDB, which I'd never used before. If you're comfortable with debugging in any language, this should be no problem. Knowing JavaScript, HTML, DOM, and some basics about how the event model works in a browser is very helpful for the last project. The weekly quizzes actually help learn the material because you can take them over and over. I took them at the beginning of the week, then looked for the answers while reading the text and watching the lectures. Then you can get a 100% by taking it again at the end of the week. There are two proctortrack exams that follow the same true/false and multiple choice format of the quizzes. They are not difficult, but some of the questions are poorly/awkwardly worded in a way that was frustrating. Getting the text book is required as many questions for the quizzes and exams come from the text and are not explicitly covered in the lectures. There was a ton of reading assigned, and as I got further into the semester I decided to forego the reading.\n\nOverall, the course was interesting and the projects were really fun. I would suggest leaving a lot of time for the first project (buffer overflow). Overall I liked the class and learned quite a few things on computer security - topics cover pretty much the entire course book. I found reading the book to help with understanding some of the lecture materials which were complicated. In some cases I skipped lectures and read the chapter instead. \n\nIn cryptography it was the first time I understood what cracking of prime numbers problem is really about - through theory of Modular arithmetic. \n\nOverall, you will learn as much as you put in - if you come in just for the grade that's what you will get. If you come in for the material you can read a lot in reference materails and on the web to supplement the course. It's totally up to you. \n\nProjects - many projects looked easy to start with, but by the time I was done with them I had spent a good 15 to 20 hours on each. In some cases even more time to setup and run the programs. \n\nOverall, I recommend this course to all who are in the systems computing specialization. ", 
    "CS-6200": " I have an undergrad CS degree so based on the topic outline in the course description, the class did not seem like anything new. I took this class thinking it would be an easy summer class. For me personally, it required a lot more work than I anticipated especially on the project side (programming side). Might be just me, but I felt like the test were trickier, basically not doing as well on the test as I thought I did when I took the test. Make sure you know C or have done some C programming before you take this class, there are MANY people who drop out during the first project just for this reason of thinking they will learn on the fly and are not able to keep up. From the perspective of someone with a undergrad CS degree (obviously this will vary based on your undergrad CS program rigor) everything up to about a little after mid term I already had familiarity with or forgot (Obviously the class went in greater depth of the topics I already covered in undergrad so I learn't new stuff here and there in the first half of the content). On the second part of the semester is where It covers virtualization and distributed systems, RPC and was where I really saw new content for me personally. If I took this during the longer semester I probably would have rated this class a medium difficultly based on my background. \n\nLike I said prior, unless you are pretty good in C, the projects will consume A LOT of your time and the test seemed tricky or maybe for the summer I was just a bad test taker.. Luckily I got the grade I needed and probably deserved. I would recommend this class to anyone wanting to build their OS fundamental and/or C or system programming knowledge. Background: No undergrad CS degree but have taken several non OMSCS courses for CS (DS and algorithms, obj. orient. design patterns). 1 year of industry experience. Basic knowledge of C. Received an A in the course. \n\nLectures are well done. However, the projects go over only several of the topics covered in lecture. Resist the temptation to save all of the lectures for later. \n\nProjects are done in C. Skeleton code is given, but a lot of thought needs to be put into how your implementation can play nice with the pre-written code. Also, a lot of time is spent wrangling with the autograder; sometimes the autograder doesn't provide any meaningful or consistent output. Projects are judged against several test cases; a difficult point for me was anticipating some of these test cases, but the project rubric and other people's questions and answers on Piazza gave helpful hints on what cases to anticipate. \n\nSpeaking of Piazza, questions are answered quickly, either by students, or the TA/the professor. Office hours are also consistent. \n\nNumber of hours spent: I had to work during lunches (every day during weeks when projects were due or an exam was being held), and an hour or two after work if I'm not already wiped out. Also had to devote several hours on weekends for projects and studying for exams. \n\nOverall, a very solid and straightforward class. There aren't any tricks or gotchas in my opinion, and results will accurately reflect the amount of work you put in. Be prepared to put in a lot of work though.  This was a fantastic first course for me. I am an experienced software engineer with a few years of experience without a CS undergrad degree. OS concepts was something I wanted to learn out of OMSCS. This course provided a nice introduction to these concepts, at least to a point where I know where to look for for more information. It is not as detailed as a standard OS course at a top-tier school, though. For example, in my undergrad school, I know that CS majors had to actually write an OS from scratch as the project for this course. This course only requires us to use some of the OS features to implement some applications. This course covers a breadth of information in an easily ingestible way. But it does not go deep into any of the concepts.\n\nBasic knowledge of programming is absolutely necessary. If pointer, references and SIGSEGVs scare you, this course is probably not for you. You don't need to be an expert in C, but you need to be comfortable developing small applications, and with basic debugging. Nothing you can't learn in ~1 week if you already know Java or another equivalent language.\n\nThe instructor, Ada, was fantastic. The lectures were very well made. Ada was available in Piazza to help out fellow students. The exams were great, the TAs were always prompt. All in al, a very well-organized course. I feel spoiled for future courses! :)\nHighly recommended! The 1st, 3rd, and 4th projects in this course are excellent. The 2nd project is an incomprehensible and poorly-designed quiz in T-Square that needs to be scrapped. \n\nThe lectures are taught at lightening speed, though they tend to be relatively sufficient for teaching the material. I'd suggest slowing down some of the more critical lectures or providing more examples. \n\nOverall this course was a pretty good one, and though I came in relatively knowledgeable about the material I still learned quite a bit. Lectures - great content. Ada communicates all the concepts clearly and at a sufficient level of detail. Lots of quizzes built into lectures that actually solidify your knowledge retention. I learned so much, and covered so much breadth as well. \nProjects - I really enjoyed these as well. It is all C programming and I've never done C, so there was some growing pains in the beginning. I recommend you at least take some intro to c course, and definitely review c strings (and what the str* functions do vs mem* functions), and pointer management, and the difference between c strings and buffers. Those were the gotchas that seemed to get majority of the Piazza posts. \nExams - These were pretty difficult. A lot of gotcha questions as well. You could know the concepts yet still do poorly on the exam. Also the midterm only covered a small portion of the material.... and that left the majority of the material for the final. And that was a lot to study!\n\nNow the best thing about this class was actually the unofficial slack channel. The TAs hung out on there and were so active, always responding to questions, carrying on discussion of concepts... I do wish I run into more classes with TAs like these. \n\nThe worst thing is the amount of people that thought they could get away with cheating in this class. The TAs here spend considerable effort at discovering and pursuing cheaters, on both projects and exams. They take this issue very seriously and managed to catch many. It's unfortunate that so much of their time and effort had to go into something that shouldn't happen, instead of on grading and improving projects. Be a considerate person, don't cheat. Great class.  As someone who did not know C before taking it, some of the projects were BRUTAL.  However I learned a ton, much of which is applicable to my work and any software development job.\n\nHighly recommended if you feel like you have a gap in knowledge in what is happening under the hood when the code is running, what is really happening with threads and memory, etc.  At the end they go into virtual machines, distributed computing and cloud computing which was really interesting too.\n\nThe class was extremely well run, the Professor and TA's were always available to assist and answer questions on Piazza.  Even on Sundays sometimes!\n\nI did not like how heavy the grading favors the tests - I spent 100+ hours on the projects and probably less than 10 studying for the exams, but the exams are weighted as 60% of grade.  However this may be necessary because projects do not go into a lot of the information presented in the course.  And apparently last semester the curve was such that a 55% gave you a B, so maybe it doesn't matter too much. Overall a great class. I learned a lot about the mechanisms and abstractions that go on under the hood in an operating system (specifically Linux) as well as how to put them to use in building applications. For me this was a perfect class for the earlier part of my degree program (2nd class). \n\nThat being said, this learning came at a fairly high cost to me. Going into the class I considered myself a 'novice' in C and 'intermediate' in a couple other languages (I didn't graduate as CS undergrad). The first project is estimated to take ~30 hours, and it took me 70 hours. The next two took me ~45 and ~25, respectively. I'd say if you are already proficient in programming in C or have the time to make yourself proficient, this class is definitely worth the effort. \n\nAlso, Prof Ada, the TAs, and my classmates were all very active and very helpful on Piazza. Prof Ada held office hours every week via Hangouts On Air, so they could be reviewed on YouTube at your convenience. Very engaged staff that really want to see you succeed, regardless of your familiarity with C / Linux stuff. First course in OMSCS. Highly recommended. \n\nWith only hobbyist-level experience in C, I could dive into the meat of the projects and found all of them challenging but fulfilling. Lectures kept my attention and sample exams proved useful in studying. Professor Gavrilovksa and TAs stayed very responsive in Piazza all semester. \n\nI would prepare for this course by establishing familiarity with (a) running VirtualBox VMs, (b) using source control in projects, (c) editing and understanding Makefiles, (d) debugging with valgrind or gdb, and (e) browsing system documentation such as manpages. \n\nOn Project 3 I got more pain than gain from Udacity autograder, but TAs allow you to tarball whatever you want and submit in lieu of Udacity. In my case they graded my tarball very fairly.  This was my first course in OMSCS and it was absolutely brilliant. It set the bar incredibly high for what online classes should be. \n\nThis course should be required to graduate. The workload was very manageable and the lectures very interesting. I had been writing file systems for about 4 years when I took this class and I managed to learn a worthwhile amount. I found this course to be a good introduction to operating systems, especially having never taken an OS course before. Since this is now my 9th course in OMSCS I've certainly run the gamut in terms of quality of courses. That being said, I'd say IOS is one of the better ones (my favourite and best being KBAI) for the following reasons:\n- The video lectures are well organized, the concepts are explained clearly, and quizzes are thoughtful and helpful in reinforcing topics. \n- Instructor and TA involvement was exceptional in Piazza. They fostered a collaborative learning environment which helped bring learning above and beyond just the video lectures\n- The projects were helpful and fun to do. As rusty as I am in C, the projects were a nice refresher and departure from my usual day-to-day work in higher level languages. If you start early on the projects and get involved with class discussions, there's no reason you shouldn't succeed on the projects. There are also plenty of extra credit opportunities that weren't hard to complete and ended up saving my grade. \n\nMy concerns with this class:\n- Exams: although mostly straightforward, they were tricky and sometimes required remembering one small lecture detail. The midterm and final exam weren't evenly split over lecture material with the final covering significantly more lectures. In this regard, I highly suggest that you keep pace with the class syllabus. \n- Grades: We received our project 1 and midterm grades back fairly quickly, but didn't get project 3 grades (which was due in the middle of the semester) until nearly after the final. Not having a good pulse on your grade was mildly frustrating. \n- Bonnie: Project submissions are handled through Udacity's testing framework, Bonnie, which had a few hiccups throughout the semester which were eventually resolved. I did like the instant feedback it provided. \n\nHow to succeed and other advice:\n- Keep up to pace with lectures, projects, and reading material. With regards to the reading material especially towards the final, I found that just focusing on the papers that were discussed in lecture were most important. There were some lengthier papers that, although interesting, contained far more detail and concepts than the class exams or projects required. \n- I bought the Silberschatz Operating Systems Concepts textbook but only cracked it open once or twice because the lecture material was complete in itself and Piazza was an excellent supplement for answering questions. I regret buying the textbook, but YMMV. \n- Invest time in setting up and understanding your C development environment. It will save you time in the long run when you're trying to debug a segfault. Use an IDE like CLion (free for students). It helps highlight syntax errors that you could otherwise miss. Learn the basics of vagrant (virtual machine), valgrind (memory leak checker), and gdb (C debugger). \n\nOverall I'd rate this course an 9/10 and would highly recommend it. It wasn't part of my specialization, but I'm happy to have taken it because it rounded out my understanding of basic CS concepts.  Great class. I had taken an undergraduate course in Operating Systems years ago, and this blew it out of the water in terms of depth and breadth. You'll get to learn about some low level, classical OS material and get into more modern ideas supporting concurrency, virtualization and distributed systems. Some of the lectures are pretty dense, so you'll probably want to watch them in pieces rather than all at once. There were 3 projects and an extra credit project this semester, and they were all in C. If you don't know C already, this is where the bulk of your difficulty in the class will come from. Some of the code templates given used syntax and operators I'd never seen before, and this created a lot of difficulty for me. If you're well versed in C and navigating Linux man pages already, you're probably fine. Exams were tricky, but I didn't find them exceptionally hard despite their reputation. The course is curved, and the boundaries seemed pretty generous. If you mess up more than one project you can still walk away with a B if your exam scores are above average. \n\nTAs are pretty responsive on Piazza, but don't rely on them to help you at the last minute - ask early and you should be good. Project grades take a long time to return, but this semester had an unusually high number of students so I kind of expected this going in. Make sure to pass Bonnie tests - they seem highly correlated with the end grade of your projects. \n\nThere was also a very active course Slack this semester where you can get fast help if the TAs are online. Professor Gavrilovska holds office hours every week (not just the TAs), so you can get help there too. I'd recommend this course early if you're looking into the Computing Systems specialization and need to brush up on low level OS material, but be warned - it's a deceptive amount of work. Definitely worth taking. This was one of my first classes and I went in with 0 experience with C. The concepts were well explained and I picked up on them quickly but the projects were absolutely the most painful projects still to this day. At the end of each project I could look back and it wasn't an unreasonable amount of work but I struggled at every step. I think the first project was creating a socket messaging app and not even understanding how strings and pointers work in C it was a big jump. All in all I'm glad I took the course and I learned a lot but if I went back I definitely wouldn't have enrolled without an intermediate understanding of C. Ada and the TA's were awesome. Only complaint was Project 2 was a little more difficult due to confusing instructions than it needed to be. Material was useful and projects were at the appropriate challenging level. The use of an auto-grader that was exposed to the students meant students could learn from their mistakes and make correctly functioning code. You *WILL* have to program in the C language. GIOS was my first course in OMSCS and I found it to be a good place to start. This course does have quite a bit of material that you need to get through in addition to the projects, but I found everything accessible with my CS background.\n\nThe biggest advise I would give for students considering taking this course is to brush up on C ahead of time which will make your first project much easier. If you are taking this course, make sure that you start your projects as soon as possible. Waiting to the last minute just adds stress.\n\nOverall, great course, great instructor. Would definitely recommend. This was my first semester, and I took this class along with another course. I took this class in order to strengthen my understanding of OS's, as I wanted to improve my grasp on fundamental CS concepts. Professor Ada and the TA's were amazing and responsive. Since this was my first semester, this class has set a high bar for my courses as it was very well organized and lectures were quite clear. \n\nAssignments were very helpful in deeply understanding some of the OS concepts we covered. Two of them were time-consuming, and I learned very quickly that I needed to start early in order to succeed. That said, it really helps to be familiar with C before the class; I think a lot of people will agree that one of the reasons why the first assignment is so tough is that many people are learning C in the process of doing that assignment. \n\nThe exams (midterm and final) are tough and cover a wide range of concepts, some of which can get very dense. So again, it is best to start very early when studying for the tests -- do not cram!\n\nThis class was definitely challenging but certainly worthwhile. Grading was tough but fair, and you are set to succeed if you put in the effort, even if you make mistakes along the way. It was intense at times and sometimes stressful, but so worth it. Would highly recommend! Professor Gavriloska is exceptional. She is dedicated to her students and making the course smooth and well organized. Really enjoyed this course. Had very little C experience going in, so I had to learn it on the fly. Not a huge deal, but someone with more C experience would find it easier. The autograder was a complete pain in the ass. But it was very rewarding when you finally got your code to pass. Some of the later stuff wasn't as interesting to me and we didn't have projects that covered it. Overall, I highly recommend this course for people that haven't taken an OS course or are looking for a refresher. This is my first course of the OMSCS program, overall great learning experience. The course covers many OS topics with focuses on design and implementation of concurrency system, i. e. , CPU, memory, IO and file systems. I would say the course is very well prepared and taught, the lecture is organized, the teachers and TAs are very engaged , and the piazza discussion is very active and fun (well, it could also be discouraging, when you see your classmates are way far ahead of you in the project works). \n\nI am not sure if the project assignment is my favorite part of the course, but it is definitely where I learn the most. \nI am not a programmer but as a PhD in electrical engineering, I do have quite some experience in programming (not C unfortunately). However, I did have a hard time with picking up C. I believe, this is the reason that most of people dropped the course, ~ 40% according to the unofficial survey. On the other hand, I do see there are a lot of students who are professional software developers, these are usually the people who do the project much faster and lead the conversion on piazza. (trust me, I looked at the more than 15 LinkedIn profile of the students who are active on piazza). I was a teacher myself in a European university before, I know how challenging it is to design a project assignment given heterogeneous background of students. I suggest to add more exercises or provide more code for the early projects to cut the steep curving curve. Most of people's feedback is \"I thought I know how to program in C until I started CS8803 Intro OS\" :)\n\nThank you Ada and also the TA s for the fantastic course.  Excellent class. You should be comfortable with C before taking this class. The projects really help solidify some of the material.  This was my first class in the program, and I really enjoyed it. I came into this course with plenty of C knowledge, and I thought I understood Operating Systems concepts well (turns out I did not). I would say with my background, this course is more like a medium difficulty because of the amount of content, but for those new to C or OS concepts, I suspect it would be quite hard. That said, it is an achievable course, and with the generous curving policy it does not aim to make your life difficult. If you complete the work and give the class a fair shot, you will probably earn a B. Earning an A takes a bit more work.\n\nProjects are described in better detail on other reviews. With my C background, Pr1 took about 10-12 hours, Pr2 took about 4-6, Pr3 took about 8, and Pr4 took about 5. I would say they are difficult, but at no point did I feel like I was lost without any clue what to do next. If you reference the readme, make use of search functionality in Google, Piazza, and Slack, and when that fails, ask relevant questions, the projects are quite achievable without any existing C knowledge. But I will admit they would be quite difficult if you haven't been exposed to much C. I would say you could double or triple my times if you're trying to learn C along the way. It would be a good way to learn C, for what it's worth.\n\nExams are difficult. I thought I understood OS material already, but the course went much deeper into how things work under the hood. It does a good job of exposing you to important academic research in the field, and gives you some of the early building blocks of how things came to be. The exams are multiple choice and fill-in-the-blank for calculations, but they are far from easy. You will not do well if you haven't absorbed the lecture material and given the paper readings a fair shake. The exams are both quite fair, though. The practice questions provided give you a very good view of what will be on the test, but again, they are not easy.\n\nThe course makes it very easy to participate. A TA has opened up a private paid slack instance which to me was invaluable this semester. It allowed many people a place to get more instantaneous help with projects and material, as well as get to know each other and create decent relationships, for an online program. If Piazza isn't your thing, this is a great resource to have. Either Slack and Piazza participation counts for a small portion of the final grade, but there are plenty of opportunities to contribute.\n\nMy advice on this course would be to brush up on basic C concepts, and hit the ground running. Use the first week to get ahead on lectures and readings, so that when the first project comes out you can start work immediately. The only people I observed struggling with it to the point of not completing it were those who started it halfway through the deadline. There is generous time given to complete the projects, which makes it ripe for procrastination, but do not. I would also advise you to get ahead on the second half of the course - the material on the final is about 2 times the content of the material on the midterm, so work quickly through that material to allow plenty of time to review for the final.\n\nIf you come in with some interest in the subject, it is a very rewarding course. I like that it doesn't hold a grade over your head, which helps with enjoyability... but you do have to do the work to obtain it. In my opinion it makes an excellent first course, as it is well-run, the TAs are available and helpful, the professor actively participates despite the large class sizes, and the projects are well put together and help expand on the material you learn. I took this course to satisfy my 2nd foundational course, and passed it with an A. This is an intensive and rewarding course if you're interested to learn about OS design. It will hammer you to learn Linux System Programming with C using POSIX API. \n\nThe projects are time-consuming, but they're fun to do. Most assignments and exams include optional questions to gain Extra Credit. In addition, grades are curved generously. The average final grade was A. \n\nIf you'd like to take this course during Summer, note that you will end up allocating your weekends to complete the C programming assignments.  I took this class after already having taken an undergrad OS course and with good familiarity with C. Having that background made the class a bit easy, but the tests will still require some studying. The midterm and final were fair but most of the questions could have been answered with only watching the videos, the papers take a long time to read and aren't heavily represented on the tests.\n\nThe projects aren't too difficult if you already are familiar with C but they will still take some time to complete. The projects taught concepts that were new to me, such as shared memory and inter process communication, so they were enjoyable. The TAs are active and answer questions quickly.  Lectures: Very well done, the professor was very knowledgeable in the subject matter and provided enough information for you to get started on the projects. \n\nProjects: All were written in C. If you are completely unfamiliar with C i recommend taking a quick refresher. The projects were very challenging but I feel I really learned a lot while completing them. Even though the project were challenging, the slides provided enough information most of the time for you to get started and use google to figure out the rest. \n\nExams: Standard proctored exams that cover a specific set of material. Not cumulative. As long as you study you will do fine. \n\nGrading: Grading was extremely fair i thought. A lot of the projects used a \"unit test\" method through Udacity and the results of those tests gave you a pretty good understanding of what grade to expect. Final grade was curved. \n\nOverall: Great class but very challenging. Do not take this with another class unless you have a lot of time on your hands.  First class in OMSCS with no academic CS background (though I have an undergrad engineering degree), no C experience, and 2+ years in professional web development.\n\nThis class is extremely well run and I commend Professor Ada and all of the TAs for their efforts to make Piazza and Slack as helpful as possible. The lecture content is somewhat dense at times but Ada does a great job of explaining concepts and I found her lectures extremely useful. There are two exams that are certainly tough but you only need to study the lecture material to do well on them. I'd recommend reading the assigned papers but the main concepts from them are also covered in lecture and I didn't bother to re-read them while studying for exams. This approach netted me above average scores on both exams which largely contributed to my A in the class.\n\nThere are three projects whose difficulty will depend on your familiarity with C. I came into the class with no C experience and definitely had my struggles on the first project, but I managed to power through it and felt far more comfortable for the rest of the class. Despite this I'd caution against taking this class with little/no C experience unless you consider yourself a strong programmer, otherwise you may be in for a rough ride. The first two projects are both difficult and time consuming and I would start them as early as possible because you are going to run into issues with C/Bonnie/etc along the way. If you manage to get through those you'll find that the last project takes significantly less time. The good news is that you have access to the autograder (Bonnie) for all projects so you generally know what grade you're going to get when you turn the project in. I put significant effort into the projects and got full points on all three, though I know students got docked minor points for poor READMEs and other small things.\n\nYes this class is hard and you're going to get frustrated during the projects, but your efforts will be rewarded by a solid foundation in operating systems and you will no longer fear C. This is my first class in OMSCS so regarding difficulty I don't have enough info to determine, but it's not obviously \"easy\" especially if you don't know C in advance. But I could get A without knowing C before taking this class, so you don't need to be too scared unless you even haven't never done any coding.\n\nThe former half of lectures are really well tied to programming projects and I loved it. There are 3 projects and all required C programming. I expected this class is for OS internal and it is partly correct but it spends much time on concurrency problem (a process and a thread) while it is still very fun.\n\nI felt the latter half of lectures are bit dry, and because we don't have hands-on experience on them (memory management, file structure, spin-lock, hardware related subjects, and memory sharing) through projects, it was bit difficult for me to understand and absorb all of what I was taught.\n\n20 hrs / week is just average and I always tried to complete a project as soon as possible, so after a project is open, I spent 70-80 hrs / week and after I completed it, I go back to lectures and spent 10-15 hrs /week. I recommend the same way if you don't want to be upset at the last moment...\n\nExams were not so easy, you should expect they are more complicated than sample problems. However they kindly offer a check list you should review before each exam, so by checking all of them, going through all quiz on lectures and sample problems, I think you can be ready for tests.\n\nAnd if you want A, you should definitely try to get all extra credits. This class offers a lot of extra points. I'd recommend visit the Slack channel if you get stuck on projects. TAs are more responsive on Slack. What an amazing course! I had a weak background in the topic and programming in C, so it was difficult for me. I spent quite a bit of time each week but I learned a ton.\n\nThe lectures are put together very well, and the professor and TA's are extremely engaging. Questions on Piazza are answered very quickly and there was a separate Slack group run by some of the TA's. When you get stuck, it feels like there is always help available.\n\nThe exams are difficult but fair. They mainly consist of thoughtful multiple choice or fill-in-the-blank calculations. The one downside is that the exams account for a very large portion of your final grade.\n\nThe projects were fun and they were run very well. The instructions are overall pretty clear and you are able to submit code to Bonnie for testing, so you have a good idea how well you did before it's even officially graded. There were extra credit opportunities for every project.\n\nThis course is thoughtfully designed and made for an excellent introduction to the program. I would recommend it to everyone. This is my first course of the OMSCS program, overall great learning experience. The course covers many OS topics with focuses on design and implementation of concurrency system, i. e. , CPU, memory, IO and file systems. I would say the course is well prepared and taught, the lecture is organized, the teachers and TAs are engaged, and the piazza discussion is very active and fun (well, it could also be discouraging, when you see your classmates are way far ahead of you into the project works). \n\nI am not sure if the project assignment is my favorite part of the course, but it is definitely where I learn the most. I am not a programmer but as a PhD in electrical engineering, I do have quite some experience in programming (not C unfortunately). However, I did have a hard time with C. This is mostlikely the reason that most of people dropped the course, ~ 40% according to the unofficial survey. On the other hand, I do see there are a lot of students who are professional software developers, these are usually the people who do the project much faster and lead the conversion on piazza. (I looked at the more than 15 LinkedIn profile of the students who are active on piazza). I was a teacher before, I know how challenging it is to design a project assignment given heterogeneous background and skill sets of students. I suggest to add more exercises or provide more code for the early projects to cut the steep curving curve. Most of people's feedback is \"I thought I know how to program in C until I started CS8803 Intro OS\". \n\nThe content of the course is really straightforward, i would rate the difficulty for the course content 3. However, the programming assignments are substantially more difficult for those who are not experienced with C. I rate it 4. 2. Given the fact that project assignment takes about 3 times more time than the course content, the weighted difficulty is 3. 9. \n\nThank you Ada and also the TA s for the fantastic course.  Before coming into the course, I had 10+ years of experience in developing C and C++ based distributed networking applications that used IPCs such as Sockets in a big way. Still I had to sweat a bit to complete all the assignments in IOS. C was not a problem, but the autograder warrants/enforces implementation in a certain (generic) manner which reflects constraints on real-world commercial applications such as web-servers. \n\nHaving said that, the assignments were fun, the video lectures even more so. The class is very organized. The instructor and TAs are very active in Piazza and go above and beyond in clarifying concepts. Office-hours are held every week. \n\nRecommendation to students: Stick to the schedule specified and start your assignments early. Even if you are GOD in C, you will end up spending sizable amount of time for all assignments.  Great class. I learned a lot from the projects and the lectures were clear and well planned. \nDefinitely get started on the projects early and having some knowledge of C is a must. It's possible to learn C as you go, but your weekly workload will be substantially larger and honestly, you already have enough to learn in the class.\nI felt like the grading breakdown was fair, with ~50% projects and ~50% tests. There are extra credit opportunities.\nThe professor and TA's are all very active on piazza and slack; probably one of the most active in the courses I have taken so far. This is great because questions get answered very quickly.\nThere are 4 projects, with one of them being extra credit only. I would say all 3 projects require substantial time, with project 1 being the most work. Be prepared to spend at least 30-40 hours to do project 1 or project 2.  This course covers a vast set of topics in a short amount of time. The projects are narrow in focus however. Although the lectures are excellent, I felt that the course would have been more effective if the course creators focused more on depth rather than breadth. Perhaps assign more projects, get rid of the midterm, and replace about 40% of the lectures with more in depth information about the other 60%. Also grading of the projects is extremely slow. Grades for two of the 3 projects are unknown even after taking the final. This was my first OMSCS course. I come from a mechanical engineering background, with only done 1 C project over a year ago during my senior year embedded computing class and capstone project. I've done some self-studying and programming at work, so not completely disconnected from the programming world. \n\nI knew that I would struggle a bit to understand and relearn C so I gave myself extra time to do the projects (START EARLY) and stay consistent with a strict schedule. With a full time job and no kids, this class was my life for these few months.\n\nOne key thing I struggled with in the beginning was to set up your environment. They say there are a bunch of ways to do it and you can do it however you would like, but from a beginner's perspective and not knowing anything about how to set up an environment, I would have appreciated it if they had ONE default suggestion. After a week or two of struggling to get a proper environment set up, I finally found a working environment. I used VM VirtualBox to install Ubuntu (which they should have instructions/find instructions on internet), then for IDE in Ubuntu I used VisualStudio Code. This IDE was great because I figured out how to do debugging (there is a youtube video on debugging with VSC in Ubuntu), and you can debug with multiple VSC windows, essentially stepping through multiple interacting programs (debugging client AND server at the same time).\n\nA tip is to be active on the Slack channel. It can be difficult to keep up with all the activity going on, but if you put in the time and effort, you can sometimes gain some really helpful pointers and tips. That is why it is recommended to really start early and find your problems/roadblocks early, and you can be on the lookout for a solution in the Slack channel. To get the most out of the Slack channel, I learned that you need to be very precise with the wording of your questions and try your best to communicate that through text. That will allow the TA's or students to better help  answer your questions. Don't be afraid to ask your questions, but be specific and think about how to phrase it in a way for other people to understand (explaining code and technical stuff through text can be very confusing and difficult).\n\nAnother tip is try to meet up with students locally. Having someone to talk to and discuss project ideas and course concepts is VERY helpful. Of course please beware of plagiarism and misconduct according to the course rules.\n\nProjects were absolutely great! Coming from someone with very little C programming experience, I had so much to gain. Of course they might change the project contents every semester, but our semester it was fair amount of work with the given time. The first project was the most daunting because everything was so foreign to me. The VM, which IDE to use, how to debug, socket programming (concepts I've never done nor was it taught in the videos); it was overwhelming at first... so START EARLY. Project 3 was by far the most fun (get a whiteboard) with the design aspect. Project 4 was the most difficult to wrap your head around, but once you figure it out, you will say: \"What that's it?...\"\n\nIf you finish the projects and pass all the automated tests with a decent readme, you should be able to get 100 on the projects. I did right at average for the midterm, and a little below average on the final (disappointed with my performance), but I surprisingly got an A in the course!\n\nAll in all, in my opinion this was a perfect first OMSCS course. It will definitely not be easy, but if you put the time and hard work in, you shall be rewarded! Professor is great. TAs were responsive and helpful. The lectures are packed and engaging and you are tested mainly on the content of those and the research papers. The projects were rough for me and it took me a very long time to get through them. I think the reason for this is that I come from a scripting language background. I spent a lot of time floundering with C, but the TAs and other students are helpful. The projects themselves are well defined, interesting, and fun. I learned a whole lot form this class and I recommend to anyone who is at least somewhat familiar with the basics of computer architecture. If you, like me, are not practiced in C, start the first assignment as soon as possible to see if this class is doable. I read \"The C programming Language\" as preparation for this course. It was not enough. The better your understanding of C,  the fewer late nights you will have and the more you will enjoy this well organized, well communicated, interesting course.  Overall: I think this course should be mandatory for those of us without a CS bachelor's degree. I learned a ton about how computers actually work, and even though I am a front-end Javascript developer, a lot of the stuff I learned somehow kept coming up at work. Now that I've finally finished, I really want to go back over everything to solidify my knowledge. I would recommend this course to everyone, regardless of specialization. \n\nPrerequisites: I wish I had spent more time preparing for this course by learning C better, and doing the 'C for programmers' course on Udacity. I'd also recommend going through the free online book 'OS: Three Easy Steps' (it's pretty short, and there are exercises that go along with it). If you do this, I think you'll get a lot more out of the course. \n\nLectures: With a couple of exceptions, the videos are good but can be pretty abstract. The most enjoyable lectures were the ones that tied into the projects very obviously. You can get away with only watching the videos, but for a fuller understanding you will need to read the recommended textbooks and do a fair bit of googling. \n\nProjects (40% of your grade): I found the first project very difficult indeed, and I think this is one of the reasons why this class has such a high dropout percentage. However, if you can mash your way through project 1, then you should be able to get to the end of the course with a good grade, as projects 2 and 4 are much easier. Project 3 required a few late nights too, but at this point you should be better at C. Start early on P1 and P3, and do not underestimate them. \n\nExams (55% of your grade): The two exams (midterm and final) are short, and while I found the midterm relatively easy, the final exam covered a lot more material and was acknowledged by most of us to be pretty difficult. If you follow along with the recommended schedule (which I didn't), you should be fine. \n\nSlack/Piazza (5% of your grade): Very active/helpful TAs and professor. Took this course as my first course in the program, and it was a great choice. It is a very well organized and well run course, and I learned a lot. I came into the program with no CS background, minimal programming background, and zero experience with C, so the first few weeks of the class I was working probably 30-40 hours/week on the project, but it was manageable as I had few other commitments at the time. \n\nIf you can get past the first project you're definitely over the hump, the other projects were a bit easier. The course is also fairly generously curved, I ended up getting an A when I thought I was solidly in the B range. Overall, I would highly recommend this course as it is well run by both the professor and the TAs, and you learn a lot. This was my first class in the OMSCS program and by far this was the best class I have taken during my formal CS education. I did get an A in the course for some perspective. The course is made up of 4 projects, a midterm, final, and class participation on Piazza. The lectures are great and easy to follow. I highly recommend watching them on at least 1. 25x speed. I started doing this halfway through the semester (eventually bumped up to 1. 5x when re-watching) and realized I could retain a lot more info than having to keep rewinding because my mind was drifting. Only a handful of papers to read, most were pretty dated but helped drive some concepts home. If you are looking for an easy class though, this is not for you. I feel this has prepared me well for the workload/work ethic necessary to succeed in classes to come. You get out what you put in!\n\nAlso 'Operating Systems: Three Easy Pieces' is a free online book that I referenced A LOT to give me an intro into the topics discussed in the lectures. Chapters are short and easy to read/comprehend. Highly recommend it!\n\nFull Details:\nThe projects are, as mentioned everywhere else, difficult and clarification of parts are necessary. I would recommend being comfortable with at least the basics of C (pointers, func pointers, extern usage, getopts, string parsing, file manipulation, etc. ). For some that might be too basic but if you know how to read through the provided code then you should be okay to at least get through the simpler portions of the projects. You will want to start looking into the basics of socket communication, posix threading library, posix/sysv IPC mechanisms and synchronization. You will be provided enough material to get you going with each of the items listed in the last sentence. \n\nThe midterm and final are not easy and it is not enough to \"memorize\" formulas/concepts. You will need to understand the purpose and how each input to the problems/equations affect the output and then formulate what pieces are necessary to come to the correct answer. You will really have to understand the material. That said it is possible to do well. Participating in Piazza discussions, re-watching lectures, and doing the projects will prepare you well in understanding the concepts/problems on the exam. \n\nOne thing you might not expect is that you are provided an Ubuntu VM that is set up to test your projects in before trying the auto-grader in Udacity. Valgrind and GDB will be your best friend and help you find things that the auto-grader will detect and fail your submission even though things in the VM work fine. I would recommend some sort of version control too (I used git)! Excellent class, definitely one of my favorites so far! Projects were challenging and the exams were difficult, but I felt like I learned a ton. The TAs were great and very involved on Slack. Would definitely take again.\n\nIf you're thinking of taking this course:\n1. Be comfortable coding in C\n2. Start projects early -- they take a lot of time to complete!\n3. Watch and rewatch all of the lectures Professor and TA's were excellent. The lectures are very polished and intuitive. Programming projects can be very time consuming (especially the first project). Start projects early. Exams are medium difficulty. They follow the lectures pretty closely but require good understanding of the material. I watched every lecture again in the week or so leading up to the exam to refresh everything. Without doing that, I think the exams would have been much harder. There is a generous curve (80+ was an A in our class). \n\nThe programming projects are all in C, so if you are not familiar with C, it would be a good idea to take a refresher. If you are not a strong programmer, you will really struggle with the projects. I had very little C experience, but did my undergrad in CS and have been a software engineer for about 5 years and the first programming project probably took me about 50 hours to complete.  Great course overall. Videos are structured very well. TA's very responsive and helpful. First project was fairly hard. I think it was the learning curve for C and OS-style programming. Slack channel was very active!\n\n This is a great class. The target student is someone who has an OS course as an undergrad, but a while ago (or someone who wasn't CS undergrad). You will learn new things, even if you've developed low-level code before. The projects are moderately challenging. You need to be comfortable coding in C, the language of Operating Systems. People who don't know C find the projects incredibly hard. \nThe Professor and TA's are very active on Piazza, and go the extra mile to help out students who are stuck.  I will compare this class to Intro to HPC since it's the only other class I have taken. \n\nCompared to HPC this class was way easier. The gotcha here is that the testing style is not my favorite to be sure. It's multiple guess multiple select for the majority of the questions. I also thought it was trying to be tricky on some of the questions just for the sake of trying to increase the difficulty level. There was a ton of information to study for the final and I feel the test with only 15 question did not sufficiently test that material. Instead it was written too narrow and specific with too many gotchas. The programming assignments did take a while to accomplish but compared to HPC it was way easier (orders of magnitude easier). The bulk of the time I spent on the programming part was testing my code against a black-box auto grader.  Intro to OS is both a challenging and rewarding course \n\nThe assignments all require some research to complete, and they require a good understanding of how C works, most notably pointers, strings, and structs. Even though the assignments were all challenging, the TAs and other students were all very active and helpful on slack and piazza. You can submit the projects as many times as you would like before the deadline, and there are automated tests written for each project that give you immediate feedback on each submission. The projects deal with topics such as synchronization, multithreading, remote procedure calls, and different forms of interprocess communication. There are also often a few extra credit points you can get on most assignments, but usually you need to be to complete the main part of the project before attempting the extra credit. \n\nThere are only two exams: the midterm and the final, and they both cover a lot of material and are worth a pretty large percentage of your grade. Even if you remember all of the material, you have to be able to understand it and apply it in new ways on the exam. The questions are either multiple choice, check all that apply, or fill in the blank. I recommend taking thorough notes while watching the lectures to prepare and asking questions on slack or piazza when you need clarification. \n\nTo succeed in this course, I recommend not procrastinating, especially on projects 1 and 3, and once again taking good notes on the lecture material. Stay active on slack and piazza. Also, it is helpful to get some practice with C before starting. Though this course has a lot of assigments in C, the best part of this course is getting to read all the seminal papers, that pretty much introduced what is mainstream in most of the operating system. Exams and assignments were well managed. Great class and great introduction to the OMSCS program for me. I came in without much background in C and found the projects(especially the first one) to be hard. If you know C well then you won't have this problem. I spent a significant amount of time catching up on C. The class material was not that complicated. The instructor is very clear in her explanations and was present almost every week during office hours. One of the best things about this class was the slack channel and the TAs on there. They were very active as were the fellow students and it was fun discussing projects. The class is very well run and I highly recommend it to anyone. Ended up with an A. I took this course with very little C programming experience.  The first project had a significant learning curve for me in all aspects.  The first two projects were 60+ hr  of work each for me.  I did well on the third because it was easier and also am more comfortable C.  I'm guessing a student with a C programming background could complete the projects in a quarter the time I spent.  It did take significant effort up front to understand the requirements of the projects.  You can do this class without C in you skillset, but you will spend 10+ hours a week the first half of the course catching up on it because the projects require it.  Working full time, tackling this course material, teaching myself C, and another class on top of that was not the best idea.  \n\nThe professor, TAs, and Piazza/slack community were great in getting assistance with the projects and answering questions. \n\nThe lectures and reading material are well presented and organized.  Due to my efforts catching up on C and taking another class, I did not get to dive into the material as much as I would have liked.  One thing that I wish the class provided was more assignments related to the readings.  Whether essay or simple quizzes, I think it would help students take more from this material to have it tested in more than just the two exams.  Only half the readings relate at all to the projects.  No textbook required, but you should have some OS programming reference material handy.\n\nOverall very worthwhile course but A LOT of work if you don't know C!\n\nsemi-pro tip: Set up and get comfortable with an IDE ( I used VS code, many used CLion) the first week or prior to taking the class.  You will need it! Overall, this class was really well ran. Appreciated the active TA community and that Ada was present / hosted most of the office hours. The number one thing I would suggest (like many) is to start the projects early. I didn't do that for the second project and greatly regretted it.\n\nThe projects were my favorite part of class but also can be extremely time consuming, knowing C is very helpful and suggested on class pre-reqs. The tests weren't cumulative and were written fairly. But keep in mind the second half of class had considerably more content than the first.\n\nOverall, great class and glad it was my first in the program. Coming into the course I had about 4 years of professional development experience, mostly in C# and Python, but also some experience in C in undergrad and some professionally (programming micro-controllers). I don't have a CS degree so had never taken an OS course. This was also my first course in the program. \n\nThe class is extremely well run. The TAs are very active and helpful, and both Piazza and Slack are active and great resources. The lectures are thorough, well done, interesting, and generally translate well to the material needed for the exams. The projects (with the possible exception of project 2) are well done and very helpful to understanding concepts. \n\nThe style of the exams was multiple-guess and fill in the blank, timed, proctored (ProctorTrack), taken through T-Square. The questions needed some improvement, though. Some of the questions are a bit nit-picky, and some are written in such a way that I spent more time debating the intent of the question than figuring out the answer. \n\nAs for workload, the projects consumed most of the time I spent on the course. When I was working on a project I might spend 20+ hours a week on the class. Otherwise it was less than 10. To be successful on the projects I'd recommend starting early, being comfortable writing C in a \nLinux environment, using the command line, and debugging with GDB. \n\nLast, don't cheat. One of the TAs mentioned that they caught something like 10% of our class cheating on the projects. That's ridiculous. Start early, keep at it, and hit the Slack channel when you get stuck. You can survive a bad grade on a project but a course F due to cheating might end your time in the program. Don't be dumb. If you have a background in C, take it, take it, take it. Enough said. If you don't, you'll probably struggle. This is my first exposure to a OMSCS class. I would consider myself pretty well versed in C before the class and had some working knowledge of many operating systems mechanisms through using vendor OSs for embedded DSP chips which also lends itself to a decent understanding of computer architecture. \n\nOne of the best features of the class is the slack channel which one of the TAs has generously fronted the cost for. I  saved myself many hours just by doing some cursory scanning of the issues that others were running into on their projects. The TAs that were active in the slack channel were generally helpful as well.\n\nI feel overall the course was paced very well with ample time to do projects (assuming you don't procrastinate too much). Personally, I feel the exams aren't that great probably because they need to resort to a lot of multiple choice, true-false in order for the tests to be gradable. There was an extra credit project for up to 4% of your grade which was graded if you were near a grade border line. Overall, it seems that the curve is extremely generous (it's extremely easy to get a B). It would almost be more correct to call this \"Intro to Concurrent Programming in Linux\" or \"Programming at the User/Kernel Interface\" since the main focus of the course is on concurrency primitives (threads, mutexes, semaphores, condition variables, etc. ) and coding against Linux syscalls. You won't come out of this class writing a basic OS kernel or anything like that. \n\nWhat you *will* gain from this course is an appreciation for how userspace and the OS kernel interact, and a new appreciation for how much complexity is abstracted out by modern APIs that you don't have to deal with. \n\nIf you're already comfortable programming in C, you shouldn't have too much trouble with this class. If you're not, you probably will. The exams (midterm and final) are straightforward but can be a bit picky (i.e. a complicated multi-step calculation that Ada works through in the lecture videos in its entirety, but that you must reproduce on the exam without references), but the course is generous about grade cutoffs (>= 80 == A seems to be the standard) so even mediocre performance on them is not a blocker for earning a good grade in the course. Very interesting topics. Very interesting programming assignments.  This course was very challenging for me because I did not have any prior experience with C (despite all of the warnings). If you already know C, then you're probably fine and this might even be alright to take as a first course. I would definitely not recommend following the approach that I did though by thinking I could pick up C on the fly; as far as I can tell, I spent *way* more time on the projects than most of my peers, and most of that time I was way out in left field anyway. If you're _still_ determined to take this course without knowing C first (hey I get it, I was stubborn too), then do yourself a favor and go pick up a copy of [The Linux Programming Interface](http://man7.org/tlpi/) (I found one pretty cheap at a local used books store) right now, because it'll be your lifesaver for the first few projects.\n\nThat said, even though I really struggled with the programming assignments, I still really enjoyed the class and feel like I learned a lot from it. The lectures are great: clear and easy to follow; the professor actually does office hours every week and goes over some great and useful stuff; the TAs are super helpful (and a pretty funny and entertaining bunch on Slack!); and all-in-all the course was very well organized. I am definitely going to miss this class! I'll start off with the fact I've been building enterprise-level server software for years, so the client-server programming assignments in C (where most people struggled) weren't too bad. Lectures were solid, based in the required papers or the optional recommended reading (OSTEP book as prep material is great if you're weak on OS concepts). Gavrilovska is a published OS researcher, so knows the material intimately. TAs were incredibly helpful on Piazza with quick replies and knowledgeable (Tony Mason completely rocked it). \n\nThe only complaint I would have is that the Udacity autograder was configured to execute code that was different from what we were provided to test in local VMs, so several times I found myself ripping my hair out trying to figure out why some client-server test was timing out on Udacity after 10s but completing in milliseconds on my local VM. It seems the TAs love to set up network partition errors for client-server tests. You know who you are... ;)\n\nOverall great course, got more in-depth OS knowledge than I came into it with, and feel like it was one of the best-organized courses I've taken so far (3rd in the program). It definitely makes me think twice about how I'm about to implement a multithreaded and/or multiprocessing solution.  My second course in OMSCS. This was an extremely well run course. It's set my expectations very high for other classes. The professor was highly engaged on Piazza. The TAs were well organized and responsive. The projects overall were very good and well defined. I highly recommend this course.\n\nNow to the disclaimer! The projects are _hard_, like, if you don't know C at all, you are going to really struggle. So be prepared. I have experience in C, although rusty. The harder projects took me 20+ hours probably. Get started early on the projects and be prepared to spend a lot of time. Having said that, I thoroughly enjoyed them.\n\nThe exams were the usual closed book format - not my favorite thing in any class. Cram before taking, and you'll be okay. Project 2 was not included in fall 2017's syllabus. The other three projects had a steep time commitment and required knowledge in network programming and C. I probably spent 100+ hours on project 1, about 50+ hours on project 3, and about 20 hours on project 4. The two exams are proctored, tricky, and are worth more than half your grade. Most students did well on the projects but suffered severely on the exams due to the tricky questions. The class is curved, which makes up for the exams, but it would be better to reduce the trickiness of the exams and make the questions more straight forward so a curve wouldn't be so necessary. Generally a very good class. The material is presented well, and is very interesting. It definitely favors people that already are familiar with C and Unix. If you're not a strong programmer, you might be in for a surprise, as the assignments can be quite involved. \n\nThe TAs went far over and above the usual level of support, and did a great deal to make this class run smoothly. It wasn't perfect... they're using a somewhat new autograding system that had quite a few kinks. They worked out a lot of them, and it should be much better going forward.  Great class, I didn't have much experience with C besides a Data Structures class in undergrad (15 years ago), but I still remembered how pointers worked. Projects didn't take much time to me, but I'm a somewhat experienced programmer.\n\nTop notch lectures, although I love the fact that there exists a transcription with screen captures for all of them. This was my second OMSCS course and by far one of the best courses I've taken at a university level.  I say best in term of the rich amount of material that's covered in the lectures and projects which further reinforce (THREE projects + 1 extra credit project offered but optional) the theory.  The class will require you to work very hard to complete the projects.  They give you starter code and a description of what's expected.  You will find yourself googling how to do things like setting up TCP sockets or using Shared Memory IPC etc.  A good background in C will help in this course as all the projects require using C language.  Slack and Piazza are good places to look for answers / ask when you are stuck; 7/10 times someone else has already asked the question.\n\nTo prepare for C, read and practice some examples on Arrays, Pointers (understand pointer arithmetic also), Structures, Function Pointers (used to do Callbacks), Dynamic memory allocation and freeing using malloc() and free().\n\nUbuntu operating system is used for the projects.  I used Virtual Box to run Ubuntu but perhaps my computer is sluggish and the VM was annoyingly sluggish.  I would recommend running it natively off of a partition if you can.   I have two monitors but could only use 1 with VirtualBox, I could look into enabling the 2nd monitor but I didn't even try considering how sluggish it already was.\n\nThe exams were challenging but fair.  If you go through all the lectures and understand the content and do the quiz examples and sample exam, you will be prepared for the exam.  It is a lot of content so do keep pace with the schedule while working on the projects.  I got through the class without buying the recommended books.\n\nThe course will get challenging and you might lose hope at times but keep going.  Here are sample scores from a previous semester and what grades it translated to with the curve.  I wish I had this information earlier in the semester:\n\nExample 1: Project 1 - 80 %, Project 2 - Optional, Project 3 - 70%, Project 4 - 75%, Midterm - 90%, Final - 85% --> 87%, Participation - 5% (max) = A\n\nExample 2: Project 1 - 60 %, Project 2 - Optional, Project 3 - 45%, Project 4 - 50%, Midterm - 80%, Final - 75%, Participation - 2% --> 65% = B\n\nProfessor Ada is passionate about this course and going above and beyond to help students.  She holds a weekly session going over project and class questions.  This was very helpful.  I did not pay much attention to this till half way through the semester.  It really does help understand the project requirements.  The TA's are also helpful in answering question in Piazza and Slack.\n\nIt was a lot of work but I'm glad I took this class.  It really makes you appreciate what the Operating System does behind the scene.  Even if you don't do Systems level programming in your career, you will have a stronger foundation in computing.  Best of luck if you take this class! WORKLOAD:\nThis class consists of lecture videos, two exams (midterm+final), one \"quiz\"-type project, and three C-programming projects. The programming projects are based on 1) socket programming, general C, and multithreading, 2) IPC, and 3) RPC. The first two projects were sizable endeavors, and the third was much less intense. I had very little general programming experience (no industry experience, some C++ in undergrad, and some Python scripting). The first two projects took me about 50-80 hours each, I'd wager. \n\nTESTS:\nThere is no required text for this course, and all you get for material are lecture videos and papers. So studying for tests consisted of watching videos over and over for me. The tests themselves are kind of vague, but they are achievable, and you will learn a lot studying for them, but I would like to see more concrete test questions with less subjectivity. One \"project\" was a take-home quiz, where you decide on test parameters for some fictitious experiments. This one was super vague, and I would have much rather actual ran experiments and written a paper. \n\nLECTURES:\nI don't know if this is true about all OMSCS videos, but she waves her hand a lot in front of the screen, which causes the text to be projected on her hand. Not a big deal, but I found this distracting. I ended up watching the lecture videos over and over, because that seemed to be the best way to pass the tests. Would rather have been pointed to more reading. \n\nOVERALL:\nMy first course in OMSCS. I think this class was great and was not too hard, even without much programming or OS experience coming in. You'll learn parallel programming, scheduling, file systems, memory management, IPC, Linux, systems programming, etc. You touch on some concrete Linux examples but I would have liked more. Overall a great class and a must take for the first semester. As all great things it did have its ups and downs.\n\nIn this class you will learn about: processes and process management, threads and concurrency, scheduling, memory management, inter process communication and various sync constructs, i/o, virtualization, remote procedure calls, distributed file systems, distributed shared memory, and some datacenter technologies.\n\nYou will get to implement a multithreaded getfile client/server, proxy, cache, and play with an RPC (this semester's was Sun's RPC) think how awesome all of these would look on your resume, also you'll be able to answer all of the AOS prereg question list https://www.omscs.gatech.edu/sites/default/files/images/cs6210_diagnostic-preparedness-test.pdf. If your goal is to eventually take AOS, HPC, HPCA then this class would get you in great shape for them.\n\nThe lectures are great and require no outside readings to understand the material, professor Ada was very active on Piazza and held office hours regularly, and the TA's were friendly and very responsive on both Piazza and Slack. \n\nThe tricky part of the class were the exams, particularly the final which had more material than the midterm on it. So I suggest you study hard for it. There are some (few) papers to read through, but you can get through these fairly easy as there's few and concise.\n\nKEY to this class is to make sure you start the projects on time, the first project in particular is trickier than the others. The more time you spend on it and the better you do on this first project will be worth it in the long run. For each of the projects you have about 1 month to complete which is more than enough.\nI didn't do as good on this first project, because I started it very late, but managed to do good on the last two. So even if you don't do as good on the first one don't fret, you can still do great in the class!\n\nSome C will be good to know coming in, but I think that if you work hard you can pull it off with minimal knowledge, you just need to attack that first project really hard. If you're familiar with pointers, double pointers, function pointers, and using typedef and structs, then you're golden. If not then take the Lynda.com C classes (comes free for students) or grab the K&R C book and go through it (there's also a k&r c solutions book that can be bought for the solutions for the exercises) you can get those for under 20$ if you look hard enough, but just understanding the aforementioned will be enough and wouldn't take more than a few days of stack overflowing and testing on your own to get.\n\nMake sure you're on Slack since Day 1, you can learn a lot about the projects and get hints on them by lurking in the channels. This semester we had a PAID Slack workspace thanks to one of the TA's, how cool is that? To top it all this semester there were some pretty funny characters on it which made lurking enjoyable, however there's always the usual troll tho in there, but hey it's still a great resource.\n\nTL;DR: Just go for it; great class, doable/rewarding projects, friendly/active TA's, very active instructor, very C, such Threads, many Science, WOW. Ten weeks into the semester, I've spent 125 hours on IOS. Six of that was initially setting up the development environment (mostly because I had a new and unfamiliar hardware setup), 70 on the projects, 23 on Piazza, Slack, etc., and 26 hours watching video lectures. (I log my hours with Toggl. ) It turns out that I have a pretty good background for the coursework we've done so far (concurrency and IPC mechanisms). The next 5 weeks may prove to be a bit harder for me. \n\nThe TAs have been *very* engaged, and there's a lot of healthy discussion on Piazza and the OMSCS6200. slack. com channel, which has been fun. (That explains why I've spent 23 hours on it. ) The prof (Dr. Ada Gavrilovska Habl) has been very fair, and is an excellent lecturer. This is my first semester, so I don't have a basis for comparison, but I'm very pleased with this course, and I recommend it. \n\nProjects are individual and have been well-designed. Development is in C, which is entirely appropriate for an OS course. If you only know a scripting language such as JavaScript, R, or Python, you might want to hit the first project hard, right away, to climb that learning curve. This is my first class in the program and I really like it. The lectures and materials are clear and well organized. Piazza is super active. \n\nThe projects are the best part. The requirement can be vague and require serious interpretation and design before going into coding. They are challenging but not too difficult. I have never programmed in C before the class, but once I am familiar with C and get all the caveats of low level programming, the projects get a lot easier. There is auto grader so you get constant feedback and guarantee to get a decent grade. Project 1 is the most time consuming so far, so don't drop the class if you feel frustrated. It will get better. This class will definitely improve your programming skills. \n\nOverall, very high quality course. Good for a first class. Highly recommended.  Fantastically done class! The lectures were great - they used a very accessible metaphor (consistent through the whole class) to explain the different problems to be solved by the OS, and the different roles that OS components would fulfill. \n\nThe projects were challenging, but were presented with just enough guidance to be manageable. Each assignment used Bonnie for autograding, which was exposed to the students and was invaluable during testing. It makes an assignment much less stressful when you have a live view of your grade, before you submit the assignment! This was a great introduction to OS course.  I have no background in C and I have never taken an OS course before.  I tried to take this course over a year ago and ended up dropping it because I could not keep up.  This time around I prepared a couple months in advance by reading through Learn C the hard way and completing all of the C courses on Lynda.  \n\nUse the class Slack channel.  The TA's for this class are amazing and will always help you.  They don't give you answers but they can point you down the right path.  We had other students in the class with experience in some of the areas and they helped out in Piazza and in the Slack channel as well. Between the projects, TA's, and other students, there is a huge wealth of knowledge to gain in this class.  Then add on the papers and lectures and its almost too much.  \n\nThe TA's were very active on Piazza as well.  The instructor held weekly office hours to answer any questions about the projects, lectures, papers, or tests.\n\nProject 1 is really not that bad if you keep it simple, which is harder then it sounds when you're new to this subject.  Its easy to over think the problem and create a mess but the project is really pretty straight forward.  One of the main focuses of the project is multi threading.\n\nProject 2 was extra credit for us.  It had no programming but was a written assignment to design an experiment.\n\nProject 3 was the toughest.  It was a bit more free form in that you could design your program to work many different ways.  Its best to plan this project out before you start programming it.  I jumped right into programming and that was a mistake.  I still did very well on the project but I could have saved myself many hours if i would have designed before programming.  Shared memory and multi threading are some focuses here.\n\nProject 4 was the easiest.  Again its really straight forward but I can see it being another project that is easy to over think and make difficult for yourself.  This one dealt with RPC and multi threading.\n\nI found the mid term and final to be the most difficult part of the class.  You have to read all of the papers and watch all of the lectures and really understand the material in order to do well on the exams.  \n\nI stayed within the class average for the mid term and did very very bad on the final.  I got almost a 100 percent on the all the projects and did the extra credit.  Walked away with a B in the class.\n\nMy background is 1 year as system tech, 3 years of COBOL on a mainframe and almost 2 years now in Java doing full stack. You need to know C. Don't fool yourself thinking you can learn it in the first few weeks as may be suggested by the materials. If you don't understand pointers, referencing, dereferencing, data structures, etc you'll be in for a very rough ride. I 'thought' I knew C from my experience with Arudino work, but boy did I really have to play catch-up. Had I not had the Arduino experience before hand, I would likely have dropped. (A lot of people drop in the first two weeks due to poor C skills. Repeat you must already have some C experience !!)\n\nThe lectures are good and Ada know's her shit and does a good job of teaching it. I had almost no knowledge of how operating systems really worked until I took this class and now I have a much, much better understanding. I was taking this class just to fill electives, but it's one of those classes where I was surprised how much I learned (and how much I didn't know). I'm not planning on writing kernel software anytime soon, but the understanding you get from the class definitely helps even if what you mostly do is front or backend web dev stuff. \n\nAs with most other of the challenging course, start the assignments early. The forums move quickly, so if you fall behind your classmates on the programming schedule, your \"I'm just starting part A\" questions will get a lot less attention if everybody else has already moved on to Part C. If you stay up or ahead of the assignments, then the forums will greatly assist you. (My C got a lot better because I was able to stay in the general flow of the class. Had I fallen behind, I don't know that I would have made it. )\n\nSome of the later assignment build off of earlier ones, so design flaws can catch up with you later in the game. You're given very broad scope to design however you like and grading is through an API. I had a design flaw that I didn't understand that bit me on the last assignment in the extra credit sections. Nonetheless I got an A. The professor was excellent. She was very active in the forums and held Google Hangout office hours even while sick or travelling. The TAs were great too. For the first assignment, my TA did Google Hangout grading with each student, and I found it very helpful to get feedback in this way, and it allowed me to explain my decisions in ways I might not have otherwise. Unfortunately it was only for that assignment, as I'm guessing that it took too much time. \n\nThe programming assignments were practical and challenging enough without being overly difficult. Prior experience with C made them very manageable. \n\nI definitely got a lot out of this class.  First the good points. Professor Gavrilovska does a good job in lecturing the content. The examples are nice and she brings in some new topics relevant to the modern world (VM, Data Center technology, etc). Generally the course content was a rehash of the undergrad concepts and some new ones. Well balanced and I liked it.\nThe TAs were generally responding, not amazing but good. \nThe negative was the C projects. Whoever says whatever, you need good C and a nice understanding of pointers. I spent very long hours debugging code which I felt was not necessary for the course. I did not learning anything about the OS. I learned about advanced C Programming (which I am not sure was necessary as part of this course). The other thing I felt very arbitrary was the extra points for the project work. The instructions were not clear on what exactly would earn us the extra points. TAs used discretion which did not sit well with me (but again this is my opinion). The final exam was difficult but I was more disappointed with the quality. Some of the questions were ambiguous and not well laid out. I think Professor gave extra points for those questions. \nWill I recommend the course? Absolutely.  There were a lot of great things about this course and a few things that could use improvement.  The great things are the lectures are engaging, the assignments are relevant to industry, and the course staff was engaging on Slack and Piazza.  The things needing improvement I felt were the assignment count and one or two questions on the exams.    The first assignment and the third assignment were both rather difficult so you want to get a start on those as soon as you can. The fourth assignment was not as difficult so that was a great time to take advantage of the extra credit in the class. If you bomb the hard half of project 3 like I did, you're going to have a hard time bringing up your grade for the remainder of the course due to the lack of assignments .That's unfortunately enough to sink you with assignment 2 gone.   However, with the curve, its still rather attainable to get a B (I received a B).  The exams were rather difficult and tricky. Most of the questions were fine. I felt that one or two of the questions were cheap shots (obscure details in papers that aren't immediately obviously applicable to industry /historical ).  I went over the videos over and over again but honestly still didnt do very well here.  Definitely focus on understanding the details in the assigned papers and don't put the papers off until after the assignments were due like I did (this was a mistake).  All in all, this course wasn't that bad from a difficulty perspective for being a systems course. It'd probably be a good fit as a foundational class for you. It's a decently hard class, but not overwhelming. You just need to do the work. FWIW, I got an A, though it was curved upwards from a low B. I found the exams to be more difficult than the assignments personally, mostly due to the format. Sadly, I didn't do as well on them as I would have liked and feel I could have done better on them. My recommendation is to take detailed notes as you watch the lectures and read the papers. Especially take notes as you read the papers. Some of the material is a little dense, and the lectures can be sometimes circuitous. If you're watching the lectures through the web, you can set the speed to 1. 25x for the youtube player. You might find this helpful if you're having difficulty focusing on the lectures. \n\nI had professional programming experience but only a little bit in C. I found the programming part difficult only as I was becoming acquainted with the problem. After that, the assignments are very straightforward. Projects 1 and 3 are time consuming and will take 20-30 hours of your time. Projects 2 and 4 will only take 3-5 unless you do the extra credit. \n\nJudging by my interactions with other students, if you're going to take this class and are not comfortable programming, you should:\n- Learn how to work inside a VM. Learn how to set up a shared folder between the VM and your host machine in advance if you think you'll need it (you probably don't)\n- Learn enough C. The C programming in this course is not hard, but if you're not comfortable with the language's semantics you'll be overwhelmed on the first assignment. \n- Learn how to work in GCC, GDB, Make and Valgrind. There are plenty of great tutorials out there. \n\nMy only complaint is that the sample exams in Udacity didn't adequately prepare me for the real exams. Other than that, this course is excellent. Professor Ada and the TAs were super responsive. I don't recall ever having to wait more than 20-30 minutes for a response ever. I definitely recommend taking this course.  Projects were not terribly difficult. Built a good knowledge base on OS in this course. Definitely brush up on C skills. I program in C professionally, but many students really seemed to struggle with it. Once you're passed that hurdle the projects get much easier I would think. All in all pretty good course Great course... appropriate breadth and depth for this topic. Instructor is excellent, and the TAs did a good job as well. Like most OS courses, it's based on the \"C\" language so students would be well advised to refresh their existing skills or acquire a solid fundamental familiarity (e. g., syntax, pointers, etc. ) in advance because you will be using them right from the start of the first project assignment. The course will build upon them and explore subjects such as the various forms of IPC, concurrency, etc. The lectures in this course were good - interesting and explanatory without being pedantic, for the most part. The class projects were difficult even for a veteran ex C programmer, so prepare accordingly. I would have liked to have done more smaller projects rather than grind out old C memory allocation issues. Thankfully this semester's TA was an amazingly talented guy! The length of the programming assignments kept me from doing all the reading I would have liked in the OSTEP book. The assigned papers were weak: out-of-date material and just not interesting. The exams were exercises in minutia. Understanding the concepts is not enough. 15 questions for a final that's 30% of the grade? No.  This course was great. I had an uphill battle from the start not knowing C, but was able to learn it on the fly and complete all of the projects. The projects are challenging, but certainly not impossible. The TAs and the rest of the class are very active on Slack and Piazza. You almost always have someone to talk through problems, even very late at night. \n\nI feel like I learned the most from the projects. This is definitely a class where you'll have to dedicate some time to, but if you haven't taken an OS class or it's been a while, this is a great one to go through. Overall: This was my first class in the OMSCS program. Assignments are challenging but overall fun. Lectures are well prepared and easily understood. Had a hard time to understand questions in quizzes and exams, which led to anxiety throughout the semester. \n\nLectures: Very easy to understand and instructive. I learned a lot in this class. Definitely worth all the time you need to put in. \n\nProjects: This course is a lot better if you have a C/C++ background. In particular, you will need to understand how to allocate memory and pointers in general (i. e. pass-by-reference, etc. ). That being said, this class had the most challenging-but-fun projects that I have ever seen. You get to work with Linux at a very low-level. You also get lots of feedback and general help from the TAs so the projects should definitely help you get a good grade. \n\nExams and quizzes: I had a hard time understanding the questions and didn't do well overall. I had a lot of anxiety during the semester because I thought I would fail the class. In the end, I got a good grade so it's definitely doable. This was my first class in the program and I absolutely loved it. Coming into this I was hoping for a solid introduction to OMSCS, computer science, and C and I would say that it was very successful on all fronts. I\u2019ve consolidated my thoughts / tips about the class below based on topic.\n\n#### Projects\n1. The project code always contains a base set of functionality which you enhance. PR1 for example gives you most of the code for a working C program, you just need to cover the business logic (creation/parsing of a GETFILE protocol message). \n2. TA\u2019s always provided the CMakelists file if you prefer to use CLion and that also makes things easier. \n3. _PR1 \u2013 GETFILE PROTOCOL_\n  1. I had very little C experience before this and I was a bit scared coming into the first project. Consequently, I began PR1 as soon as I could and finished about two weeks early. I spent a lot of time in the beginning establishing best practices for how to do things. It forced me to work slowly and do a ton of research on various C aspects, but by PR3-4 I was very confident in my C ability.  \n4. _PR2 \u2013 Extra credit research project_\n  2. I went above and beyond and did the experiments, which was not required. It took me about 4 hours to complete. \n5. _PR3 \u2013 Shared memory-based IPC_\n  1. This one was pretty easy for me. I completed it in about 6 hours total, including both parts.\n6. _PR4 \u2013 RPC_\n  1. This program is basically PR1 and PR3 where RPC abstracts all of the communication. It\u2019s pretty easy, but took me about 12 hours to complete because I stumbed on the MT section. \n\n#### Knowing C\n1. I was completely new to C coming into this and excited to get some exposure. The first project will force you to use strings. Working with strings in C can be challenging. If you're like me and eager to learn new lower level languages, this class is perfect for you. \n2. The other thing that was pretty complicated was the implementation of a thread pool. You don't have to do it like this, but in terms of performance its the best way. Once you get a working thread pool implementation, you can use it for subsequent projects in the class. \n\n####  Tests\n1. Test 1 \u2013 25% of your grade. I found it harder than the second exam. Median was a 76%.\n2. Test 2 \u2013 30% of your grade. IMO, it was easier than the first exam by a long shot. \n\n####\tTAs\n1. Overall, the TAs were highly responsive, but very shame based. I suppose it\u2019s an industry problem. The expectation is that you know the readme very well. Questions about well defined things on the readme or C related questions you can google will get you ridicule. Always try to find the answer on your own before you ask. \n\n####\tTips\n1. Use the study guide to study for the test. It seems obvious but, I studied everything I could get my hands on for the first test and felt like I made it much harder on myself. I found that other students were doing similar things. Since this is an introductory class, there are certain topics in which the rabbit hole goes deep. Make sure that you\u2019re studying the material as it relates to GIOS. \n2. I would strongly recommend using CLion. They make an IDE for every language used in the OMSCS program and its heavily used in the industry. I ended up installing this on my Ubuntu VM and using it from there.\n3. There is a slack for this class and I would recommend it. The TA\u2019s are very responsive. \n4. I would recommend the environment setup they use. I tried doing PR1 on my mac and had all sorts of problems. \n5. For debugging, there are a few tools which will make your life easier. I found these to be most helpful:\n  1. Telnet \u2013 must have for the first part to test your server before you finish the client\n  2. Wireshark \u2013 to confirm whether client or server is breaking\n  3. CLion debugger \u2013 self explanatory\n6. There is always a performance metric component to the test. These are based on the readings assigned during the semester. Know those very well, it\u2019s low hanging fruit on the exam. \n7. Execution flows are a big part of this class. If you don't understand the math, I strongly recommend that you draw out the flow. The questions on the test are usually small enough that you can draw them out to achieve the answer. This is what I did for test 1 and 2 and it worked out well. \n8. At the end of the class, they added a lot of material and I felt like the amount of time required increased per week. Take this into account after the midterm and stay on-top of your lectures. \n9. \tSome of the last readings are unnecessary and very long. The RPC reading, for example, is unnecessary, dense, and 40 pages long. Since it was not present on the study guide, I skipped reading it altogether and it paid off.  First, Professor Gavrilovska organized this course in a very straightforward and thorough way.  I don't think it could be better presented, given the scope of the material.  The class was a good introduction to a lot of OS concepts, and gave a decent survey of more modern concepts that many would consider to be application or domain-specific (e.g. data centers).  The material was lopsided in that the final part of the semester was much more in-depth than the beginning, and hence the final exam had many more pain-points of memorization than the midterm.  The projects were very illustrative of the concepts (I wish we'd had project 2, whatever that was) and didn't fall into the trap of being application-specific.  Strongly recommend C programming background, familiarization with GDB, and (probably) a solid understanding of the Linux filesystem and make paradigm.  As mentioned in other reviews, beware the details on the exams, and try your best to memorize graphs and charts as presented (they ended up being around 15-20% of the grade on the exams and are NOT re-presented as graphics during the exams).\n A good course to start the program with, I enjoyed the class a lot more than I expected. The lectures were good and the projects taught the concepts well. I enjoyed it and learned a lot. I saw many posts recommending familiarity with C prior to starting this course, but I don't think this level of caution is warranted. I think this course could serve as a good introduction to C as well as operating system fundamentals, and it's not that hard to get an A despite not having experience with C. \nMy background - technical undergraduate degree (non-CS, a little programming), web developer for 3 years using higher-level languages, and read 'The C Programming Language' as I was starting the course. \nExperience with the course - this course requires a decent time commitment, both for projects and for keeping up with lectures. Most weeks had 3-4 hours of video for lectures, and I worked steadily on projects every week, making sure I kept up with recommended benchmarks so I didn't fall behind. Not being familiar with C meant that I did a decent amount of googling for basics (and referring back to my book), and I also requested help [moderately] often from the slack channel. However, most of my problems were not strictly due to lack of language familiarity (the homeworks do not demand anything that complicated in terms of C) - more often I was confused about the concepts or made silly mistakes due to lack of confidence. The TA's are extremely helpful and responsive, and other students were helpful too. I believe there was also an introduction to C office hour held at the beginning of the course (but I did not attend). By far the best class I've taken so far. I don't have a CS undergrad but took C programming eons ago. TAs & prof are truly involved and vested in making this a great class. Exams are challenging and projects are like what all the other posters state. TAs on Slack were a huge help getting through the projects. Find yourself an IDE that you like. Extra credit opportunities. This class is one where you get out what you put in. I learned a ton and it was a really rewarding class. Definitely recommend! And definitely participate in their Slack channel! Lectures: Good quality, and most of the readings were summarized to some degree during lecture, which helped to get through some of the dense parts of the assigned readings. \n\nProjects: 4 projects (10% overall grade each). Project 1 and 3 took a lot of time. Project 2 was mostly analytical, no programming. Project 4 was a shorter project since we were at the end of the semester. You could do optional extra credit for projects 3 and 4. This extra credit added a lot of time and since I was in another class I didn't make much of an attempt at it. \n\nExams: midterm (25% overall grade) and final (30%). Exams were multiple choice/fill in the blank/short answer kind of questions. Exam averages were around 75%. \n\nI took CSE6220 in Fall 2015 (previous semester) and this class is a bit easier and a bit less time intensive. \nI took CS6300 with this course and it was a doable double (A in both courses) but I didn't get to read as much of the book as I wanted. I bought the book \"Modern Operating Systems\" (by Tanenbaum and Bos) for this course and I found it to be a good book. I don't think a book is necessary to succeed in this course, but it was nice to have a solid reference when I needed things explained another way.  Great course! I'm not sure I'd recommend it to someone with no C background, but if you do have it - go for it! This course was FANTASTIC. Recommended to anyone. You will need to get familiar with C for the projects and overall understanding. \n\nProjects were great. I honestly thought they were amazing experience into the world of multithreaded programming and really getting a good handle on C, and they complimented the lectures really well. I have never really wanted to hang out for a weekend, drink a beer, and do a homework project until this course. They will take some time though, so allocate time accordingly.\n\nTests were tough, but fair. Make sure you read the papers and the lectures, and study hard.  **My background**  \nHave used C language for numerical analysis for years  \nDon't have any degree related to computer science  \nTook this class for the first course\n\n**Review**  \nThis class uses C to program server-client file transfer concepts. There are 3 projects, beginning from simple *echo*ing server to a server that does some sophisticated jobs like receives a file from a client, do requested work, and send back the result to the client where both server and client are multithreaded. If you are not familiar with these programming concepts, it will take time to understand and do the first project even if you have used C for different applications.\n\nAs this class declares itself as *intro*, the lecture covers pretty wide range of topics. Watching 1 Udacity lecture video took me about 3 to 4 hours. There are 4 to 6 lectures per part and there are total 4 parts, you can calculate how much time you have to pay for watching Udacity videos. I recommend you to keep notes for every video otherwise you will not find relevant materials when preparing for the exams. I kept notes with MS Word and I spent about 4 pages per lecture.\n\nThe workload I specified (==10hr/week) is the peak load when there is a project. I spent average 2 hours a day for a whole week to complete the project before the due date. If you are smart and can find an easy way to implement the problem, then it should be shorter. If you are going in the wrong direction, you will spend the whole week for debugging. When there is no project due, I recommend spending some time to follow the Udacity videos. It is quite long.\n\nThe instructor gracefully provides an expected question set for each exam. It is a shared google doc and students are encouraged to collaboratively fill the form. You can see other students' answers so you will find it very useful. There are two exams, midterm and final. And the final is **not** cumulative.\n\nThe instructor also encourages you to read provided literature. She actually covers what the provided literature is doing, and it will be also on the exams. But those technical papers are hard to read and also not very fun to read, honestly. This is an introductory course to the fundamental OS concepts, a good review of all relevant OS topics. The last section of the course covers a few topics about distributed systems: file system; distributed memory; datacenter technologies, which are becoming more popular in the growing cloud computing field. In my opinion, it is a must-take course for students in CS background who need some refreshment for their undergrad OS class. OS knowledge is a core background requirement for almost all CS programs. \n\nFor the projects: there are 4 projects in total and 3 of them are coding projects. The projects are in C and some familiarity of C is required. I already have C background but the challenge is to complete the projects and pass the Udacity online grading. The online grading can be tricky sometimes because the online grader sometimes does not give you sufficient failure information, besides it is usually more rigorous than your local test run on VM. Many times, you need to insert fprint to just debug. That always takes a lot of time. The piazza forum is always very active and helpful. I would not be surprised if someone has to spend 40-50 hours on one particular coding project. The tip is to start early so you can spread the whole work into 2 or 3 weeks instead of trying to finish it during last weekend. My impression from Piazza is that people who do well in the projects tend to start very early and engage the discussion very early. \n\nFor the exams, it is closed book closed notes exam. You need to study the videos and read the materials. It is not very difficult, but you do need to spend some time studying them since there are a lot of concepts and details there. \n\nOverall, it is a very good class. It can be frustrating in the beginning, but if you stick to it and go through the whole semester, you will probably learn a lot.  Overall, the class covered a lot of content and the instructor (Ada) and TAs did an excellent job working with the students to learn the content. For me, it was a great refresher in both OS concepts and C programming. The class does take quite a bit of time; the lectures are long and the projects are involved. \n\nThe curve on this class (at least when I took it) was quite generous. For those who are concerned about the amount of time the class consumes, those times are mostly based on students satisfying all project requirements, studying to do well on the exams, and completing the extra credit. If the curve is consistent from semester to semester, you can probably cut quite a few corners and still get an 'A'; if you are only shooting for a 'B' you can do even less (do so at your own risk!). \n\nNote: The structure of this class is learn about an abstract OS concept and then develop an application that uses that linux implementation of that OS concept. For example: learn about threading -> implement a program that uses linux pthreads. This is not a class where you have to implement the OS construct (I think that is reserved for AOS). Great class, took it my first semester in. The class for the most part is very well ran. The lectures are great, and the TAs are very active and helpful. An example of how well the class ran is that It took me less then thirty minutes to get the development environment up and running. Having Bonnie pretty much grade everything is also amazing. The TAs are basically grading that you followed the guidelines more so then actually pass/fail the projects.\n\nThe lecture material was good a lot of subjects that were covered was not covered in my undergrad OS class. They were very well organized. Sometimes I feel as the quiz math is a little hand wavy but I think that's more of the approach on watching the lectures then the quality of the lectures.\n\nThe projects itself can be difficult. There are about about a month in between projects, Slack/Piazza are very helpful even if the TAs are not around. As everyone says start on the projects early, I program only in C at work, and it's also this flavor of programming style and I had some issues, I can see how other students can spend lots of time on the projects.\n\nThe exams are very hard, and in our semester there has been some mishaps with the questions, and even some answer choices.\n\nOverall though the class is great and is very well curved. In my mind it's almost impossible to make anything lower then a B. Ada is wonderful. You will want to be good with C programming to do well on the projects, and you should be okay as long as you have that. Linux experience is good too. I took this class my first semester in the program, alongside networks (6250). I almost feel like I shouldn't review this -- I didn't take advantage of the resources it offered. The instructor and TAs all seemed great and response time to questions and concerns was near immediate. But I acted like they didn't exist except the few times I had a specific question, and I suspect my learning suffered for it. \n\nThe lectures comprise the bulk of the learning material, along with journal articles assigned for most lectures. Most of those aren't too difficult, skewing towards older and easier to digest articles. Ada's a great lecturer and I have few complaints about the quality of the lessons. The recurring \"toyshop\" metaphor felt like a gimmick and wasn't particularly edifying, however. Some of the topics chosen were a little mysterious -- it's unclear to me how remote procedure calls, for example, are a good topic for an OS fundamentals class. \n\nYou'll spend most of your time on the projects. If you know any C at all they shouldn't be too difficult... though through a combination of poor planning and lapses in intelligence I couldn't figure out the synchronization necessary for Project 3 and received an extremely low score. Avoid my mistakes and start early. Each of those projects should be an easy A, if you're careful with your time and ask for help. \n\nThe tests, on the other hand... There are two and they jointly account for 55% of the grade. They are also pretty tricky IMO, so take 'em seriously. Also make sure you understand and can work out the problems from the lecture quizzes that need to be done by hand, some of those will surely come up. \n\nAll told I'm glad I took the class. I'll likely get a B, but if I'd applied myself a little better an A would have been achievable. More importantly, I've grasped the fundamentals well enough to have a base for continued learning. Edit: ended up with an A. My course grade was ~81, to give some idea of curve generosity. Context: I have no CS degree, but some previous classes with C++. This was my 1st OMSCS course. \n\nI feel that this course is a great introduction to the program. It is well designed and executed, touching on a variety of very fundamental CS concepts that are relevant to many other courses in the program. The instructors and TAs were readily available and concerned with students learning the material and being able to make it through. The lectures and papers covered a lot of material, particularly after the midterm, so it pays to stick to the schedule even when there are no firm deadlines. Two of the four projects (1st and 3rd) can be quite time-consuming, particularly if you aren't strong in C. I found the grading to be fairly lenient on the assignments. About 2/3 of the material happens after the midterm, making the final challenging. There were several extra credit opportunities, and the instructor indicated that there would be a fairly healthy curve on the final grades, so there is room to make mistakes and still get an A. \n\nThe one weak spot of the course, in my mind, was the second project, which seems to have evolved over time, but is still hanging onto an accompanying Udacity sandbox that is irrelevant, at best, or misleading, at worst. The grading for this one also struck me as strange. I see the point(s) that the project was trying to convey, but think that it could be accomplished better in a different format. I took this as a first course and was a little overwhelmed by the workload. The lectures are good, but the projects (especially project 1) can feel a little irrelevant to what's being covered in the lectures. My advice is to start the projects as soon as possible. Most of the learning comes from projects and preparation for the quizzes (midterm + final). I enjoyed the class! The course was well structured, and the professor explained things well. In the end, the grade was curved by a few points: I think an A grade was curved by 4 points but I don't exactly remember. Great way to start OMSCS! This was my first course in the program and I really liked it! \nYou will learn about foundations in Operating Systems, some abstractions and work hard on programming assignments! \nTo me the best part was actually the programming projects, where you will learn how to code in C using a Linux VM. I've never worked with C professionally, just a few semesters on my undergrad. As a professional Java developer working for quite time, I found the projects hard but really interesting to do. If you are a developer you will find your way. It took me the first project me to adapt to the \"C\" style. Used and abused of logs in my code. Never used a debugger in this class... \nProjects 1, 3 and 4 are about writing some programs in C. 2 Is about a performance evaluation. \nProfessor Ada and TA as awesome! They are there to make you succeed! So if you work hard you will get there... \nA few things to improve:\n - Project 2 descriptions are ambiguous. Although its meant to be straightforward, the way the questions / possible answers are written were confusing. \n- I found exams to be overvalued. 55% for 2 exams are too much compared to the project's workload. \nOverall I learned a lot enough to improve my developer experience. Totally recommended. Projects are interesting but not very difficult.. Exams are tricky.. This class (my first) has helped me grow as a programmer more than any other class I have taken. The programming assignments most certainly took me out of my comfort zone in this class. I did not have very much C experience before taking this class but would have done a lot better if I knew what I was doing in the beginning. The material is challenging but not impossible and the topics are very relevant and up to date. If you are planning on taking this class I would strongly recommend brushing up on your C skills. Super active Piazza participation.  This class is a decent way to start your OMSCS career. It is a good refresher course that will dive into topics like mutexes, semaphores, shared memory concepts and other IPCs. The projects were interesting and the use of automatic testing helped make sure all requirements of the project were met. The only disappointment I had was Project 2 was a take home quiz that I would have preferred the original project that others took in the past. Overall, I highly recommend this class as Ada and the other TA's were awesome and the lectures were fairly engaging and easy to follow along. This was my first OMSCS class, and I really enjoyed it. I have a lot of experience with C/C++ and Windows internals. Overall, IOS was a great class for learning more about Linux OS internals, developing against a Linux VM, and getting familiar with the whole OMSCS process. I\u2019ve been out of school since 1995, so this was a nice way to ease back into academics. \n\nThe course grade was 25% midterm, 30% final, 40% projects, and 5% Piazza participation. The midterm covers the first 3/8th of the lectures, and the final covers the last 5/8th. Both tests used lots of multiple choice questions with multiple correct answers to be selected. Overall, the tests were tough but fair. I really liked the coding projects (P1, P3, P4), and project 2 was an interesting experiment. Dr. Ada and the TAs were great overall, and the autograders for the coding projects were very good. \n\nOver the 16 weeks of the course I spent the following hours per week: 16, 27, 19, 5, 9, 14, 12, 11, 28, 11, 14, 7, 16, 0, 17, 12. That\u2019s 218 hours, averaging 13. 6 hr/wk. I stayed ahead, read all the referenced papers (14), and did some additional research. The weeks where I put in 27 and 28 hours were when projects 1 and 3 were first assigned. \n\nI\u2019m only taking one OMSCS course at a time due to family and work commitments, and this was a great first course. I got an A without the curve. My only complaint was that we didn\u2019t get grades for projects 3 and 4 until after the final was over. So, for most of the course, you have to guess how you\u2019re doing based on whether your projects passed all the autograder tests. But when you\u2019re only paying $500 for a course, you have to give up something, which in this case was quick grading feedback from TAs who are also GT students.", 
    "CS-6210": " This is a wonderful course with very good content. Projects are very time consuming. Check out the videos on Udacity before signing up. I did not get a chance to go through the papers completely and relied on video lectures for most parts.  Survey course so material was more broad than deep.\n\nFirst half, up to midterm, is spent going over the design of older operating systems.  Second half on a variety of algorithms and \"libraries\" that served OS functionality (barriers, GMS, LVRM, things like that).\n\nFour projects.  The amount of time you spend on projects will directly correlate with your knowledge and comfort level in C/C++.  Other than the first project your algorithms/design approach will essentially be handed to you, and the point is to either implement the logic or learn a framework.\n\nWhile you can skate by not reading the papers, this will end up hurting you in the end.  Some of the complexities of the material is glossed over in the lectures only to be exposed in the readings.  Though if you correlate the \"hot topics\" of previous midterms/finals with the papers, you'll get a good idea of what papers are more important than others.\n\nOverall this is a difficult class but certainly doable.  It's reputation of being a \"weeding out\" class is fair.  The expectations of students is also fair.  If you are prepared to spend time studying, doing the projects, doing the readings, and otherwise engaging with the material you'll do fine. I won't be exaggerating if I say this will be one of the most challenging courses you'll face in the program. I didn't know what I was getting into until the classes started, but quickly I realized this was going to be tough. \n\nThere's more material in this course that what you can cover without going nuts. The lessons are long and complicated, and each one comes with a bunch of scientific papers that you need to read and understand. I found the material fascinating but reading and learning the content of the papers will probably take some getting used to. \n\nThere are two exams in this class. Both are closed notes and for each one you have to understand a ton of content. The questions are not limited to single or multiple-choice which make the exams even more complicated. My class did very poorly on both exams, and we had to wait for a generous curve to pull our grades up. \n\nI scored 57 out of 100 on the first exam and an incredible 75 in the second. These, together with solid grades on all the projects, gave me all I needed to finish with an A. Participation in the class was also a big factor, so I recommend you make yourself visible as much as you can. \n\nBy the way, be ready to code a lot. The projects were amazingly interesting and complicated, and we had to code like crazy to finish them. Any previous knowledge of C will certainly help you out here, but I although my C was very rusty, I was able to pull through after some long nights. \n\nNot everyone was lucky on these projects, and a big portion of the class wasn't able to even find the solution to some of them. I'd recommend starting as soon as you get access to the project description because you'll need every minute you can get. \n\nOn this course you don't work on teams, so your success or failure is entirely on you. That being said, make sure you collaborate with everyone else in the class. That was one of the reasons I was able to finish all the projects and end up with an excellent grade. A lot of reading, and very long lectures. The material is not that difficult, however, there is a lot of it, so expect to cram and dump for the two exams. I do not think reading the papers is that necessary, but recommended if you have the time. The projects were ok, but the requirements were sketchy and there were no tests at all. When you turn one in you have no idea how good it will perform. The projects for Fall were: VM scheduling/balancing, Barrier Implementations, GRPC/Threadpool, and Map-Reduce. All the negativity assigned, the professor is very knowledgable, helpful and the production value of the lectures were great. The professor even attended office hours. Very interesting topics. Very interesting programming assignments. Tons of reading.  Tough course, the materials are very dense and cover a lot of topics. The topics mostly come from papers published 20-30 years ago but are still relevant (some are the foundations) of modern operating systems. \n\nProjects are interesting but require solid foundation in C/C++. You wouldn't want to spend time familiarising with C/C++ while the projects itself require significant time from design to implementation to testing. Plan to spend at least 30 hours to finish each of the project. At least one project requires you to start from scratch without any template. The good news is grading is quite lenient and often TAs forgive small mistakes or inaccuracy as long as the codes reflect your understanding of the materials. \n\nPiazza is moderately active, questions about course materials are usually answered during office hours. Prof Ramachandran is a very passionate teacher and he monitors closely the class in Piazza. \n\nThe video lectures explain most of the concepts very well, however there are a lot of details not mentioned in the lecture slides. My advice is to print the lecture slides and take notes on the details from Professor's speech. These notes will be very useful in the exam preparation. \n\nThere are tons of papers to read, most of them are the details behind the course materials while some are supplementary. I wish I had more time to spend time reading those papers, as throughout the semester I only managed to read ~30% of them. However if you watch the lectures, you should be able to do ok in exams. \n\nExams are, as others have stated, brutal. The midterm average was 58. The exams require good understanding of the course materials plus *very* good memorisation. Some questions from past exams reappear so don't forget to review them. \n\nThe grade is curved hence the grade will be relative to others'. Overall I enjoy this class and I recommend this class if you like low level stuffs and ready to spend at least 15 hours a week. Material was very broad and somewhat high level, focussing more on 'recent' OS developments and concepts, rather than focussing on lower level implementation details (more low level kernel info would have been awesome, but I do appreciate that at that point you are getting into specifics rather than concepts). The course itself was very hard and was certainly a challenge to do on it's own with a full time job. The exams are pretty hard and require you to go beyond the lectures and read the assigned papers fully to be able to interpret details.  Writing this mid semester to help others with registration decisions. \n\nYou need Linux running on your own metal for this course. \n\nYou need serious C chops. \n\nYou need passable C++. \n\nDo not count on any compute resources (VMs or GT cluster credentials) being provided. \n\nIf these things sound new to you, get them ready before the semester starts, and start every project early to get past logisitical and environmental challenges. \n\nGreat content if you make it past those undocumented hurdles. Excellent course if you like learning system internals. You will learn a lot if you follow lectures and read 25% of the papers. If you read more you will gain even more insights. Professor and TAs were great. Programming assignments took their fair share of time but if you know C then you should be able to get them completed. Plan to spend good 20 to 30 hours on each assignment. Exams take time to prepare. Overall I liked this class and recommend it highly to those who have time. \n\nPS: Don't mix it up with another course in the same semester if you are working and have a family. Good luck! This was my first course in the OMS CS program.  I only took one course this semester, and I am thankful that I did.  This course was very intense, and very interesting.  All projects were done using C and C++.  I suggest a good working knowledge of C/C++ or it will require a lot of extra effort for projects that are difficult in themselves.  The lectures are very well done, and very informative.  There is a lot of information and a lot of fine detail in the lectures.  On top of the long project assignments, there are 15-20 papers that are required readings.  A close to average Midterm score can be achieved without reading the papers, but just read the papers.  The exams themselves are entirely essay based, 25-30 questions, and are quite difficult. The course requires a lot of work, but I am happy to have taken it. I decided to jump into this program with both feet, taking 6210 and 6290 in my first semester. AOS was very difficult because of the breadth of the material. But I got a tip early that the sample midterms and final are the best resource for studying. I literally memorized the answers from the sample finals and managed to get an 84 on the final (after a 59 on the midterm). With good project performances, I still squeaked out an A in the class. In-depth C++ knowledge is really crucial in this class, because the projects required complete design, implementation, and testing, not just modifications or debugging to existing code. As mentioned by other reviewers, this class is broad. It focuses more on distributed systems and the contributions of theoretical operating systems than the details of current, commercial operating systems. The test questions are very similar to previous years' questions. I made quick passes through the lectures, memorized the three or four previous classes' tests, and got a B on both the midterm and the final: that was above average for this class. Course grades are curved or scaled after all of the test and project grades are in.\n\nThe part of this class that I really enjoyed was the projects. I've got a moderate amount of C/C++ experience: three or four classes in recent history plus some self-study. These really stretched my skills and helped me improve my ability with these languages. The final project (MapReduce) took me about twice as long as the first project. I was able to finish the first project with about two days of solid work (8-10 hours per day) and the final project with about four days. Your experience will vary.\n\nThere's one hint I wanted to add that I didn't see below: guess on the tests. If you're not sure of the answer, then make inferences from the question, flesh out an answer from whatever dim memory you've got of the subject, etc. I did so, and was rewarded. -It is a tough course. Requires on average 20 hrs per week and could easily reach 30 during projects. \n-Requires a good knowledge of C. Make sure to freshen your C skills before project 1. lynda. gatech. edu/ has some good beginner courses. Do check them. \n-Projects are released early and you have around 2 weeks to complete them. Always start them early and keep a close eye on piazza. A lot of good tips will be coming from your peers. \n-You need to keep some notes/summaries from lectures. Otherwise you will quickly get overwhelmed by the range of topics covered. Bhavin Thaker has created some awesome notes but covers topics form second half of course. Do check them https://www. researchgate. net/publication/299535414\n-For mid and final exam, start early and keep a day or two only to read past papers and their solutions. Some of the questions/topics will be repeating in past papers and you need to focus on them.  Difficult class (especially if you have a demanding job as well) but well worth taking if you want to understand the low level details of operating systems. There is a lot of content so making sure that you actually stay current with the class is very important (this is not a class you want to push off work). Learning how to read academic white papers is key to passing this class. Figure out which papers are heavily emphasized and concentrate on really understanding those papers. Make sure you have a strong C background or take the time before taking this class to really learn C. C++11 is required for the last 2 projects but I was able to finish those projects without any problems with just my C background. Make sure to start the projects as early as you can as that is key to making sure you have enough to complete the projects and address the edge cases. I took IOS in Spring 2015, AOS in Fall 2015. IOS was a good basis when you're not already familiar with C and systems programming. \nEvery lecture walks students through a single paper, explaining the concepts and adding historical, academical context. The selection of papers is very good, it's a journey through landmark ideas in systems research. Reading all the papers was impossible for me with a day job and hobbies. I resorted to reading the abstract and summaries (provided by peres as part of course requirements) for about three quarters of the material. \nThe grading of projects and exams seems fair and forgiving. \nThe projects are tough and require recognizing challenges and coming up with your own designs for them. Also you have to write your own test code, which can be a substantial part of the project. It is always recommended to start working on the project 2-3 weeks in advance to be able to ask questions on Piazza and also just to sleep over it and find solutions to problems. They are definitely not \"just doing the exercise\". \nThe course requires a bit of investment, but offers tremendous learning opportunity. I was also constantly drifting off into the subjects covered while browsing through Wikipedia, research papers and technical manuals.  Demanding yet rewarding at the same time. The curve at the end got me an A. Fourth class in the program (previously taken IOS, SDP, IIS). I agree with the general consensus of the reviews already posted here. The projects are difficult (would be extremely difficult if your C/C++ background is very limited). Tons of papers to read. The exams are also difficult, though previous exam solutions are extremely helpful. Exam questions don't seem to strictly repeat, but tend to cover the same concepts.\n\nThe workload isn't extreme. I had some experience in C/C++ and most of the projects took 20-30 hours, with the exception of project 4, which is a huge project and took me well over 40 hours. I generally spent 6ish hours on papers and lectures per week.\n\nOverall, the class is informative, well-run, and the projects are useful and interesting. I enjoyed the class very much and wouldn't hesitate to recommend to anyone. Great course, but very difficult and time consuming if you want to learn everything in this class. \n\nMidterms and final are difficult, but end of course is curved fairly significantly. Project 4 will take you a long time, half of the projects in C, half in C++. Worth reading and learning a bit of C++ if you have only worked in C, like me.\n\nOne of my favorite if not my favorite course so far. A time consuming yet intriguing and relevant course for distributed applications; not for C and C++ beginners. Coming into the course, I had only undergraduate CS experience with C and C++ and I was able to complete the assignments. However individuals with no C or C++ background would have to spend even more time debugging and learning C++ pointers, structs, and templates. Also take notes as you go, there are many in depth lectures and reading assignments to cover; more than average.   This was my first course in OMSCS, and although this class is known to be difficult, I found it to be very valuable and enjoyed Prof Kishore's enthusiasm. I had very little experience coding in C++, and I had never coded in C before. The first two projects were in C, while the last two projects were in C++. I put it in a lot of hours into this class, trying to learn C/C++ as well as trying to succeed on the projects. Because of the extra effort, I did really well on the projects.<br>\nMy favorite projects were Project 2 (C) and Project 4 (C++). For Project 2, we had to use the libvirt API to create a CPU scheduler and memory coordinator to manage virtual machines with varying resource usage. For Project 4, we had to create an implementation of the MapReduce using gRPC - this was the biggest project in the class and was also the final one. They gave us 4 weeks instead of 2 weeks to finish it, and I think I spent 3 weeks total on the project.<br>\nI found the exams to be difficult because you basically had to memorize a lot of information. This class covered several different operating systems and algorithms that were developed decades ago. Old midterms and finals were already on T-Square, so if you had to time to go through all of the old tests and skim through the research papers, then you would do fine on the tests. I definitely preferred the projects over the exams though.<br>\nThe class is curved at the end though, so as long as you start on the projects early and score really high on them, and not completely bomb the tests, you can get an A in the class. This course was easily the most difficult course I've ever taken, but it's well worth it. Prepare to read a ton of papers, code some awesome projects, listen to brilliant lectures, and learn an absolute ton. I had been writing file systems for about 4 years prior to taking this course and I learned a crazy amount. \n\nHighly suggest this course, but be prepared to work. This is was my first course in the program and it was a pretty rewarding in terms of what I learnt and how I performed. Though it requires a good amount of work to be done for projects and assigned readings. In fact I am glad I did not pair it with any other course.\n\nThe course covers the OS principles, its history and its relevance today. It\u2019s pretty interesting to know how latest technologies of virtualization and cloud have its basis on principles from the 80s and 90s. The videos explain the topics well and have assigned papers for further readings. I must have only managed ~30-40% of those (some 40+ papers are provided at the start of the course.) The midterm and final questions are not MCQs and require some memorization as answers are to be given in bullet points/essay form. However the previous year papers and solutions are quite helpful in understanding the pattern. From lectures and previous year papers one tends to figure out which research papers are more important from exam point of view, though others are equally important from a learning perspective. Midterm and finals are 42% of the total grade. Grades are based on a curve. \n\nThere are 4 projects to be done and they require good C/C++ skills (C for projects 1, 2 and C++11 for projects 3, 4). Even with knowing C++ for last 9 years, the projects were not easy. Project1 was quite difficult, with many test cases to cover and Project4 required writing a lot of boilerplate code(~40 hrs of work, 1000+ lines of code). However all the projects were interesting and offered something new to learn.\n\nProf. Kishore is a great instructor who teaches very passionately and the lectures explain the topics very well. Office hours happen once every week. I could not attend any live but videos are recorded and shared for later viewing. The TAs are also pretty responsive and helpful, I was pretty surprised that they accepted my request to reassess my midterm solution.\n\nOverall it\u2019s a great course with lots to learn (you would not be writing your own OS here if that's what you are expecting but you will learn a lot about OS principles, virtualization, distributed systems etc.)\nAdvise to anyone who is interested in taking this course - be prepared to work hard, DONOT start the projects late, brush-up on C/C++ skills if you are not using it on daily basis, it would not be easy learning it on the go. And try to follow the schedule provided for watching videos, I missed the schedule after the midterm exam as I was employed more than full-time at work and I had to slog a lot towards the end.\n The material was very interesting, and I definitely learned a lot, but some of the test questions seemed like they required more memorization of facts from the lectures than application of concepts. This course was very informative, but required a lot of work on the projects and especially on the assigned readings.\n\nThis course covered a lot of OS principles, both historically and relevant to today's environment. It was interesting to learn of many concepts that were \"ahead of their time\" and just now coming into mainstream given cloud and data center technologies.  \n\nThe projects were slightly harder than average difficulty and required good knowledge of C++ (in particular C++ 11). Coming from a C++/embedded background this was not too difficult, but given some of the Piazza posts many had problems in this area.  Most projects had \"multi-threaded\" attributes, so a good understanding of threads is a good thing to know coming into the class.  Nonetheless, all the projects had a high \"learning value\", introducing us to several technologies I haven't been exposed to (but expect to put into practice).\n\nThe assigned readings were also voluminous, with many of them supporting the lectures. Plan to spend countless hours reading these papers. Several details of the papers were asked on the midterm and/or final exams, so this is not an optional component of the class. Most of the papers were actually quite informative, though some went into a lot of details and performance evaluations, which could've been summarized in just a few sentences (I mostly just skimmed these sections and got the necessary information our of the summary).\n\nBy far, the most challenging aspect of the course were the midterm and final exams, which together comprised 42% of the overall grade. These tests were quite simply \"hard\". The tests did not exactly focus on the facts learned during the course, but instead on whether the student understood the concepts/facts and could make additional deductions on those facts.  The exams, while still performed in Verificent/Proctortrack were all essay type questions. Even the True/False questions required an explanation in order to get credit.  The exams were definitely comprehensive over the material.\n\nThe lectures were actually quite good. The professor took the time to convey key concepts, including examples and details. Of course, his lectures were primarily an overview with examples of the assigned readings. The TAs were quite helpful and responsive on Piazza.\n\nPerhaps the only negative (I consider the \"difficulty of the course a positive) was that the projects took a long time to be graded.  At midterm (i.e., time to withdraw), only about 30% of the grades had been posted.  This may have been caused by significant events during the early part of the semester (Hurricane Irma, Harvey and Katia) that impacted a lot of students (and in the case of Irma the Atlanta campus).  A special 1 time \"late forgiveness\" policy was however, introduced to accommodate those impacted by these storms.  I was a little disappointed in that the course did not go into more \"kernel level\"  OS details, but stayed a little higher level detailing how OS support newer technologies such as security, data centers and distributed computing systems, which seems to be more of the trend.\n\nI would definitely recommend this class to anyone interested in distributed systems. Don't be misled into believing that the course is just an advanced undergraduate OS type course. You'll learn a lot in this course, but you'll also work hard to do well and be glad you took it (after it's over).  As others have noted, there is a ton of (very dense) reading material and the projects will take a good amount of work and effort. This was my first course of the program. While it was very time consuming and challenging at times, I'm quite happy with what I gained from the course and how I performed.\n\nSome notes for students looking / about to take this course:\n\n* Give yourself plenty of time for the project work. They can be time consuming, especially the latter projects. Especially if you're not familiar or comfortable working in C and a Linux (or unix-like) environment. A lot of other students seemed to struggle with the basics of settings up the environments needed to complete the projects.\n* For midterm and final definitely use previous midterms/finals as study material. Most of the questions are derivatives of previous years, or sometimes the same just worded slightly differently.\n* Read the papers! Read over every paper at least once to help gain insight into the topics discussed in the lecture videos.  And read the papers before the lecture videos.\n* Final course grade is curved. Everyone seemed to do mediocre or not-great on the final and midterm exams, but doing well on the projects and completing the rest of the assignments will help ensure a good grade out of the course.", 
    "CS-6250": " Took this class as a first semester class alongside IOS. I was not sure what to expect, but I ended up loving this course. The professor (Konte) was around for a couple of Piazza posts, answered a few questions about the exams, did two very awkward office hours, and that was about it. The head TA, Stacia, ran this course like a tight ship and really made it worthwhile. The other TAs were helpful and responsive as well. Communication was frequent and regular.  I found the content itself interesting, having familiarity only with the basics of TCP and a high-level understanding of internet architecture. I think I would have been fine without any prior knowledge of computer networks. The first few projects are designed like coding challenges in Python. They were challenging and I really enjoyed them, but they seemed to be a headache for people not familiar with Python or OO programming who took to Piazza to vent regularly.  The later projects were less time intensive and more about performing a set of trivial tasks and then analyzing the results against what was presented in the class. Some people got lost in the trees on these, more Piazza venting. I think I was lucky this semester in that there were a few very helpful and responsive students in the class who offered guidance on a lot of the class topics by their ability to summarize and explain the material on Piazza.  I liked the lectures and I like the content of the projects. I'm concerned how the class would be without the head TA that was present for this semester, I feel like there was no contact or communication with the professor. This is my first OMSCS course I've taken so maybe that is the nature of it.\n\n This course was one of my first OMSCS courses, so wasn't sure what to expect, but the course exceeded expectations. This course definitely covered a lot of areas of networks, at times almost too many topics. I also felt the Udacity lectures covered so much so fast. I often had to repeat each \"lesson\" 2-3 times to really capture and/or understand some of the concepts. \n\nThe tests (only 3 of them) were a little more difficult than I thought, but were fair and covered the material well. A lot of the test covered the outside readings and/or projects... definitely testing your understanding of the subject matter instead of just the facts of it. \n\nThere were a lot of projects (8+) in this course, and usually before you finished one, the next one was already out and time ticking on it. One or two of the projects were problematic (computer/VM wise) and were stressful to accomplish. I didn't mind putting in time to learn the material, but fighting with the tools was not productive time spent. I had a few commitments at work during this time which made it even more stressful. However, each of the projects were insightful and worthwhile, though a couple that evaluated certain protocol performance were not as exciting, but learned a great deal anyway. \n\nThe TAs (and Maria) were pretty responsive on Piazza, and held weekly office hours. \n\nFor me (after 25yrs) since BS degree, it was interesting to see how networking has changed and what was good then is being re-evaluated. Many of the concepts I've already put in motion on my company's projects and seeing some good results. Definitely a good class worth taking. I already had extensive experience with networks, so, the course was more an update on some concepts, like iBGP, etc. Seems is more difficult now than in previous offerings 2 years ago, for the better. \n\nTA's and instructor were very accessible also during Core Hours, although quite strict on Piazza about not sharing ANY code, not even a sample of a Python API call... they expect the students to work it out themselves. \n\nProjects in Python were easy if you had some programming experience, but I saw a lot of people suffer, for example, a web client (no Python libraries other than socket connections) was difficult for many... I deal with web applications, REST debugging clients, headers et all on a daily basis, but for many was the first peek at HTTP browser messages. \n\nOn another project, a Piazza \"clarification\" caused some confusion and misunderstanding, some folks duplicated the number of \"rules\": this was NOT necessary, made no practical sense, and the grader software *had* to be changed to accommodate those verbose submissions :-(\n\nIs a good review course, but be prepared to work hard, if you lack experience with networks and networking software. I loved this class. It's challenging and you learn a ton, but it's not frustrating the way some other classes can be. The lectures were fabulous and the projects did a great job teaching me Mininet and helping me get my Python skills up to par. Overall, a great first class for someone who has been out of college for a while.  On 2016 Spring Semester, we had \n+ 6 Projects (all python - very Easy) - 10% each\n+ 2 Tests (closed book - very Hard) - 20% each\n\nOnly 45% of the class got A's (90 and above), B was from 76 and above, so you can study hard and get a A or you can easily end up with a B on this course. \n\nSince it was a large class, there are a lot of people active on Piazza. Piazza posts helps a lot on doing the Projects. \nWe got 4 Homework (not graded) to prepare us for the Test. \nYou should be ready to read lengthy Research Papers for the Tests as well.  The lectures and projects were great. The readings were a mixed bag, some very interesting and some incredibly dry and/or densely academic. I learned a lot, and enjoyed the class overall. \n\nThe tests were pretty rough though. I got a high A on every project, but struggled to make two C's and a B on the tests even when studying a lot. The tests felt a little bit luck-based -- did you happen to remember one sentence from one of the dozen research papers you read? If yes, it was easy. If not, then impossible to guess. I don't think the tests did a good job judging whether you'd learned the big picture or even the majority of individual topics discussed, rather they seemed mostly a sample of minutiae from the papers which you may or may not remember. \n\nOne big warning, I think they've revamped this course in the last semester or two, because it was fairly challenging (especially the tests) and took a decent amount of time each week. There's some kind of project or test almost every single week, so you really don't get much of a break. \n\nPast reviews indicated this class was easy. I don't think that's true anymore. I'd say this class is relatively *tractable* in the sense that if you can put in the time to memorize all the papers you read, and put in enough time on the individual projects, you have a very good chance of earning an A. Just be warned that if you DON'T have enough time, you can easily bomb. My first course and had purposefully chosen an 'easy' one. There were 6 projects with 60% weight and 2 tests with 40% weight. Projects were not tough if you know basic python and keep track of comments on Piazza. Tests need preparation and working through the lectures/homeworks. All in all no surprises and rewards you with A if you are working regularly.  I took this as my second course for the foundational requirements. You need to spend time on the projects as they are not straightforward. Read all the papers they ask you to read this is needed for the projects and exam! It was really a great course. I learned TCP concepts to the depth . Very practical oriented class. TAs were good. Lectures were good. Course content was really good. Lots of reading on research papers. I had to memorize a lot for the term end exams. Best part of this course was SDN. I loved it. Few projects in the beginning were real tough ones. I almost did not sleep for a week. As I made progress and attended office hours, I could complete them. I got deeper knowledge on TCP/IP and , data center operations, network topologies,  subnet masking, Router configuration, security aspects etc. Overall, I liked the course.   I don't want to say this was an easy course because it was my first one and I have nothing to compare, having said that I got an A. The three tests were multiple choice and T or F. The projects were not too complicated; they required some planning first. The projects are coded in Python using a provided VM with all the tools included. The extra credit included participation and a second part in the last project that was totally doable. I recommend it as a first course. The videos were not that bad, and you'll have to read 10 to 14 papers in total to be able to do the projects and for the tests. I learned a lot in this class despite it being fairly easy.  There were 8 projects and 3 tests total.  I'll expand on this review later... For the life of me, I cannot fathom why anyone would give this course a positive review. Perhaps they don't know what they are missing. Prior to this, I took 6220, 6290, and 8803-08 (HPC, HPCA, and Compilers) and found them all to be engaging and enjoyable. They were tough at times, but I felt it was time well spent. I learned a lot, and found the things I learned to be relevant and empowering. \n\n6250 was not of the same caliber by a large margin, and was very disappointing overall. If I had known then what I know now, there's no way I would have considered taking it.\n\n1) The content is poorly organized. There's little structure or hierarchy to the topics. It's a random smattering of things. \n2) The depth is shallow. The quizzes are inane.\n3) The assignments are either borderline trivial, or frustrating due to tricky technicalities.\n\nI don't fault the TA's or the instructor. I believe they are doing their best with what they were given. I think they have tried to make incremental improvements as time has gone on, but there really is no saving it. All the lectures and assignments should be thrown away and the course redesigned from scratch.  This is one of the first courses I took in OMS. Overall the course has been awesome. The course is very well structured and the projects have clear, well-written requirements. I would definitely recommend it to new students. MAJOR kudos to Head TA Stacia Stokes this semester for always going above and beyond and staying on top of everything! If you want to get A with little to medium effort, this class is good. Some projects are fun and interesting (you need to know Python in advance, though) but some just require you to do some experiment and report your observation under unstable VM environment which is bit tough. There was even some bug in a given code and we had a hard time to get a result which we expected from the material. Exams are also tough (or at best, boring to prepare). It requires just tons of memorization.\n\nTo get A, secure full score for projects (60 points). Get an extra credit (you can get 5 points by participating some discussion threads). And try to get 60%+ for exams. You even don't need to watch video lectures or read most of papers for the grade.\n\nPersonally I wish I could have more experience on SDN through projects (implementation). This class is a good \"middle of the road\" for how classes should be at GT. Based off the reviews, I was expecting a really easy class that was a pain in the ass regarding quizzes. \n\nGuess what? Someone reads reviews. The quizzes are gone, but now the projects have a little bit more meat to them. The exams aren't terrible, but require you to actually do the reading (that's not a bad thing... ) and watch the lectures. \n\nMy only real complaint is it seems like some of the projects were in flight or being modified as we went. The last one was delayed due to issues for example and ended up being replaced. \n\nOverall I'd take this class. If you've had no exposure to Python (like me), it's a good way to get your feet wet. If you've had no programming experience at all? Some of the projects may be just a tad stressful. This is a great course if you're interested in lots of details on how computer networks operate. My favorite parts were learning about the original design principles of the internet (since it was a department of defense project), and how TCP flows and congestion control work. I used to do a lot more backend work, and this class has given me some better background info on some of the projects I was working on. \n\nThe projects are a split between programming interview / competition style Python algorithms, and lab reports based on experiments conducted using a simulated network. The 2nd and 3rd projects are hard especially if you haven't had much programming experience. The lab report assignments can be very time consuming, since there's a lot of graphs to embed into google docs documents and explanations to give. The tests are moderatly difficult to hard, so make sure you study. The later readings really pile up, and can be fairly dense and dry. The lectures are great overall, but can be a little unclear in explanations. The professor has also been mostly absent during the course, and has only given us one or two office hour videos. Luckily, the best parts of the course have been the amazing student resources. The Brainscape flash cards, the test prep notes, and the great questions have really made the class a lot better. Our TA (Stacy Stokes) has done a really great job in posting weekly office hours answering questions to help explain projects. Piazza can be hit or miss, since there's a TON of threads, and it's hard to find important imformation even when threads are pinned. \n\nSummary: Recommended. If you're a solid programmer, this is a good first course to take. This was my first and only OMSCS course for Spring 2017. To put my review in perspective, I'm from EE background with little to no knowledge about computer networks prior to taking this class. I took an introduction to Python course on coursera as preparation. \n\nThe course was very well structured and the TAs (Michael Brown was just amazing) ran the show in an organized and timely manner. Professor rarely dropped by but her absence was never felt thanks to the TAs. Participation from peers on Piazza was the best part of the course. I was never stuck during the course as students quickly shared and proposed fixes for the issues they encountered. \n\nThe lecture videos were superficial and only provided an introduction to the topics. I found the reading material (papers and articles) to be quite helpful in my learning. Most of the projects were interesting. First three and last two projects required some programming in Python and I didn't find the coding hard. The remaining three projects were spoon fed through instructions and their main goal was to analyze the results and write reports. Tests included short answer and multiple choice questions and I found the difficulty level to increase from test 1 to test 3. A thorough understanding of lectures and reading material was sufficient and needed to score full on the tests. \n\nI highly disliked the weekly discussion threads where extra credit was offered for participation. Most of the students including myself posted just for the sake of it and didn't contribute to learning. It is a wonderful course. It gave a very good overall perspective about the networking. It's a great course that helps refresh basic networking concepts and introduces you to software defined networking. I had a lot of fun playing around with mininet. Stuff that you could only do with multiple pieces of hardware - you can simulate easily with mininet. \n\nFrom a difficulty perspective, this course was fairly easy. There are no exams, the quizzes are easy and the assignments moderately difficult. I didn't find anything challenging in this course, but the information was very useful none the less.  This was my first OMCS course and my day-job is in Network Engineering. So I consider myself better prepared than most for the course topics.\n\nFirst of all, like reviews from the summer semester, the course professor barely interacted at all. I recall an office hours for the first test and there was one set of discussion questions. The class was essentially ran by the Head TA, who did a fine job, but it was disappointing to miss that expert-level interaction. And for a course with 400+ students, that's quite an ask for the Head TA. \n\nIt will definitely help if you have some background in computer networking, especially in Part 1 of the course. Some fairly complicated networking topics are not explained with an appropriate level of detail. If you don't have the background on standard routing and switching technologies you'll likely need to do supplemental research to handle the first two projects. \n\nThe tests cover a lot of material and the questions are fairly subjective overall. It can be tough to know what the \"best\" answer is. Still, they aren't unfair and if you complete the test preparation questions you should be fine.\n\nSome reviews have characterized this course as \"Network Programming in Python\". This is hardly accurate. The course clearly lists at least an introductory level in Python is required. The first two projects are probably the hardest of the semester, but both can be completed with around 50 lines of code. The real challenge is in understanding the algorithm. The code itself requires nothing more than the ability to use variables, follow control logic, and pass messages, all capabilities learned in any introductory computer science course. The undergraduate networking course required implementations in C, and those projects were much more time-consuming then anything found here.\n\nOverall, I recommend the course to anyone interested in Computer Networks as an operational discipline. If you just want to know how to write networking code as an applications developer, this course isn't for you. This was a challenging but very enlightening course. The practical projects are decent (5 of them) but the three paper projects are a total waste of time. The exams are a bit more challenging than necessary -- they could benefit from being substantially longer so that individual questions aren't worth so much. \n\nI'm quite experienced in Networking and this course was pretty easy for me. It explores some neat concepts on the cutting edge of Networking research though, so if you don't have a strong foundation in the fundamentals coming in you'll have to spend a lot of time catching up. It's just about right in terms of difficulty for a Masters' level class, I think. This course is an easy A if you have inexhaustible patience.\n\nThe \"professor\" is AWOL.  If you ask me her name in a year, I'll have forgotten it.\n\nThe head TA is combative and easily frustrated.\n\nThe course lectures are shallow and poorly organized--a hodgepodge of unrelated topics.  There is no book.  The journal articles are dry but at least somewhat interesting.\n\nThe programming projects are usually broken.  Some have suggested that this is a Python debugging course first and a networking course second.  They are correct.\n\nThe writing projects are easy 100s.  If you find yourself unable to reproduce the desired experiment results, don't sweat it.  The project code is probably broken (again). I thoroughly enjoyed this class. You don't really need a background in Networking to jump into it. You will need to be familiar with Python and understand algorithms to an extent. For the Python skills you can take Udacity's Intro to Algorithms course which I had gone through only about a third of its material but it was enough for me to be able to successfully complete the projects that required a better Python understanding. There were 8 projects in total. The instructor was considerate that in some cases a student may have trouble reaching a solution, so for everyone assignment credit is explicitly given for turning something in that shows you had at least put forth some effort. \n\nThe exams were pretty challenging but the grading was fair. They were a mix of multiple choice and short answer. Multiple Answer Multiple Choice questions seem to be a theme throughout many of Georgia Tech's courses. Thankfully in this course they weren't all or nothing. Just be sure to only mark the ones you know or are pretty confident in and you'll likely reduce the damage. For test prep I would suggest focusing on understanding the topics covered in the study guides provided by the instructor. Then you can go over the test prep questions and solutions that were also provided. The professor was good about including the topics you should look over to be successful on the exams. Overall, this was a good class. I learned many basics about Computer networking and most of the papers were interesting. The projects were good and the TAs were very helpful through out the course. It's good class for computer networks. The class itself was pretty useful especially for someone like me with almost zero network experience/knowledge. I felt like the papers gave a lot of extra coverage on the topics and provided much more depth than the lectures themselves. The projects have been updated from previous semesters from what I've seen and this is for the better. \n\nGrading-wise, there were 8 projects and 3 tests. The tests were made up of MCQ, true/false and some short answer (except the last test). Nothing seems to be set in stone so keep this in mind when preparing for the tests. Attending the office hours were very useful. The head TA at the time, Michael, really saved this class! The professor for the semester was really hands off. It appears she was mostly busy with other things and so we didn't get to see her much (she didn't hold weekly office hours). \n\nNote that the papers will take time to read and comprehend so if you're taking this class, try and get ahead of the readings. There's an optional textbook which I found really helpful in supplementing my overall understanding. Any review you see on this course more than a year old you can ignore, because the course changes a LOT. The reviews here were deceiving for me. This was my first OMSCS course - I am an intermediate Python programmer at best, with a decent networking background and no real major programming background. This course was challenging without being too bad. Some weeks I spent 20-30 hours, some weeks less than 5. More of the former though. \n\nThere were 8 projects for 60% of your grade, which alternated between pretty challenging (coding wise) to more read/report which were interesting but easier. If you have a significant coding/Python background you have a big advantage, but otherwise they will push you. There is a lot of reading: academic papers, book, and background that took up a chunk of time I did not expect. \n\nThe course is a really good course, especially for a first one in OMSCS. Konte as a professor was great with feedback, Michael Brown as a head TA was great on that as well. The rest of the TAs, Michael, and Maria Konte were simply fantastic overall. Incredibly responsive on Piazza. \n\nThe tests are 40% of your grade. Although Test 1 was pretty random and not super representative of the material, Test 2 and Test 3 were much better - challenging but very fair. Just do not think you are walking into an easy A. \n\nOverall the course was great! I learned a lot, and feel like a stronger Python programmer. Background:\nThis is my first course in the OMSCS program and I intentionally took this course for two reasons.  First, I was interested in learning more about computer networks.  Next, from reviews on OMSCentral, this seemed to be on average one of the easier courses, so it provided a good stepping stone into the program.  I have an aerospace degree and have worked in the world of defense software for about 4 years now.\n\nPros:\n- The head TA (Stacia Stokes) is very attentive and present on Piazza.  Two thumbs up here.\n- Each project has enough time to complete.\n- The lectures, articles/readings, and projects do tie together for the most part.\n- You do learn a lot about both the historical and modern concepts of network programming.  They don't go too deep, but that's mainly because there is a lot of ground to cover.\n- Two instances of extra credit were offered (one for weekly discussions, another for an extra portion of the last project)\n\nCons:\n- The articles were difficult to read through.  Interesting topics, but the important points were buried in the article (typical techincal paper...).\n- The lecture videos can be a bit jumpy in its explanations, though it still holds to the overall lecture topic.\n- I had hoped to do a little more with software-defined networks (SDN's)\n- Projects 2 and 3 were intense (but if you get past those, you'll be fine.)\n- Test questions could sometimes be vague, and thus difficult to answer.\n- ProctorTrack may be more of a pain than it's worth.\n\nOverall I'm happy with this course.  I recommend it as a first course for anyone starting the program without a network background.  This course uses Python, so you'd benefit from already knowing it, but that's not a necessity.  Time spent each week really varied and depended on the project.  I probably spent time more than I needed to, so take that into account for the \"weekly workload\" stat. Having experience with Python, I found the projects very easy. Like some others, too easy. But I did learn from them. \n\nThe concepts actually helped me for work, though I felt like we didn't go in depth enough in some areas. \n\nThe quizzes were often worded in ways that made them more difficult than they should have been.  I have been working in the networking industry since 2002 developing networking applications and protocol stacks. In spite of the experience, I learned loads from this class - especially on the L3 side. The projects are fun, and shouldn't be a problem if you know Python (an absolute must for this class). The TAs and Prof. are super active in Piazza and Office Hours are also conducted twice in a week. \n\nThis course requires reading of published papers apart from video lectures (which I found not rich in details - might be a problem for students not exposed to networking concepts earlier from school / work). There are 2 closed-book proctored tests involving a plethora of multiple choice, descriptive-types, and problem-types questions. It is important to internalize the concepts mentioned in the papers and video lectures if you want to do well in the tests.  Class is around average difficulty with some booby traps (2 that semester) along the way that ramp up difficulty for brief periods in the semester, which can take you by surprise and kill your grade if you are not prepared (e. g. starting a project late because you think it might be easy like some of the others and not thoroughly looking at corner cases of your solutions that are not easy or obvious to see even with some effort in doing so). Class was well run and the grade distribution for projects and test was done fairly. Only thing I did not like was the extra credit for discussion threads where many people added fluff that didn't contribute to learning just to gain extra credit and half the time others feeling like we didn't have much to contribute to the value with all the 'noise' in those discussion threads. Otherwise I would highly recommend this class. I learn't a lot and it was a good introduction to the program! I found the reviews for this class deceiving. This is NOT an easy class. For someone with not much prior Networking experience, The only way to ensure an A is through consistent hard work. Not having programmed for a while or unfamiliarity with Python could easily take your overall grade under 90%. Overall, although there was the occasional video, where concepts were smudged over, very good quality of lecture! The papers were not an easy read, but pay off with knowledge in the end! I learned a lot in this class. Just don't underestimate it, it is not a walk in the park. Cheers! Standard lectures, content itself isn't terribly hard to follow. Projects each had their pain-points. About 3 of the projects were bigger and took 10 or so hours while the rest were smaller projects that each took maybe 5. The head TA was essentially the only point of contact for this class, and with that considered she did a great job... but... the projects NEED improvement. Simple things wasted hours of time for everyone in the class and understandably I think they started to get short towards the end of the course which didn't help. All in all, like most classes, the learning happens in the projects (for better or for worse). Not recommended. You need to finish three boring reports in the middle of the semester(although you can definitely earn full credits). The exams are very boring.  The security aspect of this course is very interesting. Knowledge of python is a must. There were papers to read each week, which were very in depth about the material covered while the lectures would barely scratch the surface. Overall, this is a great course. A perfect course to start the program. All the assignments are due during the weekend which is a big plus. Once you have basic knowledge of networks, the class becomes more interesting. Otherwise some effort needs to be put to get the basics right. You will learn more from the piazza discussions and the assignments. The papers are worth reading and some are a bit boring too. To crack the exams, the video lectures and the reading papers are clearly understood as sometimes the MCQs can confuse you. A fun class where you will learn and enjoy networks. Good course if you want to learn about computer networks. Very good videos, projects are okay, and tests are good too. \n\nProjects - 60%. All projects are good and doable in few hours - but you have to spend a lot more to make sure that you don't make a typo / small mistake. A small mistake in any of the project means that you lost \"A\" grade... My suggestion will be that if you are looking for \"A\" - make sure that you spend those extra hours to iron out any issues. \n\nTests are closed book. So, that's a bummer - I haven't done closed book written test in a while. But then closed-book tests are more helpful retaining the concepts. For both tests - I studied for 3 days straight and took exam at the end of 3rd day - 3 days were enough. \n\nVideos are good and helpful. Extra readings are boring and elaborate - but you don't need to read everything - you need to focus on key concepts. \n\nOffice hours were useful and I spent time watching all of them offline. The discussions in office hours will give you tips for your projects and help u out with key concepts on tests. \n\nGood course overall - definitely recommended. The only concern is that you are more worried about loosing the points than earning points.  My Background: CS Undergrad, 3+ years industry experience in Software Development, No Networking undergraduate class. \n\nProjects 60%. Each project is very easy if you have decent programming experience in Python or a similar language. To be honest, I felt like they were too easy (though I did learn something from most of them). Be sure to do well on the projects so that you have some room to not do so well on the tests. \n\nTests 40% I studied 20+ hours for both tests, but much of that was catching up on lectures I had fallen behind on. Before the curve, I got B's on the tests (A's after the adjustment). From what I understand, the Spring 2016 offering was the first to incorporate 2 tests whereas previous semester had quizzes. Be warned, from what I can tell, these tests are much harder than those quizzes ever were. The tests did not cover anything that wasn't in the lectures/homework/papers, but they covered a vast amount of content. Take good notes on the lectures AND study them and you should be fine. \n\nHomeworks: The homeworks are optional but not optional if you want to do well on the tests. \n\nPapers: There were several academic papers for us to read. They varied in difficulty, but a couple of them were very long. However, the tests and the projects didn't seem to test our knowledge of them very extensively (other than what was in the homeworks). \n\nLectures: These are good, but they are not very consistent in the amount of detail covered. Some topics are covered in much detail while others are not. It would be nice if each one had optional readings associated with them. The are very few difficult concepts presented in the class. \n\nOverall Thoughts: Having never taken an undergraduate networking course, I felt like I learned a good bit in this class. The class really isn't that hard. I felt like it was worthwhile for me.  Overall an enjoyable course. Comparing to the reviews from previous semesters, it seems evident that there's been an effort made to make the course more rigorous and difficult. The projects have been beefed up, there are three tests, and something like 10 to 15 dense papers you have to read. I really enjoyed most of the projects, while I found the papers to be excessive. The current head TA, Michael, essentially runs the course and he's on top of it. With just a few exceptions the timeliness of grading and responses on Piazza was top notch. This was my first OMSCS course. My background is in Civil/Environmental Engineering, so I did not have any previous knowledge in computer networks. I did not take any classes in preparation for the course. However, I did have some very light Python experience. The programming portions of the course were fairly basic, even for a novice programmer such as myself. Brushing up on python syntax and data structures should be enough to complete the projects. \n\nBe prepared to spend a lot of time on Piazza asking questions and reading your classmates posts, as the instructions given in the lectures and projects may at times be vague or difficult to understand. The instructors generally do a very good job at responding to questions. \n\nThe tests vary in difficulty. I found the first test to be the easiest with the following test increasing in difficulty. The tests are provided in ProctorTrack and you are given a two hour window to complete them. However, all of them can easily be completed in under an hour. \n\nBetween the lectures, papers, and projects a lot of information is thrown at you. Some stuck and a lot did not, but I still learned a good deal. Overall, I would highly suggest this course if you are a new student. It is highly structured and requires little base knowledge, allowing you to ease into the OMSCS program. Just be prepared to do the work and allocate some time to study before the tests. After 20 years working in non-cs field, this was a great course for my first semester. It allowed me to learn the basics of python, to get familiar with Linux and to ease into the rhythm of studying every day without it being too stressful. The Head TA did a fantastic job keeping Piazza organized with weekly posts and office hours. All assignment and test grades were returned within 2 weeks. The Instructor did some office hours around the first test but sort of checked out after that. The 2nd and 3rd assignments were the most challenging of the 8. I have a much better understanding of various network protocols and their limitations. I definitely learned a lot in this course. A good survey course on networks. Is conducted really well. The research papers which are a part of the course are the best part of the course. \n\nWith 8 projects, 17 papers and 3 exams this course can be a little hectic at times People should know this is NOT the easy class that past reviews says it is! The course apparently has gone through a lot of changes. There are 8 projects and often times take a lot of time to complete, and the tests can get tricky if you don't completely know and understand the material. The material in general is not tricky, but there is a lot to remember and the papers can be dense and hard to read. \n\nOverall I learned a lot from the class, I'd say it's medium/hard difficulty, but don't think this is an easy class that you can pair with a more difficult class. You will definitely be spending hours on each homework and even more studying the material. \n\nI will say you do come out of this class understanding a lot, like the internet, how it works, how it's connected, the nuances, etc. It's a class that I think is very useful and will teach you a lot. This is my only class that I have not gotten an A in and it was mostly because I couldn't figure out how they were testing. I got 68%, 61% and 74% and that drug me down to 88% for the class. But, this was more because of my limited knowledge going into the course about networking. I did learn a TON and would recommend this course. I recommend this as a very good first course to start off your OMSCS journey. The course is well structured with engaging lectures and content. You are encouraged to read up on additional material and the quizzes too are good. The projects are based on SDN with Python as the language and were interesting. In fact, this course gives you a good foundation to explore lots of interesting areas in networking. I enjoyed taking this course.  Overall, good and pretty easy class. Lectures are informative, interesting, and well constructed. Weekly readings are not too long, fairly interesting. First few projects are excellent, they match up well with the lectures and readings, and they drive home concepts. Projects toward the end are more about understanding configuration options than understanding core networking concepts. This was my second course after having taken Software Analysis and Test in my first semester. \nThe course was interesting with a number of papers required to read. The assignments were doable and the tests were multiple choice which tested the content(lectures and papers) quite fairly.\n\nI'd recommend this as a first course given the great amount of help and active participation on Piazza(especially by the Head TA Stacia). It provides a great welcome into the program. You'll enjoy it more if you also have little networking experience. The content is great as a introduction to the Networking world. I figure a veteran in the OMSCS or Computer Networking wouldn't find it engaging though(unless you're doing it for the relatively easier A :-) )\n\nGreat class overall though. Helped me learn quite a bit on networking concepts which I had no prior knowledge of and polish up on my quite rusty Python skills. \n\nAnd I must say the TAs do a great job given how large the class can get.  Great Work on that front!! This was my first OMSCS class, so I went in not knowing what to expect. For the most part, all of the other reviews for this class seem to be correct. The workload was not bad, there were projects, reading scholarly papers and tests. The TAs seemed very helpful and of course, the other students in the class helped each other learn. \n\nI don't have any negative comments from this class, but for those interested in this class the following should be considered: Don't get behind reading the scholarly articles. The exams cover these and can significantly impact your grade. Second, make flashcards. The tests cover some detailed stuff, so good study practices are necessary. Finally, try to give yourself a weeks worth of margin on assignments. Challenge yourself to get assignments turned in a week early. \n\nOverall, I enjoyed this class and would take it again. I really liked the course and the accompanying projects (very easy python stuff, even though I'd never used python before). Tests were boring and unnecessary since then didn't really teach me anything, but they were a big part of the grade.  Took Computer Networks as my first course in OMSCS and was pleasantly surprised by the quality of the content and the general interaction between students and faculty (professor and TAs). As other reviewers have mentioned, the course requires Python programming knowledge; especially the second, third, and last two projects.\nThe three tests were all administered through Proctortrack and were very manageable if you studied the lectures and the required readings.\nThe head-TA (Stacia) was very responsive and definitely deserves recognition for how well she ran the course. The other TAs were quick to respond and grade the assignments/tests.\nOverall, CS6250 is a very good introductory course to advanced Computer Networks and to how OMSCS works. I'd highly recommend this course to anyone interested in the subject. Definitely a bit harder than the score here would make you believe. The first few projects were challenging but very worth it. If you aren't very good in Python, you may struggle. The tests were also a bit tricky, so study up a lot. I would say the worst part of the course (by far) were the academic papers. They were dry, dense, and just flat out boring. The tests are a bit harder than I expected, but it's more than compensated for by extra credit opportunities. Fun to learn about how networks and the internet work! Mid semester review:\n\nThis class isn't necessarily 'hard', but they have made an attempt to make it more challenging. There were some new projects that had a couple of growing pains, but they worked with the class on them. Exam wise, they grade fairly. The \"multiple correct answer\" multiple choice questions can be painful due to how each answer is weighted though. \n\nThe breakdown for Fall 2016 (with Konte) is the following:\n\n8 Projects - 60%\n3 Tests - 40%\n\nThankfully we haven't had to do the quizzes that people have complained about previously. \n\nEnd of Semester Review:\n\nTBD Second class of my OMSCS career, and it was a wonderful class. TAs and Professor were very responsive. Material is great and so were the projects. No background knowledge of networking is needed. Make sure to give yourself enough time to watch the lectures and read the articles. You might need to re-watch or re-read in order to really get an understanding. I would take a tutorial on python just to freshen up on the language. Overall a great class would recommend taking. Great course to learn the fundamentals of networking. I took it cold (no introductory classes or networking experience) and had no problem. Expect to spend about 6-10 hours a week reading the papers and watching the lectures. More time will be required if you are rusty on your networking skills, as you'll need to read the textbook to catch up on basic concepts. On top of that there is a project every other week, which usually doesn't require much programming, and took me 3-5 hours on average. There are also 3 closed book tests which take a few hours to study for - easier if you have taken good notes. \n\nThis is a very good course to take. It should be called \"Advanced Computer Networking\", because like AOS, it covers modern research topics in computer networking. It is generally assumed you have a working knowledge of computer networks, and there will be little hand holding here. I learned a lot, even having professional experience. I highly recommend this course as a very practical course to take that will benefit any software engineer in their career. \n\nThe professor, M. Konte, is a internet security researcher, and the weekly office hours are a chance to pick her brain on stuff. She wasn't involved as much as I'd have liked on Piazza, though. The TAs though were very responsive on Piazza and slack - expect very quick turnarounds (< 12h) on questions asked. Tests and projects were generally graded within a couple weeks. So it's a very well run course overall. \n\nThe only negative is that a few of the projects had issues. This wasted me a lot of time on one project in particular, which was pretty annoying. I also would have liked to do more of the coding on the projects. Except for a couple exceptions, I feel like they hand-held a bit too much (mostly already implemented, you just run them and analyze the results). This class was interesting and useful. It was very hands-on with 8 projects making up a majority of the grade in the class. Some of the projects were hard until I had a \"gotcha\" moment. I would also recommend brushing up on some of the networking fundamentals, but that's not strictly necessary. WARN: They adjust content of the course. as of Spring 2017, it have 8 projects and 3 tests. 2 or 3 of them are easy. others all take some effort. This is not a hard course, but not as easy as indicated on the review. I know some students enroll this class think it is easy, but get a C instead. This is a good course for new students so you can get familiar with OMSCS structure, Proctortrack Exam, T-Square, and Piazza.\nThe material of this course is very boring and most of the stuff are theories or concepts. The research papers are also very dry. There are 8 projects and 3 exams. You do all the projects and you are guaranteed A with minimum effort putting in studying for exams. Python programming is very limited. Most are the projects are less than 20 lines of codes, or just changing some variables/configuration in the given codes. \nTA in this course is nothing but great. Projects are returned in timely manners. Head TA is very active on Piazza and there is weekly office hour in helping students on projects.  \nProject 2 and 3 can be tricky, but after that, the course has a very light workload. Piazza is a mess with some students abusing it with silly basic questions. People basically don't read and ask all kinds of questions that are clearly explained in the project requirement.\n Context:\n- 4th course of the program. \n- Software engineer with many years of experience. \n- Limited networking experience (socket programming, HTTP, some tools like ping, dig). \n- Comfortable with Python. \n\nPros:\n- Broad range of topics: Design of the Internet, Router Internals, Congestion Protocols, Traffic shaping, SDN and more. \n- I learned a lot, and feel better equipped to go on my own and read further materials. \n- The projects were fun and interesting, a mix of programming, understanding the papers, analyzing results, etc. \n- Some of the TA's were supportive, available and responsive. \n- Most of the papers were interesting and expanded the material of the lectures. \n- Projects and environment were well prepared and presented. \n- Grades were returned in reasonable time. \n\nCons:\n- Some of the TA's were not available. \n- Professor was not available. \n- Multiple choice questions in the tests were a little bit tricky. \n- Second test covered lots of material and heavy on the grade 30%. \n\nOverall:\n- Good course, reasonable amount of work, fun projects, lots of material\n- Be ready to read a lot of papers, the tests cover them. \n- Some projects have subtle aspects, don't underestimate them, start early. This course is great if you are new to networking. Best part of the course is the interesting content, particularly the reading, which provides some good details in understanding networking. I also really appreciate the head TA, Stacia, who is very dedicated to keep the course running smoothly. Projects and exams are fairly easy as long as you invest time in going through lectures and papers. Grading is very generous. Overall, projects are interesting, but should be improved in depth. This is an easy course even though the projects have been updated. The projects uses python and implements some typical algorithms in computer networking. Some projects are more survey-like, basically running some commands and writing reports. You need to study the lectures and read papers as well. If you have programming experience, you should be fine to complete the projects. I find it interesting that some people claim they have no experience in python and find coding projects very hard. They probably have no programming experience as well but it does not change the fact that many projects are really not about the programming itself, all programming language uses in the course projects are basic. It is more about the course contexts rather than some language gimmicks. What I really like as well as other courses is that by studying the tests, I am forced to learn the concepts in depth, not just recognize the terms. You have to write essay answers in tests. Overall, it is a good course that covers most concepts of computer networking, especially in TCP/IP, network security. Personal Background: One of two classes taken in my first semester. First programming since completing my undergraduate computer engineering degree in December 2014. Worked in power distribution since then. Never programmed in Python before.\n\n\nCourse Experience: I rated this course a \"Loved!\" as an incredibly helpful introduction to computer networks. You will use the basics of python for the assignments that are not exceedingly difficult. I simply had to transfer basic coding techniques from C and Java into Python syntax. This class introduces a broad and limited understanding of computer networks topics. This is not a course that will teach you about writing code for significant network applications with SDNs or otherwise. The instructor was largely absent which made for some easy extra credit discussions. The TAs were very helpful and effective and made the course successful. Only one assignment out of eight had a significant issue that didn't effect grades for anyone. Exams were simple memorization of concepts from the lectures and papers. I earned an A in this course even without the extra credit so I'm confident the vast majority of students would be able to given enough time to figure out the harder projects. Great first course or easier course to pair with a harder one.  Scientific research papers are a bit long and numerous(not sure there is a cost-benefit there... maybe considering requiring PARTS not ALL for each paper). The videos are pretty straight forward, and you have to know videos and papers for the TESTS. We only had 2 tests, but were supposed to have many----next semester I think they will do more. The projects were cool and interesting(know your Python), once you figured out how to get started. That might be my one recommendation is that sometimes we really had no idea how to get started. They definitely expect the \"figuring it out\" part is the first step of each project and is crucial to understanding. The autograders were a bit scary, cause even when you got the project working, you were worried whether your project would pass or not. Our last project has an autograder we had access to, so we knew for sure. Hopefully that will become the norm. My advice, the projects are very doable if you start early. Those who waited really seemed to panic at the end. TA (esp Michael) were extremely communicative in Piazza, so use that site daily for questions and updated. The course looks like they are redesigning, so there is definitely some re-ordering that needs to be done between readings, quizzes, and projects. But, overall good course with appropriate level of time commitment.  I took this as my first class in the OMSCS program. I have significant embedded programming experience in C but I had only very basic previous experience with Python, the language required for all of the assignments. That said, I found the project objectives clearly explained and with the help of a few good python books enjoyed the projects and was able to do very well on them. For the spring 16 semester this class had 2 proctored tests. I would have preferred if the test material had been spread across perhaps 4 tests. It was challenging to both prepare for and thoroughly cover the required material in just the 2 tests.  Interesting material. No exams. Just open-book quizzes and programming assignments. \n\nProgramming assignments require use of a VM and knowledge of Python, but they are mostly simple and take up no more than a day or two. \n\nNice to take along with other \"tough\" courses. For those who use these reviews to pick an \"easy\" course, please note that this course changes significantly from semester to semester, using student feedback, so only use recent reviews. \n\nIn the Fall 2016, we had 8 projects and 3 proctored exams. There was something due nearly every week, with projects of varying difficulty and with tests definitely requiring a good amount of time to study, as they included a lot of \"short essay\" questions, were timed, and proctored (via ProctorTrack). \n\nI found this class very enjoyable because it didn't include a lot of \"busy work\" - most everything we were asked to do led to learning something valuable. The projects were the best part. The tests were fair in that if you read all the material and did all the projects, you were pretty well prepared, but if you didn't understand something, it would become apparent on the short essay questions, of which there were many. \n\nI'd say the class is \"easy\" in that it does not require too much prior CS knowledge to succeed. You need to know a little bit of Python for most projects (but way less than KBAI or Computer Photography, for example), and you need to stay on top of things because there is a lot of material. But it is all doable and largely enjoyable. Definitely recommend. Good way to get an introduction to how OMSCS courses are run without a lot of pressure.  TAs are pretty good, instructor participation is okay, topics are covered at a high level, and the coding projects are relatively easy.\n\nThis course felt easier than it needed to be.  Like they stretched the material to fill the course instead of going deeper into the topics. Overall, a solid course. I liked a lot of the projects earlier in the course, although they were a little bit more difficult. Expect to spend a lot of time on the earlier projects, and get bored with the middle of the course projects, and then pick back up again a bit for the end of the semester. \n\nExcept for the beginning of the course, the projects weren't too difficult or too time consuming, though there are quite a few projects. There were quite a few problems with the Course VM. \n\nTA's were good, but Piazza was a mess. Tons of duplicate posts and people asking ELI5 questions, even though this is a grad course. Sometimes the TAs could be dismissive of issues telling you that it was all in the instructions somewhere, so make sure to read CAREFULLY!\n\nTests weren't too hard, multiple choice or select all that apply, and based mostly on the concepts. Make sure to do to the readings though, as they are also covered in the tests. The course is not simple, but the content is concrete and straight-forward, especially if you have any experience in network implementation and support. It's an appropriate foundational class, anyone who aspires to a Masters in CS should understand and be conversant in these concepts. \n\nNo real python expertise is needed for the projects, they are really focused on the networking concepts. Given their weight (60% this semester) they could have been more challenging. \n\nFor this semester the papers were the meat of the course - one a week on average, plus plenty of supplemental reading and online videos if you want to spend the time digging in. \n\nTwo closed-book tests - both were fair assessments of your grasp of the material. \n\nProfessor & lead TA were very engaged, and the Piazza community was active and for the most part helpful.  This was a great class. The projects are challenging enough to be interesting, but not overwhelming. There's no busywork; all the homework is relevant. I learned a lot, and I really enjoyed the experience. The projects were very interesting and overall not to difficult to complete. All of the projects are in Python. The Lectures weren't bad and also didn't take very long to complete. There's quite a number of papers to read every week though and that can suck up a good chunk of time. There were two tests for the summer semester and they weren't awful as long as you were very thorough in your studying. For Summer we had 5 Projects though there was talk about examining the amount of projects to offer in Fall/Spring semesters so be ready for some minor restructuring. I don't think the instructor posted once all semester. The course is one of the very well organised ones here in OMSCS. The course did change in its organisation this semester significantly but the contents did not change at all. The course is made a bit more tougher than what it was previously. So instead of some easy projects and easier questions in exams the course now has a few tough projects though only 2 can be called as tough. And the questions in Test1 and Test2 are arguably tougher, but Test3 still had easier questions to answer. It is still not a hard course if you want to get a B but is definitely a hard course to get a A I really enjoyed the course. It's well structured and the assignments are evenly partitioned, which helps time management. The subject is interesting and we covered a lot of computer networks material, from low-level routing and switching up to detecting rogue AS's. People who didn't know Python had a tougher time, so knowing it really helps. There were a number of papers to read (I liked them, some didn't). The instructor, Maria Konte, was new and stayed in the background until near the end, but TA team was great and the head TA Michael was a superstar so the class moved along like clockwork, with assignments coming back regularly and useful feedback. Some projects were a bit raw out of the gate - fortunately, the students on Piazza were very helpful in finding and fixing issues to keep things moving. Don't be fooled by the early reviews - it's not an easy class, it has morphed to be about medium difficulty and time - but it is predictable and well-tuned. Good course. Learned a lot. Projects were split between writing code, and reading papers and running through experiments. The biggest headache for these was getting mini net to work properly and consistently. Tests weren't easy, but were fair. If you spend the week or so before hand studying and read all the papers you should do fine. TAs were really good, and the office hours were actually worth attending. \n\nI took this course alongside another class, so I may be off the mark, but this class was much more time consuming than it appears to be rated. Maybe they changed the content, or maybe I spent more time than normal, but I would have a hard time believing that 6 hours a week was enough for this course, since the lectures alone were at least an hour or two, and the papers were multiple pages, and released every week. \n\nYou need to know Python, but with the time frames you are given for projects (2 weeks), its a lot easier to learn in a course like this over say a course like Computational Photography This was a tough first class.  Wound up with a B, but worked my butt off for it.  If you aren't coming in with a CS background, you are forced to dive in quickly.  The class felt very disorganized and the teacher only showed up twice during the semester, so you're taught exclusively by TA's.  \n\nThe content was super interesting, but not recommended as the first class to take in the program.   During the semester I took the course, NW's was quite easy from an assignment perspective. The course has been revamped since. Despite this, the lectures were well organized and went well above and beyond my undergraduate course content on the same subject. Great course. Having had no context on networks prior to this class, I feel like I now have sufficient knowledge of the basics and enough context to learn networking concepts on my own if I have to. \n\nIt was my first semester, and I took this class along with another course (IOS) in anticipation that CN would be pretty light, given the reviews. It was more substantial than I expected and I would put it at a \"medium\" in terms of difficulty, now that I've finished. \n\nOverall, the assignments were great for understanding the concepts we covered in class, although I felt that some were not substantial or applicable enough. For example, there was one assignment, which was one of the more difficult assignments, that more so had to do with data structures rather than networking concepts themselves. \n\nExams were thorough and I felt that they sufficiently tested my knowledge, and the instructor and TA's were very responsive. Not sure if this will be the same for subsequent semesters, but I also appreciated the quick grading! Lastly, a working knowledge of Python will be useful for completing assignments. The class was fun and built upon basic networking concepts. \nTowards the latter half of the semester, the world load was very light depending on how you managed your time. If you got the projects done during the first week, the second week was mostly just lectures/reading. \n\nThere is a ton of reading in this class. It can get a bit dry and daunting, especially since each week there are a handful of papers to read, each being ~13-15 pages in length. On top of that, some projects have a surprise paper that must be read to complete it. On top of this, even though some papers are split into the second week of the project, they are helpful to read if completing the project during the first week. This also applies to the video lectures. \n\nFor the summer semester, there were 5 projects and 2 tests. Project 1-3 were pretty simple, Project 2 taking the most time. Projects 4-5 were a bit more open ended and validating your work could sometimes be difficult. \n\nBecause it was the summer, they squished the latter half of the content into a single exam worth 30% of your grade. In my opinion, this was too heavily weighted, with each incorrect answer reducing your final grade by over 1% (as there were only 26 questions on this exam. )\n\nThe TAs were responsive and helpful, but the instructor was completely absent. She appeared once to ask \"why we were interested in the course. \" She was supposed to post weekly discussion threads to provoke thoughtful discussion, but this never happened. These discussion threads were to apply to a 5% extra credit score, which ended up being applied to everyone's grade since no threads were ever posted. \n\nOverall, I liked the class and I learned a lot, but it has flaws which I hope are resolved in the coming semesters. 2nd project was pretty difficult, and didn't feel rewarding. Material was not too hard to grok, and I had literally no networking experience whatsoever. That said, not sure if I would recommend the course. I took this class my first semester in the program, alongside operating systems. I didn't technically meet the prerequisites, never having had a networking class in my undergrad curriculum, but I wanted to use my first semester to maybe try to get some of the more fundamental topics squared away. \n\nI learned a fair bit about how the internet worked, and the introduction to software defined networking was fun to play around in. But I could feel that the class was kind of in an awkward state right now, perhaps transitioning somewhat from a heaver focus on SDN when the course was first designed. Lectures referred to projects that were no longer part of the course, for example, and I'd say only the last two of the eight projects really involved playing around with SDN. \n\nThe remainder of the projects concerned fundamentals (e. g. graph search over a topology) or were follow-along demonstrations of topics we read about in journal articles. These latter projects really required no coding -- you'd just follow the instructions provided and write up the results. \n\nSome of the projects were newly designed and had bugs, but those were worked out and time extensions were given where necessary. If they keep the same project structure I don't expect that to be a problem in later semesters. \n\nA couple other reviews say the tests were hard. I didn't think so, really? I got As on the first two but a C on the final, so maybe they were adjusting the difficulty as they went along. Then again I didn't really study very hard for the final since I was focused on my other course... \n\nMy \"5 hours\" is a guess; I didn't keep track. Some weeks I barely did anything, but where there was a test or a particularly challenging project that might creep closer to 10 or 15. Rarely, though. This course was requires a lot of work, there is almost a weekly assignment with lectures and reading. The two exams are tricker. What salvages this course is it offered some additional credit in Spring 2017", 
    "CS-6262": " TLDR: Expect to teach yourself the material and comb through Piazza\\Slack looking for answers to questions; but was generally an interesting class. Assignments not hard just confusing. \n\nPrep: Have good familiarity with different variants of linux, and be familiar enough to have to deal with VMs without UIs. Having a basic understanding of python, network\\programming basics, and android development. \n\nMy expectations for the class were to lean about network security and ways to prevent attacks or make it harder for attacks to happen. After the course I would say some of these expectations were met. \n\nThe course feels like a great overview of some of the security vulnerabilities in the existing structure of networks and the internet. It provides a nice way to experience being a white hacker to test your defenses and learn how to improve them. \n\nThe course was not well thought out, and assignment issues caused students to have their access revoked due to not following GT IT policies. The majority of the assignments were hard to understand and much clarification was needed due to not being fully vetted. Many times the instructors told students to start early, and then those who did were penalized because they had to redo assignments based on the erratas that were released later, often a week into or days before the due date. Be prepared to monitor ALL Piazza and slack communications daily, even after you submit assignments in case the requirements change for what needs to be submitted. \n\nOverall, the course had great potential and learning opportunities, but was dulled by the inconsistencies, errors, and lack of communication from the instructors. \n\nThe Professor must have been too involved in his research to even care about his students or class. He did not even post a single comment and was not involved in the class at all. \n\nThe TAs lead this class completely, with one TA standing way above all the rest. And he wasn\u2019t even the head TA. Overall, good content, badly run course. Required regrades on 3/5 projects due to autograder being subpar. Professor does not exist. TAs were alright but had to change projects halfway through due to their own mistakes. \n\nOverall needs to be run cleaner and not so harsh. People are here to learn, if you want to make a class tougher, make it so that you are just as passionate as we need to be. Can't check out and then be rude all day.\n\nSome of the students in this class asked terrible questions, it seems to attract students who don't belong in the program. Although the course was quite easy, I liked it a lot. All the projects were very interesting, well put together. I loved the fact that the exam was optional and the focus was more on practice. My advice to the course creators: do not make those optional projects optional. I am sure, GT students would be able to handle all 6 of them during the single semester. Also, the experience of breaking into metasploitable is definitely a great takeaway! This is definitely not an easy class, and takes more than 4-5 hours/week of effort. The projects were interesting; some of them were challenging, and some were straightforward. A few of the projects could be huge time sinks, and could easily take 40 hours. The lectures were excellent, but to truly appreciate them, you need to at least skim the suggested readings. I personally loved reading the papers; they're entertaining, like war stories between the good people and the malicious hackers. The quizzes and the optional final exam were straightforward. I had no problems with the grading, and thought the TAs were patient, helpful, and fair. \n\nHowever, some of the students in the class were some of the most entitled I have found in the program. These students complained and demanded a lot. There were numerous requests for due date extensions with the given excuse of having full time jobs and families.... The problem is that probably 90% of us were in the same situation, and yet we still got the projects done on time. A few students missed the final exam, and blamed the instructors for the \"non-standard\" exam window. Are we in a graduate school here? Piazza was extremely noisy, and a lot of students offered opinions that caused much confusion. Academic integrity violations were rampant: students shared (partial) solutions on Piazza, discussed solutions and included code in their postings, or provided hints that reveal way too much information. TAs had to delete code from some posts, but it's not clear if the students were disciplined or not. \n\nIf you take notes during lectures, do the readings, and work on the projects carefully and independently, this class takes about 15 hours/week. But, if you don't, and simply post on Piazza asking for hand holding on every single difficulty that you run into, or wait until last minute and simply follow the \"walkthrough\" that would be inevitably built up on Piazza, then yes, this would be an easy class that would take 4-5 hours/week. This course is pretty interesting. It's hard too. All projects are based off of research papers. So you essentially have 2 weeks to read and digest the material and finish the assignment. Lectures covered most topics tangentially - which were helpful for quizes but not for projects. On an average, I spent 12 hours or more per week on this course I liked the class a lot, the projects were really cool, although needing some fine tuning--both in the wording and descriptions, and the resources to figure out. I found myself getting stuck for hours on stupid stuff, instead of spending my time struggling with the real content.  The auto grader was rather scary because you literally had no idea if what you submitted would work or not.  If this is going to be used, there has to be a system where we can verify our submission. The weekly quizzes were too easy compared to content and had little to do with projects.  But, if you learn by doing in projects, this is a good course.  This is my 2nd class from OMSCS. I agree with a lot of the reviews here. This course is not difficult if you have some programming experience but just very time consuming. The projects are disconnected from the lectures where the lectures cover extremely broad concept whereas the projects are nitpicking on very specific knowledge. You have to self-learn a lot of things to be able to do the projects. Also, the projects are all over the place, not building on top of previous projects' knowledge or experience. I wouldn't recommend this course unless you are REALLY interested in network security. The projects were intriguing and they complimented the professor's video lectures and research papers very well. As long as you read the papers and watch video lectures prior to reading and coding the assignment, you should do well. It's definitely an informative class that opens security awareness. Topics like malware detection evasion and botnet infrastructures and takedowns are very important for the security community to pick up on. I would strongly agree with one of the other comments here \"Projects didn't tie in much with the lectures and lacked a lot of clarity, but were enjoyable\". This nicely sums up my experience with this course. \nThe projects were well balanced between being exciting, very cool and the same time posed a little bit of challenge once in a while. The course work along with the projects took a good 10hrs per week which included a quiz that was posted every friday covering the lecture material for that week. \nThe weekly quiz ensured that we were also up-to-date on the lectures so if you planning to take a week off during the course, you might need to plan that a bit. Overall the exams and the quizes were easy, but. the exam being a closed book covering the entire semester, posted quite a bit of challenge getting though all the material before the exam. How are people thinking this class was easy? I didn't rate it very hard because I save that rating for 6505 exclusively, and my idea of medium was 6310. Easy for me were 6440 and 6300. It took a considerable amount of time to do this classwork each week, and I get why we are given two weeks to do the assignments. It's not easy, don't let the 2. 4 rating fool you. The topics many of us may know tangentially are covered through application in these assignments, so two weeks to learn theory and apply it at a mastery level isn't much. I don't mean the theory they're teaching, I mean the theory required to complete the assignments, which is completely different from Network Security. I think the course covers a lot of great materials and some of the projects were insightful but I was disappointed to find that the Projects at times provided no instructions, at times were graded in an arbitrary fashion by TAs and required an awful lot of time (one of the programming projects required nearly 30-40 hours a week if you have beginner or intermediate programming experience).  I have to really highlight that NO instructions were provided.  For example in one of the projects we were required to utilize a well known security tool and you were graded on your implementation of that tool, but no instructions or examples were given and that left some students wondering why they didn't just invest the money in taking a class to learn that toolset from another provider.\n\nIn my case I had to drop because of the time commitments (I work 40+ hours and run a business on the side) and because after getting As on other projects and assignments I received a terrible score on one project and could not recover.  Unfortunately, although I had put in 60 hours of work in and I could demonstrate the logic in my code was correct and met stated requirements, the TAs provided no credit on account of how they expected it to function (requirements that were unstated and undocumented).  Truthfully I received so little feedback and so few instructions that I withdrew in part because I realized I would learn more with my time and money spent elsewhere (ex: CCNA).\n\nAlmost considered dropping the program altogether (I felt the University misrepresented the coursework as something you could maintain with a full time job) but I decided to try another class and see how it goes.  I am also considering leaving work for a couple of months and may attempt the class again during that time.\n It was a great course in fact. I got exposed to several varieties of projects starting from browser security to network level, which I would not have come across in my 20 year career in IT development field. I became hands on in Python, especially in Data Structures. Course was pretty hectic with 6 projects, 10 Quizzes open book and 1 final all closed exam. TAs were very active through out the course. I meant literally they were very responsive to every question that I have posted. Coming to preparation part, I went through all the videos twice. There were many papers to read. Best part was each of those important papers were precisely explained in Udacity videos except Professor's dialect :) I listened to the videos and read the papers. Quizzes require reading. Projects were really awesome. I did all the projects very well. I was able to relate the practical aspect of the Network Security via projects. One project was really challenging one. I had to scan the whole world wide Internet using university supported infrastructure and processes. The last project was really cool. I had to read the research paper and implement the python code to evade the Intrusion detection itself. I also got good reading material for Bit coins. On down side, auto grading kept me in tension till l last minute.. Also, many fellow students were appeared to be super smart. They were also very helpful. I needed to be on Piazza & Slack up to date. At the end, I realized, Security was really mindset. Overall, TAs helped me to complete the course successfully. Now, I am looking forward to the next course. Network Security was great!! I think that of all the OMSCS classes that I have taken this one is the most important for those who work in any form of capacity with networks or web applications. It covers a good number of the bases. Plenty of decent reading for students and you are free to make it as difficult and thorough as you would like to. It could be very challenging though for those without much experience in the areas of network or web application security. I am a full time Senior Network engineer and do security work on the side so this class was right up my alley. It was one of the easiest out of the 7 classes I have taken so far. Only a few hours of work a week. \n\nLike others mentioned there are only 4 projects that make up your grade. They are not too difficult and do not take up much time. The first is doing a frame busting exploit and creating a Chrome extension/exploit with Javascript. I have never used Javascript before and found it easy to Google what I needed. Youtube videos helped with creating the Chrome extension. \n\nThe second project involved doing malware analysis using some command line tools and Wireshark while running malware in a VM. If you have not used Wireshark you can find some how to Youtube videos to show you how to find data in packets. \n\nThe third was doing some more packet analysis with Wireshark and writing firewall rules using IP Tables. This project along with the first two took less than 10 hours each. \n\nThe fourth was implementing an exploit in an IDS by modifying some Python code. This one took me the longest to do of the four (about 15 hours total) but ended up only being less than 20 lines of Python. Most of it was trying to make sense of what the exploit was doing from reading a couple white papers and figuring out how to code it. \n\nWe had the option to either take an optional final exam or complete and extra assignment for 10% extra credit! You could choose 1 of 3 projects. I chose one that was an extension of the second official project in the class and only took me an hour and about 4 lines of Python code. Another one that looked interesting involved doing a port scan of the entire IPv4 address space for vulnerabilities. \n\nIf you liked the IT Security class you will like this one. The professor and TA\u2019s were very helpful. It is very similar in workload and content and very easy. I haven\u2019t got my final grade but I would guess ending up near 105% with the extra credit. I really enjoyed this class. As someone who entered with no background in security except for CS 6035, this class was very challenging but also very rewarding. I really hope additional security classes and a specialization can be developed before I graduate. For new students prepare by knowing python. You will also be using a Virtual machine so knowing how to setup file transfer between host and guest, basic Linux commands and bash will save you time. The negatives were \n\n1. There was no word from the assigned professor the entire semester. \n2. All but one TA was consistently responsive. This class was my ninth class in OMSCS. I paired it with Graduate Algorithms. I found the beginning of this course to have a lot of overlap with Intro to Info Sec. After the first month or so it the content did branch away from Info Sec. This class is structured very similarly to Info Sec. Mainly project based. Final exam. Quizzes. I found the projects to be pretty easy (usually finished them in a day) but very insightful. I enjoyed learning from the projects. The lectures were harder to learn from. Just like Info Sec the professor tries to teach too much in every video - makes it hard to focus. Plus, I never found a connection between the videos and the projects. The quizzes and videos quickly begin to feel like busy work. I think this class would be better if it had one more project and dropped either the final exam or the quizzes. During the semester I took the class we had a month for the last project. So this would be a good class to pair with another class that has a lot of work towards the end of the semester. I also wish the TAs would have graded things with a little more care. I had to submit regrade requests for every project. Also, the project's instructions were really hard to follow sometimes.\n\nOverall, a good class if you are new to security. Probably easier if you take Info Sec first.  The content of the course seemed interesting, and I believe that Dr. Lee probably would be an excellent and knowledgeable resource, if available.\n\nThe TAs had poor organization, and frequently provided updates to the project instructions as errors or inconsistencies were found.\n\nThe suggested background knowledge (Java / C) was inapplicable, and instead the course required Python and pretty in-depth web programming ( JavaScript / Asynchronous Interactions w/ HTML ) knowledge.\n\nThe course policies changed mid-course (e.g., Quizes were 'take as many times as you like' to 'single pass' part way through).  The authors of the final exam used vague words (many, often, relative comparitors) for multiple choice and true / false questions which seemed VERY nuanced and specific (e.g., referencing 1 of 20 attacks studied in the course to remember a single facet of that attack) without access to any notes, etc.\n\nDirect questions to the TA (non-complaining) were not answered, projects and grades were generally released late. I really wanted to like this class because I was very interested in network vulnerabilities and zero-day attacks. I watched all the lectures, did all the assignments, and tried my hardest to gain some value from the course, but it was pretty futile. The professor is completely disengaged and unfortunately, the main TA this year was pretty rude and unforgiving to a lot of people who asked questions on Piazza. I would rate this course a Very Hard in terms of understanding what is actually expected of you, but Easy in terms of actual content.\n\nHonestly, the assignments were not challenging as long as you read every single Piazza post, even if there were dozens. Because I did not do that and just did the assignments as outlined on the assignment description (generally taking around 10 hours for each assignment), without fail, I would receive anywhere from 50-70% on every assignment, and then be forced to request a regrade and claw back points. Every regrade gave me 20+ points, so they are definitely worth it, but it is an absolutely ridiculous process if you think about the effort TAs have to put in to basically grade everything twice because they were not explicit in the assignment instructions the first time or their autograder was just wrong. \n\nYou would think since this class is so poorly managed, that you would be allowed to ask clarifying questions on Piazza, but after one TA repeatedly responded in a downright rude manner to anyone's innocent questions, I decided to forgo that strategy and just rely on the obnoxious regrading requests to get an accurate grade.\n\nAlso don't expect the final to be any less vague or subjective than the quizzes you do all semester. It had many typos, many ambiguous or contentious answers, and was hands-down the worst final I have taken at OMSCS (disclaimer: I have only taken 3 other finals). If you really want to learn network security, just buy the Hacker's Playbook and skip this course. This was my second course in the program and I took it as a continuation of Computer Networks (which I really liked). I thought that transitioning from CN (which touches on network security) would be beneficial and relatively smooth. My conclusion: This class needs a lot of improvement to be on par with the rest of the quality classes found in the program.\n\n**Structure**\n\nThe class is heavily based on projects (5). Additionally there are weekly quizzes (10), and a final exam.\n\n**PROS**\n\n* Topics are interesting and relevant to today's \"cloud\" environments.\n* Projects are engaging and provide opportunities to practice hands-on learning.\n* Piazza was very active and students were very engaged in discussing the presented topics.\n* Helps you appreciate the importance of network security.\n\n**CONS**\n\n* Professor is completely absent from the class.\n* Video lectures were often too shallow to really describe the topics.\n* Project descriptions and write-ups are confusing and often contain grammatical and spelling mistakes.\n* Only one TA is very actively engaged in the discussions, while the rest are often MIA.\n* Grading mistakes were made that required regrade requests.\n\nThe saving grace for the class is that the majority of students are smart and experienced technology professionals who are able to provide thoughtful discussions throughout the course. However, as it stands I can't recommend this class. The content of the course is very interesting and worth learning but the delivery leaves a lot to be desired.  Taking this class in the summer might be a different experience from regular semesters. The class is run by the TAs, most of them very engaged with the assignments on Piazza and Slack. The content is interesting and timely, we were studying malware by the time wannaCry was released!, The assignments are not complex but some will challenge you and will ask you to think\u200b in more creative ways to achieve results. As constructive feedback, this class needs a better video format, it's basically the professor reading the slides, and make the auto-graders a little smart, you get a lot of deductions that will weight in your final grade, because of trivial problems like file names and spelling. If you have to major in Networking, then you can stop reading this review. If you don't, this is a very badly run course. Here are the reasons why you shouldn't take this course.\n1. The lectures are extremely dry. It's like Prof. Lee has taken a text book and simply read the contents on there.\n2. The lectures are simply a mish mash of materials. Just a bunch of concepts thrown in.\n3. The TAs are not very active. The ones that are provide confusing and sometimes contradictory answers. \n4. The project writeups are mostly poorly written, requiring lots of clarifications from TAs. Almost all projects (except the first) had lots of clarifications, some coming as late as  a couple of days before submission. So if you are the early bird types, forget about submitting early.\n5. There is no autograder you have access to - no way for you to know if you've made a silly mistake in your project. Given that it's binary grading (you either get all points for a section or lose it all), you simply are out of luck if you made a silly mistake. Especially if you made that mistake early on, you basically get a 0. \n\nMy advice is to stay away from this course. I feel like I wasted an entire term and learned very little.  This was my 4th class in the OMSCS program, and I took it as a standalone class this semester. This course is a followup to Info Sec with the same instructor and same style. There were 5 projects, a midterm, and a final. The lectures felt very fast-paced and covered a broad subject at a shallow level, so it was hard to actually learn much from them. I agree with another student that the projects were somewhat disconnected from the lectures. Some of the projects even felt like they really belonged in Info Sec - as if the professor didn't accomplish everything he wanted to in that class, so he's using Network Security as a place to put the overflow. The professor's involvement in the class was minimal - I was active a few times in Slack, and often on Piazza, but I never saw any activity from Prof. Lee in either place, which is disappointing. The class was instead run (somewhat haphazardly) by TAs. The quizzes were poorly or ambiguously worded, sometimes such that there was more than one technically correct answer. Project writeups were often filled with errors or inconsistencies, which had to be resolved on Piazza, and unfortunately made the projects a bit harder to tackle since it was hard to distinguish parts you didn't understand from parts that were just wrong. Project skeleton code had typos that made one wonder if the TAs had actually tried to run the code before publishing it. The autograders were also poorly written, and many students (myself included) had to request regrades for one or more projects due to autograder issues.  Overall, could be a good class with interesting material, but feels poorly executed. Easy if you know basic python. Lectures shallow and don't really cover the material in detail. Projects changed from time of release until deadline.\n\nStill I enjoyed the course since I've got a lot of interest in network security and had very little knowledge of the subject when I started the course. This is the worst class that I have taken with OMSCS so far.  The lectures are shallow and not explained well.  Its clear the professor was just going though the motions to get the material out.  The professor was completely absent from the class, not one appearance.  The administration of the materials was (poorly) handled by TAs.  I gave a medium difficulty rating, but not because the material is hard.  The difficulty is navigating the twisted, convoluted and sometimes contradictory information given.  I would not recommend this class.  GATech needs to redo the class with a prof that cares about the students. I learned a fair amount in this class, but I agree with others that it was fairly easy. You could probably do all the quizzes without even watching the videos. The homework assignments weren't too difficult, and pretty interesting. I didn't take the Intro To Info Sec class as a prereq, and had no problem with this class (for those that might consider doing the same thing). I thought the piazza interaction was good as well, and grading turnaround was pretty good. in fall 2016 there were no exams and the projects were super interesting. there wasn't a lot of additional reading other than for the completing the projects. This is one of the first courses I have taken in OMS. I'm not sure whether I would recommend it as a first course for other students or not (if you have some sec. background it might not be too bad). Most of the project writeups have been quite confusing, and in many cases (for 3 out of 4 projects so far) the TAs have had to make major updates to the projects and/or requirements the while the students were working on them. We have also had some serious issues with autograders this semester that have caused a lot of headaches for students and staff. Fortunately, when issues arise the TAs have been pretty flexible and understanding for the most part. Some TAs have been much more responsive and helpful than others (shout-out to William Lucas for always being helpful on Slack and Piazza!), but overall I get the impression that there isn't a lot of communication amongst all the TAs. The content and the projects are a lot of fun and super interesting though and I have definitely learned a lot! I took this course along with Intro to Operating systems and ML and eventually dropped ML after mid-term. My comments are mixed. First of all this is a graduate course, some topics on computer science are vague and does not have formal algorithms or proofs to learn from, this is one such course. You will apply your computer science skills on this course, so like others mentioned here lecture videos are shallow, skimmed through and covered lot of topics.  If you are research oriented, curious to dig through then this course is for you.  Its overwhelming to do 10 quizzes, 1 final and 5 projects. If you are new to security you will spend lot of time like me but in the end you will feel that you learned something from projects.  Initially i had to juggle 3 courses, so i ended up blowing up on 1 assignment which had a big impact on my grades. TAs were very comfortable on regrade requests and did their best. It appears that materials have changed from past semesters, so if you are new to computer security and expect to learn from course videos and apply it to projects, you are not going to like this course. Its true that professor did not show up but i doubt that it would have made any difference due to the nature of the course. If you have hacking mindset and willing to dig through and learn on your own then you will enjoy this course. Don't assume this course is going to be easy, be prepared to put in solid effort if you care for good grade. In terms of programming language, this course needs some understanding on C, javascript, html, python and firewall rules Not easy. Not very difficult. Interesting projects. Definitely not just 5 hours a week. Twice that. \nAdvice: Practice python, and get used to Virtual box (sharing drives, resizing disk spaces, etc. - Ubuntu, Debian) Also unlike some other posts, I liked this class. While it isn't a difficult class, I thought is was challenging enough and really required you to learn a wide variety of topics related to security. It is a lab/project driven class, so you will spend a lot of time working on projects. If you complete all the assignments and take the extra credit test, you should get a good grade. The lectures are simple and short, but it you really want to learn a topic you will need to complete the readings. While it did suffer some \"new class\" organization issues (it is only the second semester offered), it looks like the professor and TA's are really working to clean up these issues. Overall I think it is a good class to take, especially if you are looking for hands on experience in the network security area. CS-6262 is my first course at GaTech (online), and the course was disheartening. I was very motivated and wanted to excel. I watched every single weekly video and read all suggested materials. I took many notes and was very serious. However, this course is a complete pleasantry. Let me explain.\n\n1) The weekly videos are someone reading the slide without giving any content. The slides are extracted from whitepapers and mostly just the first paragraph of each subject. The videos do not explain; they give outlines of many topics.\n\n2) Each week has too many covered subjects. It's tough to understand everything with the lack of material. Whitepapers are not clear, long to read and a lot of additional web research is required. Videos took me about 1h on average to consume and white papers about 10h. The remaining time was invested in projects.\n\n3) Projects are not related to the lectures. In fact, the projects cover one topic of about 30 discussed in the three weeks the project cover.\n\n4) TAs only answer project answers. Several questions about whitepapers were never answered.\n\n5) Projects are not well constructed. Lots of information are given during the timeframe of the assignment making people working late on the project with a considerable advantage. Some projects requirements were written over +70 PowerPoint slides.\n\n6) Quiz answers are all available on Internet. \n\n7) Final tests are made to trick you. Many questions were related to a subject seen, but the question was touching an area not covered by the lecture. You had to know about the subject deeply to answer. The final exam had many errors (English and structural).\n\n8) Projects worth the most in this course. 5 of them took between 20 to 45 hours to complete. Spread over 2-3 weeks per project it becomes a burden with the whitepapers and videos. The two combined explain why I have an average of about 22 hours per week.\n\n9) Prof Lee is entirely absent from this course. The TAs are doing their best, but they are swamped by assignments questions which prove the lack of cleanliness as well as the disconnect between the material and the projects.\n\n10) They mention buying a book (200 pages). After reading half of it, I realized that it was a waste of time and money. There was a single page that was barely usable for a single project. A student asked about the book and no TA, neither the professor answered about how important was the book was for the class.\n\nIt was my first course, and if GaTech is running this way, I'll stop. The quality is deficient of this course, and it is evident that there was no real intention to teach anything else than cramping a lot of subjects in little time to make it hard. I do not see the point. I put the difficulty to hard only because of the lack of cohesion between the assignments, the lectures and the project. The content is not hard per say, but it is built to make you fail. This class consists of 4 assignments, each worth 25% of the total class grade each. As a bonus, there is an optional project and final exam worth 10% each, but only one of them counts towards your grade. There is not currently much reason to watch the lectures exept to prepare for the final exam, however I personally think they may add some tests/quizzes to future runs of the course. \n\nThe 4 assignments that are all very different. \n\nThe first targets \"advanced web security\". You write code to exploit a fictitious website and also write a Chrome plugin to guard against certain exploits. I found this assignment quite fun. \n\nThe second assignment involves running malware on a VM and examining how it behaves. The entire assignment can probably be done in a single (multi-hour) session. It was quite easy and somewhat interesting. \n\nThe third assignment involves writing IPS/IDS rules using snort to classify network traffic as malicious or benign. This asignment was the most difficult for me and it seemed to cause issues for others as well. Writing snort rules was not particularly hard, but the way the assignment was presented was pretty vague. After prodding the TA we were given some, but not enough in my opinion, additional information. In particular, we were asked to write rules \"with a long shelf life\". There was some comedy here when some of the \"benign\" traffic that was sampled included browsing an adult e-commerce store. Somebody complained and they issued alternate traffic to analyze for those who were offended. \n\nThe last assignment was somewhere between the first and second in terms of effort and required using an ML toolkit to analyze network traffic. Most of the code was provide to us, but it does take some time to figure out how things are setup. The most difficult part of this assignment was implementing an algorithm that was laid out in an academic paper. \n\nThis class is a decent option to fill a Computing Systems concentration requirement. I don't know why so many people rated this class easy. It was not. It took significant work effort. If you have a fulltime job (60 hours per week) and a family with children, this is about all you can take in a class. I had to drop my second class. That said, what you learn is tremendous. This is totally worth the effort. Recommend you take Computer Networks and Intro to Info Security first so you have the right background. Unlike others who posted comments here, I liked this course. Yes the lectures can get boring sometimes due to the nature of the material. But, the readings are great if you have time to read them. The topics are relevant to today's cyber security environment and also covers recent research in this area. Some papers go really in depth in the topic like how DNS works, etc. You also learn to use machine learning to check for network anomaly and then to bypass it which is cool. Assignments can be annoying since they require specific answers to the questions. Some assignments took more than 40+ hours to complete due to this. I suggest instructors to make the assignment more flexible and grading flexible too. If you want to learn in this course you will (provided you do the readings and assignments) and if you want to just pass it you can (but may not learn much!) Fairly good course as far as work load and interesting projects go. The information presented in class doesn't really apply to the projects but they're do-able using google and occasionally TAs for some guidance. The TA was pretty harsh this semester but there were also a lot of ups and downs with students so I sort of get it. Instructor was non-existent. Exam was hard at the end just because it was over ALL class information and was very short the questions felt random and it was easy to feel unprepared. However, I still feel like I took something from the class (especially the projects) and finally at least 50% understand bitcoin. PS - Project 2 sucks, just ride it out, the rest are fine. This class had some issues for a first run, but ultimately was a positive experience, especially for those pursuing computing systems specializations. The problems were mainly with pacing of the course and specifics with the project details. There were many dead spots throughout the semester and the projects had evolving instructions / descriptions. I expect these issues to be worked out in subsequent semesters. For those who have taken InfoSec, This course is VERY similar. \n\nLots of opportunities for extra credit, some of the projects are reminiscent of Info Sec as well. The class was project based, with each of 4 projects worth 25% of the grade. Up to 10% extra credit was available through an additional project or PT exam. Overall fairly easy to score very well provided you don't biff more than one project. \n\nProjects focused on web security (similar to InfoSec, JavaScript), network based malware analysis (also similar to InfoSec), Network Monitoring (used Snort and Wireshark) and using ML techniques for anomalous traffic detection (no previous ML experience required, Python). \n\nThe slack study group and other students were particularly helpful on Piazza, and the Teaching staff did what they could to help students and generally were responsive and helpful. As is becoming the norm, the Professor was less present as Prof. Lee now has multiple classes running here in OMS as well as the terrestrial requirements at GT. This did not present a problem. \n\nThere is no required textbook, but taking InfoSec first is listed as a pseudo requirement. While it will make your life here very very easy to take Info Sec first, you can probably get through it without doing that if you have a CS background and have ever dealt with security in a job. \n\nOverall I would recommend taking the class. Well done, and plays well with other classes (in its current incarnation).", 
    "CS-6263": " The class topic is very cool. The projects are good for learning about the Industrial Control System Environments. What makes the class more difficult is that there are only 5 gradable events. There is a midterm that had 19 questions total. (I mean, miss 3 and you are at a C-), and 3 projects, plus a Final. The questions on the midterm were somewhat ambiguous which left me very nervous. I liked the first project on Ladder Logic. The Second was Modbus, and I ran out of time because of conflicting project schedules with CS6262 Network Security. I ended up having to drop this one here in the Spring, but will look to redo in the summer. It is a good topic, but overall, I wish the exams had more questions so it had better coverage of the material and less \"gotcha\" ambiguous questions. And actually, I wish there were more projects too. Some parts of the class go a long time with simply reading a chapter and watching a lesson. Even smaller projects would be good here and cement the material. this is a good class, it provides good lectures, good books and reasonable projects. the issue is that the exams which represent 50% of the final grade are short multiple choice / true & false. The material is interesting. the semester didn't provide an active piazza or slack channel. So it's really about keeping up with the class. Office hours weren't recorded which is a definite bummer if you do work on the program late at night. As others have stated, this is a bad course, and the worst security course in OMSCS (I have taken all the other ones before this). The professor clearly doesn't put any effort into the class or the tests. The projects are hard to interpret, but not too bad once you get past the setup time. \n\nThe real issue I had with this class were the tests. They are about 20 multiple choice questions that are terribly worded with answers that all make sense depending on the context that you do not have. Its more or less his opinion really, so you have to spend a ton of time trying to figure out what he believes is the best answer and not what is actually the best answer. \n\nTAs were good. They had to deal with almost all aspects of the class because the professor was non-existant but they did a good job with that overall. I strongly recommend not taking this class, even if you want an easy A. Its not worth the time or effort you will spend. An easy but rewarding course. The projects are perhaps a bit too easy, but I found the material and reading itself very rewarding. Gives me a new perspective on talk of 'cyberwar' in the news. I would strongly recommend reading the academic papers assigned - although they weren't so relevant to the projects/exams, they were sometimes far more interesting than the textbooks. \n\nMy only complaint is easiness of the class - some of the projects definitely did not feel rigorous, especially in their programming component. But others may disagree, just my two cents. \n\nOverall, I would recommend this class, but definitely as a second class in addition to something else more challenging. Overall, a good class. Yes, the lectures and books were often repetitive and some rote learning was involved. And yes, the professors and TA's weren't very active on Piazza. But the material was interesting and you get the understanding about what makes cyber security different for embedded systems versus general purpose systems. In contrast to what a previous reviewer said, when the professor said \"I won\u2019t debate you further. However, for the other students reading this, my statements were correct, \" I thought it was great. The student was arguing for the point of arguing on the Piazza forums, adding unneeded contention. And I didn't really see any other students surprised or \"roiled up\" by that comment. Anyways, back to the class itself. Enjoyed it, and wasn't a bad class to take during the shorter summer semester. The instructor (Raheem Beyah) keeps his syllabus on his website at\nhttp://users. ece. gatech. edu/~rbeyah/classes/fall2016/cs8803/ (substitute your term as appropriate)\n\nGrading summary: \n2 projects @ 25% each\nMidterm & Final @ 25% each, via ProctorTrack (T/F, MC)\n\nProject 1 was PLC ladder logic programming\nProject 2 analyzing ethernet traffic and using Python to inject bad commands\nProject 3 researching vulnerable devices\n(All projects are individual; no group projects)\n\nPace is slow, so a great class to take along side another. I'm taking CS6035 concurrently. This class does not require CS6035 as a prereq - it can stand on its own. The content is interesting and worthwhile. There haven't been any office hours, but the TAs and instructor monitor Piazza well. Granted we only have ~50 students in the class during its 1st run. \n\nEdit: updated review after finishing the class Overall a great class! It has some issues, but fortunately they are ones I think will be resolved in future iterations of the course. \n\nThe course stands alone very well, and covers the necessary background material needed to be successful without needing to take other classes. If you have taken CN, InfoSec, and NetSec, you will find much of the material to be review. What is unique to this class is how this pertains to the realm of cyber physical systems like Programmable Logic Controllers, and how these devices are used in a conventional industrial plant. \n\nThis semester the course had 3 projects, each taking between 5-8 hours to complete. Each focused on it's own area - Ladder Logic Programming, Industrial Protocols, and exploiting vulnerabilities in CPS. There was a one hour midterm consisting of multiple choice and T/F style problems. I have yet to take the final, but it is 3 hours long, has a similar format and length to the midterm, and is comprehensive. We are permitted to use a single sheet of notes for the tests. \n\nThe material spends a lot of time focusing on definitions of terms, policies, and best practices. It uses common terminology, so much of it will be familiar, just applied to a new realm. The videos are high quality, easy to understand, and you can tell Professor Beyah was well rehearsed and polished for their production. There are a few moments where I felt like I was watching the Turbo Encabulator video, but it wasn't too terribly distracting. \n\nThe course also has some pacing issues. With only three short projects, straightforward material, two tests, and ~50 students this semester we probably won't get higher than 300 threads in Piazza. I think the inclusion of meatier projects / more projects is likely to occur, and would benefit the class. \n\nIf you are looking to prepare for the course, you could learn Wireshark if you don't already know how to use it, and potentially buy the books in advance and do some casual reading. I almost never write reviews for courses, but this one is so terrible that I wanted to make sure to warn people. The subject matter is dull and the lectures make it even worse, there are two 'required' books which I never touched, the TAs/professor got combative with people in Pizza on a few occasions, and there was almost no interaction at all.  I mentioned the books.  I never once opened them, but I got an 'A' in the class.  I've no idea what is in them, but clearly it wasn't needed.\n\nBy far, the best part of the course are the projects, but that isn't much of a compliment.  The things are terribly designed, require janky industrial software (seriously, why is industrial software so terrible), and have unclear requirements.  Once you've figured out what you are being asked to do, however, the projects are simple and can be finished in an hour or two.\n\nBeware the exams.  They are easy (like 5-10 minutes easy), but there is often misleading wording to questions.\n\nIs this an easy class?  Yes.  Does it require much thought or time?  No.  Will you still be sad you took it?  Very much so.  \n Fairly simple, but assumes a moderately broad basis of knowledge. A little programming would help, and a fair bit of information security, and a bit of networking. If you have that, it's a short time commitment for several assignments and two exams. It was nice that it was fairly new material. One of my favorite classes, and I learned a good bit despite it not being labor intensive. Had A's straight through, despite doing the assignments entirely later than I should have.", 
    "CS-6290": " I took this course but dropped at the drop date due to the fact that I was also taking another course. Well for the part I covered (about 55%) the course per se is not extremely hard if you strictly look only at the concepts, what makes it hard are the projects and the exams. In fact even the projects are not too hard, it is the exams I found to be particularly different from all other courses. The exams only have problem solving question with some heavy arithmetic. A lot of practice with formulas is necessary. You not only need to know your formulas but the questions will wrong-foot you at every turn. Hardly in real life we get situations where one has to do HPCA arithmetic within a quick turnaround time. And that is what this course's exams are about, doing HPCA arithmetic within allowed time constraints. Well I am not saying the arithmetic is not important but the course turns it into something like a race at Olympics which I think is not necessary. I would say that if you know your formulas well you can do very well in this course sometimes even if you don't understand the concepts well. In fact a high school student can be taught to use the formulas effectively and be made to do well in this course's exams. I did not like the fact that the course's exams only focus on arithmetic even though it is at a graduate level. Great course. I have no background in computer architecture before, therefore It's could be hard at the beginning. But if you got through the course, you will definitely learn a lot a lot. The grades for both project and exam are very generous, I got overall 98 at the end. The leader TA Nolan is awesome! He is the best TA in this program I have ever seen.  This was my first class in the program. While it wasn't a subject I was initially interested in, I learned a lot and had a good experience. The lectures were very clear and well paced. The exams were very much in the spirit of the lectures and were not difficult, although you should study for about week in preparation.\n\nAdditionally, the main TA, Nolan, was incredible. He was very attentive, caring, quick to respond and knowledgable. I was surprised by the amount of collaboration and camaraderie among the class. The other TAs were almost inactive (as far as I could tell. May have done things behind the scenes), however, Nolan was so good it didn't matter.\n\nThe only thing that could be improved were the projects. Each project was essentially running a simulated processor with a test program, tweaking the inputs of the processor, and seeing how it performed differently. Then, there would be a code section were you alter the code of the processor and see how it performs.\n\nThe first section taught me a lot about processors, however, the code portion was more tedious than informative. This is because the simulator is a huge C++ code base that is somewhat poorly written. Most of the time involved in the projects is trying to understand what the code is currently doing. The feedback loop is also very long because running the simulation normally takes about 30 minutes real time.\n\nThe saving grace here is that the TAs allow you to compare results on _a simulation other than the one for the project_. So you can know for sure if you have the right answer.\n\nThis could all be mitigated if the instructions gave you more direct guidance. \"Edit function, foo, so that it does x instead of y.\"\n\nOverall, though, good class, great TA(s). although it is not a easy course, I find the projects helpful. they projects are not very related to the course materials, but rather a complement. The course videos are very good, covering a lot of concepts, and the instructor did a great job explaining abstract concepts very clearly. The videos are one of the best course videos I've seen in OMSCS. (I've taken 8 courses so far) Overall the course is good, lectures are meaningful, up to date with current technologies and Nolan as a TA was awesome. However the work on projects are tedious and time consuming. The projects are not stimulating at all and I had a hard time bringing myself to doing it. Overall, if you pace yourself properly (and not keep things for the last moment), it is not a difficult class at all. Make good notes throughout the course and keep it handy during exam. Professor allows the notes to be used during exam and it will help you give pointers to solve problems. The thing that sucks the most about this course is that you don't really know how you are doing in it. When we took the final we only had 30% of our overall grade reported back. I decided to jump into this program with both feet, taking 6210 and 6290 in my first semester. HPCA was an incredible class and I learned more about computer architecture and optimizations in this class than in my entire undergraduate program. The projects could be hard or easy, depending on your skill with C++, but the grading is fair. I ended up with an A, mostly because of good project performance and spending a solid day before the final working through all the problem sets again. I agree with the other commenters, Nolan was awesome! The Pros -- Course material is great - videos are interesting, funny, and full of content. Minor supplemental reading helped flesh out some of the more challenging topics. Learned a tremendous amount in a quick time. \n\nThe Cons -- the embedded quizzes have frustrating errors at times (typos, looking for specific formats of values, accept only an incorrect answer). Some videos appear missing or incorrectly ordered. \n\nThe Major issue -- Piazza interaction with the professor & TAs was very limited. Office hours were cancelled for a few weeks, then disappeared altogether. Logistics around projects and exams were poorly communicated. \n\nOverall -- great content, but be prepared to learn it with you and your fellow students. Very limited ad hoc teaching support.  Very good course, lecture materials supported the projects. Professor was engaged and the TAs were responsive. Overall a good starting course for ML, though the domain is Finance. Be careful about the projects. Start early because some of them can be tricky. The \"Manual Strategy\" and \"Strategy Learner\" projects are difficult and should be allocated proper time. Challenging yet very rewarding course! Be warned, do not take this if you don't have some OS knowledge or C++ programming experience; the course knowledge is very dense/broad and you will be playing catchup to understand the concepts if you do not have the sufficient background. On the other hand, the course was relatively easy in terms of grading, the exam is way less overwhelming than the actual material taught. The projects require you to understand the concepts and make less than 200 lines of code changes(I think we were required to make changes to less than 8 C++ files total. )\n\nOverall it was a very interesting course imo. Worth taking if you are interested in how modern computers are optimized. This was a pretty great course. The lectures are well done, and the tests were straightforward. The projects were on the challenging side, but not because the concepts themselves were difficult (though they aren't a cakewalk either... ). The main challenge in the projects is development in a simulator that is old, *very* poorly documented, somewhat nebulous, and doesn't seem to follow a coherent design. That being said, it isn't really a problem, just time consuming. \n\nI took a similar course in undergrad, but this class goes more in-depth into actual algorithms and designs, and peels off several layers of abstraction to get into the core of CPU architecture design and theory. I would definitely recommend it, but do be prepared for the projects! Amazing course! Excellent video lectures. Haven't learnt so much in a long time. Prof. Prvulovic's explanations left very little doubt on almost all the topics he covered in the lectures. I have them all downloaded & can keep going back for reference. Although a more active participation on piazza would have made the learning experience even better. But, having gone to a college here in the US for my masters' I know it's almost not possible to get full attention of a Prof all the time... \nPerhaps some homework assignments would have helped improve the understanding even better (& helped in the midterms :)). The projects were interesting and were useful in applying what we learn in the classes. There were lot of complaints about the SESC simulator code in general. Its very understandable that the code is in that state having changed so many hands. Don't have much to complaint about this course in general. \nOverall experience with the course has been very satisfying. This is a very hard class, but in my opinion completely worth it. Don't let fall behind on the lectures or cram everything into a weekend, it will be your downfall. The professor was active for the first half of the semester on Piazza. We had a really great TA that was active in answering questions and clarifying any material we've learned. Please review your C++. It wasn't too bad but having some background on C++ will help you be ahead in the coding projects. Overall I loved the course, even though it was difficult.  For the most part, I really enjoyed this class and the labs. My problems with the labs were twofold. First, the emulator used in this class is poorly documented and has weird behaviors that have to be taken into account to get correct results. Once I understood (read: got burned by) this, I spent more time in the projects trying to make sure that I didn't misunderstand how the emulator worked than I did actually doing the lab. The second part was that it was really hard to get a feel if your lab results were expected. It is structured so that you do the work and analyze the results. I ended up analyzing the \"wrong\" results and got double penalized (see point one). The TAs try to help with this, but they can't just come out and say whats wrong, so make sure that you read everyones notes to the TAs regarding the labs. There may be something there that is relevant to you, even if the post's title doesn't seem that it will be. This class is hard, but you will learn a lot. Hands down, this class has the best lectures of any course I've taken. \n\nThe projects revolve around a simulator whose source code is old, defunct and hacked together by a bunch of academics. On the surface it looks incredibly hard, but you only need to change a few lines here and a few lines there to get it to do what you want. They'll tell you which source files to look at. I found this experience of reading other people's source code helpful, now that I have a job as a maintenance programmer. Use a buddy for the project if groups are still allowed. \n\nThe tests were hard, but not unreasonable. Study and you'll be fine. \n\nWe had an issue with one project spec (the required IPC was not attainable), but the Prof gave us a few day extension.  I was able to manage this course with no professional programming background. But you need to spend a lot of time trying to understand the code in the simulator for the projects. I think this code is basically written by hardware folks trying to get the job done in software, which is effectively what the simulator is simulating, a processor. I think the intention of the instructor is to have students spend time on understanding the code rather than give it to them on a platter with comments. If you nail the project 1, the others are just a breeze. Once you understand the flow, actual implementation should be fairly straightforward. Lectures are just awesome. Mid-term was hard mainly due to lack of time, 2 hours is not sufficient. Final was easy even though it was comprehensive. Solid class.", 
    "CS-6291": " Enjoyable course, we got to look under the hood of compilers and learn about different optimization techniques as they apply to embedded systems.  The projects were time consuming and interesting.  My only complaint is that due to the nature of the projects they took a long time to grade so we didn't know about 75% of our grade until the week of finals.  But everything was graded fairly and carefully with good feedback so all's well that ends well I suppose.  Looks like this is the first review of the course, but it's just because it used to be 8803 - see the one with embedded in the name for some relevant reviews. \n\nI really liked the course, and a lot of it had to do with the main TA's involvement on Piazza. The assignments are pretty straightforward, and the projects are not too bad as long as you get ahead on them and don't wait until the last minute. Exam was meh - ProctorTrack sucks but what else is new. This class was very much a mixed bag. The course material is interesting and the professor understands it well, but the lectures often were a little convoluted and hard to follow. The assignments and projects seemed a little rough; most of them were updated to include clarification/correction after being initially assigned. I believe this is the first time this class has been offered online. After another semester or two, once the kinks are worked out, I could see this being a very good class.\n\nMy biggest complaint with this class was definitely with the first (group) project. It felt like my group spent as much time trying to parse the project description and figure out the project requirements as actually complete the project. On the last weekend before it was due, we probably spent a combined 45-50 man-hours (on a 3-person team) trying to complete it and still didn't finish. I think the instructors realized that the project was more difficult than they anticipated, because they ended up grading it very generously (I received full credit even though the project was incomplete). The second project was also much more reasonable.", 
    "CS-6300": " good introductory class for OMSCS for those who are not familiar with java, eclipse, github or other tools. I had problems because my laptop wouldn't support Android runtimes, but even bombing that project had time and other projects to make up the grade. \nThe grading was a bit frustrating, losing points for having a comment without the correct capitalization. The projects were fun though.  I would say this class was really easy in the sense that it wasn't super stressful and the projects didn't feel like 'homework'. If you're looking to take multiple classes at once I'd consider doing so alongside SDP. This course is about the best practices in software development. The course is very well organized and provides a great coverage of the full-cycle of the software development from requirement collection to test-driven software development. There is no difficult concept to understand, the challenge of this course is really the follow the schedule and deliver assignment project on a weekly basis. I had no Java and Android development experience before, this course provided an excellent introduction to these two topics. The assignment for testing, i. e., white-box and black-box are really interesting. The instructors did a great job to design the individual assignment, which wraps up the important concepts and techniques of the entire course nicely. To me, the most challenging part of the course is the group project, this is partial due to the time commitment to work together with one free rider in the team. We struggled quite a bit, but in the end managed okay thanks to the generous grade given by the TAs. It would be easier for us to keep track of the course progress if the grades were released a bit earlier though. The lectures are good. For a person coming with a significant background in programming, there may not be nothing new to learn in this course, except for Android programming, if one is not familiar already. Good engagement from professor. Overall, this course was a very good intro to the OMSCS program for me, and provided an overview of software development techniques I had always wanted to learn. The Udacity lectures were informative with easy-to-grasp concepts, and Professor Orso has inspiring enthusiasm for the subject matter. This being my first course I can't compare to other GT classes, but this is easily the best online course I have ever taken. I appreciated the weekly YouTube office hours and was not required to post a mindless forum thread on a weekly basis, in contrast to my undergrad experience. The weekly workload is entirely doable if you read the instructions CAREFULLY and IGNORE your classmates' forum posts until you've absolutely hit a wall and need an answer to something in particular. Using this strategy, even while working 50 hour weeks I devoted about 4 days out of the week to schoolwork (this 1 class) and managed to get no less than a 94% on each assignment, I consider myself a software developer newbie with average intelligence. My favorite part of the course was the group project which we split up equally on documentation and coding, and I could not have asked for a better team. Having said all that, the TAs do take their sweet time on grading assignments, apparently especially if you choose to contest a grade (I did not), and I rarely saw any interaction by other TAs on the forum besides the two heads (perhaps they were grading?). There are some concepts that I would have liked to go deeper on, such as Agile, and the lectures could be updated with lessons on the currently used software. These did not manage to spoil my enjoyment of the course. This was a tough course for me having never been a software developer and knowing no java. Can be extremely time consuming. Luckily when you get teams to work with you are given teams with skills that compliment your own. I took this course while I was on vacation for most of the term and completed it with an A. \nFor someone with hands-on java programming and software development experience, this course should be a cake walk. Also, taking SAAD(CS 6310: Software Architecture and Design) in my prior semester helped skim through most of the UML/Design pattern related stuff. From a learning perspective, Android app development and testing methodologies were some of the interesting aspects. Group project got a little tricky with one member MIA but the remaining two of us were able to get the project past finish line. Lectures, Piazza and Office hours were well planned/coordinated.  After having many years of industry experience, I felt this course is very basic and assignments/projects were okay not great. Well, If you are just into software industry and trying to learn basics, this may be a good course. I've been a developer/coder for 18yrs; so the concepts that this course taught were nothing new to me.\nI didn't learn anything new; however I would recommend this course as someone's first OMSCS course.\nI've read quite a few bad reviews; and didn't experience anything like what was mentioned. \nThe projects in the course were fairly easy and didn't take me much time; but again, I've been developing for while. Useless class.\n\nAs an experienced developer, I have a lot of problems with this course and completely regret taking it. The professor read a bunch of papers in the early 90s and decided to make a class based on his naive understanding of software development. It is easy to get an A if you follow instructions closely and prioritize what the professor and TAs think is important. \n\nAlso, very much a TAs vs. students environment; I never felt like they were trying to teach us, but instead using us to make their lives easier (even though they still took 8+ weeks to grade a single homework on some occasions). I think this is because there wasn't really anything to teach.\n\nWaste of my time and waste of money. I am glad that I've taken this as the starting course of OMSCS. Overall, it is a very gentle and basic class to learn Java and software design & testing \n\nVideo & Office Hour: it is short and fun to watch. Prof.Alex is very engaged and TAs are involved with Office Hour and have been on the Piazza all the time. Thumb up to Head of TA and Erin, who are most responsible TAs I've encountered so far in my education.\n\nAssignment &  Project:\n7 Assignment\n1 Group Project and 1 Individual Project\nFirst 3 Assignments teach you to write simple Java program in IDE.\nGroup Project is to step-by-step design and to build an Android App. I think it is a good intro for software development process, including documentation, UML, test plan and even some database skill to prepare the overall structure of the app. But don't worry about you have to do it all by yourself. Highly suggest you get a better computer in order to run the android studio smoothly. It saves your testing time for quite a bit.\nI think the Individual project is a little bit easy and less practical in term software design. Though it covered the course content of black-box testing and refactoring, we didn't get to practice that on a complete software program.(It is a small command line utility)\n\nIf you think you don't have any CS background, you could take this course as the only one and first course. If you have any background in Java or familiar with another programming language, I would suggest you to take this class with another medium or easy class in your first semester or take it in the summer.\n\nEnjoy this class with good discussion and helps from classmates!\n\n\n Easy class. Take it if you want a free A. This course can be easy if you already have experience as a software developer, but it can be challenging otherwise. Make sure you brush up on Java, Android, Git, and JUnit before taking this course. All of the coding is done in Java, using the IntelliJ and Android IDEs. You should probably take this course early in the program, as the language and tools used in this course will prepare you for other courses in the program. You will be building two Android applications in this course, one by yourself and one with a team. Hopefully you land in a team with at least two knowledgeable software developers, else you will be writing a lot of code on your own. For me, starting fresh, I thought this was going to be an easy class to get familiar with the program, and I was right. I enjoyed the content very much, which was an advanced rehearsal of the software architecture classes I received in college, and the programming portion wasn't difficult at all. \n\nThere was a lot of documentation to write. You need to be ready for it and feel comfortable creating UML diagrams and writing lots and lots of content. This is tricky because your evaluation will highly depend on what somebody else interprets of your writing. In Software there are usually multiple ways to skin a cat, so you need to make sure to show the instructors that your way is a valid one. \n\nThe course uses Java throughout. If you have used it before, you shouldn't have any problems getting by. The material is not complicated, and I enjoyed the different programming assignments. The final project is the development of an Android application, which will take some time. I did Android before, so I felt right at home, but I saw some people struggling because the learning curve wasn't easy. \n\nDuring the class, you are part of a team that works the projects together. Teams are somehow hit or miss; there's usually somebody that does very little to help during the class. If you are unlucky, you can find yourself bearing most (if not all) of the work. At the end of the project, you get to evaluate each team member, which is appropriate and forces people to try to be helpful. \n\nIn the end, it was an excellent course, and I loved the material. Although I was very familiar with the topic, I had the opportunity to rediscover things that I had long forgotten. The workload stretched me enough, and I highly recommend it for anyone working in the Software industry. I definitely recommend this course as an intro to the OMSCS program. The professor is energetic and involved. The assignments were mostly practical and allow for proficiency with a bunch of development tools. Programming is in java, and db experience helped a lot with the group project. Speaking of the group project - I had a wonderful group and really enjoyed the group assignments, however some had a more negative experience. We were not allowed to select our groups so you have to make the best of what you are given. \n\nThe four weaknesses of the course were 1) VERY slow turnaround with grading. 2) The rubrics were not published and some of the grading seemed a bit nit-picky. There was one case in particular where instructions for a deliverable weren't entirely clear, yet grading was strict on that section. 3) I was a bit disappointed with the final project since it wasn't something one would ever encounter in the real-world, and it did not add much to what we had already learned in the class during the semester. 4) The Friday midnight deadlines were rough, especially since office hours weren't until Weds evening. Would have preferred a Saturday midnight deadline so that some of the weekend could be used to finish things up after office hours. \n\nBottom line is that you will leave this course with a good understanding of the pros and cons of different development approaches. You will have completed some interesting white and black box testing assignments, and you will get a good start on Android development if you have never dabbled in that before. The professor and TAs are genuinely supportive. This is a relatively low-stress way to get back into an academic environment after being out of the classroom for many years. Basically an \"intro to industry\" course. This course is a broad survey of topics relating to how the real world does software development. Includes a group and individual project. The group project can be either very easy or very hard depending on your group - in my case, it wound up being incredibly time consuming (>40 hours one week because I had two absentee group members). I wouldn't recommend taking this course in the summer for just that reason - I don't think they scale the project back for the accelerated schedule, and one bad week of coordination can tank your schedule. \n\nThe lectures are informative and well-done. The professor and TAs are very involved with the class, and I'd take another course from Orso in a heartbeat. \n\nIf it's been a while since you've worked as a software engineer in a modern environment, this is a great course. If you're like me, and have been one for more than half a decade, it's probably less valuable. Good class. They've changed the structure from previous summer's. We had both an individual and a group project. I think the change really made the class a bit too hectic on weeks we had assignments and individual deliverables in the same week. Also, the TA's weren't able to keep up returning grades and feedback in time for projects that were dependent on prior assignments. I still really liked the class but expected with the class being offered every term since our program was started to be well oiled machine by this iteration. DISCLAIMERS:\nThis was my first course in the program, so I spent a fair amount of time early in the semester learning basic OMSCS infrastructure (Udacity, Piazza, T-Square, slack). Related, although I have experience as a software engineer, my current job is entirely different. So I also spent a good chuck of time creating a workable setup on my machine (Cygwin, .bashrc aliases, git). Finally, although Java is clearly stated as a prerequisite, my closest experience is C++ from 15 years ago. So coming up to speed there was nontrivial.\n\nPROS:\nProfessor Orso is a ton of fun! The lectures are great and the office hours are helpful. I enjoyed the material and appreciated the weekly assignment cadence. This course has been refined over many iterations, and the instructors are very clear that the decision to make each assignment due on Saturday morning is a deliberate one. Initially I was unhappy about this, but came to rather enjoy it by using some weekend time to get ahead on the homework rather than scrambling to meet the deadline. We were exposed to several technologies and tools (git, IntelliJ IDEA, Android Studio, Java, JUnit, markdown, XML). The Android Studio group project was a lot of fun. Groups were assigned based on mutually available meeting times and complementary Java experience, which worked out great! \n\nCONS:\nAssignment grades were consistently very late. I literally had no idea how I was doing in the course for the first half of the semester. (As a new student, this was particularly unsettling!) The instructors take grading very seriously, and go to lengths to ensure fairness by making sure grade distribution from TA to TA isn't skewed, releasing all grades simultaneously, and so on. I do prefer a fair grade over a fast grade, so I appreciated this. However, I think it's also reasonable to expect timely qualitative feedback, perhaps with a delayed quantitative grade. (Otherwise, there's no difference between OMSCS and watching Lynda videos!) I felt the lack of timely feedback hampered my learning and caused unnecessary anxiety. Professor Orso is amazing - his lectures are fun, engaging, clear, concise. He's also all over piazza, which is very encouraging for the students. \nAs for the content - to be honest, I wish there was more content. And assignment material to practice it on. I committed less than 10 hours a week to this class, and covered the materials and tasks easily. I would've gladly committed another 5 to cover more content - maybe delve a bit deeper into design concepts, or perhaps an extra individual project with android. This course was very simple. It introduces you to the basics of Software Development and provides some tools that you would use on a daily basis. Many of the projects and assignments were very simple and took around 3-4 hours per week to finish. The TAs and Professors were very good and helpful. \n\nOverall, an easy first class but none of the material will be new to someone who has worked in the field for a few years.  This class is very useful. It's somewhat easy if you already have some software development experience. The teamwork was a challenge because some team members aren't as dedicated plus dealing with schedules was a pain If anything, take this class if you like your lectures spoken with a cool Euro accent. \n\nI think the grading was generous. As long as you read the assignments very carefully, you should get > 95% on all assignments. I read on the forum, though, that many complained about getting major points off, but that's their own fault for not following directions. \nWhat else... forums are very active. If you ask a question, you'll get many answers within an hour or so. \n\nThe Lead TA's are awesome!  They provided really good feedback in Piazza, and at least one TA used to answer questions in the Slack channel.\n\nAs much as I loved this course, the only I didn't like were the Friday deadlines. I was calling in sick every Friday to finish my assignments, until my boss pulled me into a breakout room to have a 1-on-1. He thought I wanted 3-day weekends every week. lol. \n\nIn summary, take the course if you want to learn Android, or if you want to learn techniques on how to write quality code. This class had very active TAs and instructor, which was great. It never goes super-deep into some of the topics, but is a good general course on software development. I had a pretty good group for the group project, with only one member not contributing much, so things went well and we received a good grade. I would recommend this class if you haven't done much software development. I've done it off and on for 20 years and I found the topics to be pretty easy, but enjoyable. Very Good software development foundation course, taught passionately by Dr. Orso and TA Team. Office Hours were conducted diligently and all clarification questions were addressed nicely. Very good Piazza Participation. Only downside was having team project and individual assignments going on in parallel during the summer time, making it very tight. The fall and spring semesters may not encounter this issue. Good intro course to software development, Android and JUnit testing. The group project and Individual project were interesting, but focus on testing is a lot in individual project.  I learnt Java and Android development while doing the course so anyone with good software background will find the course easy. The bad part is all the submissions have Friday deadline, which makes it  a very stressful week especially if you are working. Overall a very well structured class. The professor and TAs are awesome in this class and very active so definitely use that resource. The course was mostly review for me, but it is definitely a good intro for people with a light programming background. Some Java experience is recommended. While this class is very broad in covering content and the lecture videos were excellent, the assignments were almost always monotonous and there were huge logistics issues. The assignments were almost always returned about a month later so it took forever to know how well you were doing, the group project (at least in my case) had 4 students in 3 different continents and it was hard collaborating discussions as the meetings for me were always either 1 am or 9 am (not sure if this was just bad luck for me.. or?). The projects themselves were quite interesting but I thought some topics were rushed too much while others had too much time spent on focusing a minute detail that doesn't really matter in the software engineering world.\n\nOverall, the course content was pretty decent and a great learning experience, but the logistics of the class itself has turned me away from the class.  I think if you already have considerable experience in software developing, this class would both be easy and useless for you. The class covers a wide range of content but doesn't go enough in depth with any of them. The weekly programming assignments also seem to lag the readings a bit (you'll be doing an assignment in Lesson 6 when the reading schedule indicates Lesson 7 or 8). \n\nI don't even consider myself an experienced software developer and there was only a few things I got out of this class that I felt I could apply in the real world. I didn't get enough hands on experience with Android development to be confident enough to enter that field. I got SOME useful experience with black and white box testing which I liked. Other than that I got some Java experience and that's about it. There's an opportunity to get a little bit of project management experience if you volunteer to be the leader for the group project but the curriculum doesn't go into software project management. I do wish the group project was shaped to focus on a particular software development strategy (e.g Agile, Waterfall, etc). I also wish there was a project on refactoring as the lesson material covered that but the projects didn't. This class really measures your writing and Java programming skills. If you don't have experience with Java and JUnit, this class will be very time consuming. The material is not difficult, but project are a challenge (especially if you're placed on a team with weak Java skills). The written documentation you need to write is extensive, but not challenging.  #### Background\nI have Java (10+ years) and Android experience( 2+ years), so the review might be a little biased.\n\n### Course Content\nVideos were a bit too long and if you have been developing software development in any capacity following a lifecycle, should be really simple. \n\n### Udacity Quizzes\nThe udacity quizzes can be taken as many times as required with no penalty, but make sure your last submission is correct as they are counted against the grade.\n\n### Assignments\nThe assignments attempt to build on top of each other with the second half being a group project. Be brutally honest about your skillsets to be matched correctly. There were few teams who had lot of trouble leading to disparaging discussions in Piazza.\n\nIf you have Junits and/or Java development experience, the assignments itself should be a breeze. The only problem would be a black-box testing assignment with no clue about what bugs you are looking for. I would recommend living with whatever is possible as at the end of the day, it accounts only for a small part of your final grade.\n\nIn the group project, attempt to identify an integration lead, ideally with Android experience. It would make all team mates lives simpler with each building one or more components and the lead integrating them together.\n\nI was the lead and all my other team mates either had paired this with other courses or were either getting a baby or moving, so getting the right team and responsibilities is crucial. There are 3 deliverables as a group and getting the dynamics is important to get them delivered.\n\n### Exams/Tests\nThere are no exams and all grading is done via Assignments\n\n### Office hours\nThis is the only 1 course out of the 3 that i have taken where the professor actually does a live office hours.\n\n### Parting words\nIf you have Java experience, this is a simple no-brainer class which can be clubbed together with another course. If you have no Java experience or haven't worked in a group, i would tread a bit light and look for an alternative if possible. The learnings are not that really extraordinary nor the effort worth the merit. 6 Individual Assignments, 3 Group Projects. Easy if you are a java programmer, but a nice easy intro to Android, which I haven't kept up with. Test driven development, other development processes. Work is doable but constant, so take when you won't miss weeks and have time to coordinate with a group. The lecture videos were very well presented and were professionally produced. The professor and TAs were active online and responsive to student questions. These aspects should serve as the gold standard for the class materials and instructor involvement in all OMSCS class offerings. \n\nMuch of the class will be a review if you have worked in the software development industry, but it never hurts to review and there's always a thing or two left to learn. The projects were sufficiently entertaining and educational. Some prior OO and GUI programming experience will go a long way to eliminating any frustrations with this class. \n\nThe group project experience depends largely on the project partners who are assigned to you. I worked with excellent individuals, and the 4 of us just automagically dove into our imagined roles and pounded out a project with a good score. Though there is a mechanism to adjust scoring should there be inequities in contribution from the other group partners (or so I've heard). \n\nBased on conversations with others, there were additional projects that are now in place where they weren't present previously in prior summer semesters. The final projects (both group & individual) were running somewhat in parallel and can make things busy. This was one of the two courses I took my first semester in OMSCS. I come from a non-CS background and do not code for a living (Im actually in recruiting - ie.. sales). I have never written Java, never been exposed to unit testing, heard of UML but never messed with it. I do have a lot of procedural based coding experience, as well as have developed a CRM using MySql back end in VBA. I have done some PhP/MySql too, but not much. \n\nI couldn't recommend a course more highly, especially for a new student in the program. Dr. Orso was a joy in class, was involved weekly, always available, active on Piazza, and the weekly office hours were fantastic. More importantly for me, the projects made me think. I always (once released) said - oh, this wont take long. Once I got into it - I realized that the assignments were a little more involved and thought provoking than I first thought. The only assignment that I really wish were reviewed was the Category-Partition testing assignment. We had lectures on the subject, we used the application; however, I totally see the value in the tool, but not sure I really understand the best way to choose and assign categories and parameters. \n\nAs for the group Android project, I hit the mother-load with group members! All 4 of us put in a ton of effort on the project, and our grade reflected the work we did. We started early on the assignments, followed the instructions, completed the writing / required documentation, and by meeting multiple times during the week all assignments were submitted and complied with requirements. \n\nIf I had one recommendation, to me, the group project (15% weigh) should have been weighted higher. I certainly worked much more on that than I did on the individual project (which had 20% weight), it consumed more weeks in the course, and was a much more comprehensive effort than the individual project. \n\nTA's were Great and active daily. This class totally flipped how I approach software development! new to CS area from EE hardware field, gained knowledge, practices and confidence by doing those projects and assignments. Was a great way to be re-integrated into the CS curriculum. I've been out of the classroom setting for some time now and this class was simple enough, yet technical enough, to provide me with an opportunity to slowly get adjusted. The content was not too difficult however I do feel as if I learned. \n\nWould have loved more resources to be identified to assist with self-study considering most of the class was just that. Not too hard of a course if you have Java experience. The group project is in the middle, making it an ideal course to pair with another course that has a heavy work load toward the end of the semester. The topics are well covered and easy to grasp, but there are a couple projects that are grind it out, type that make the class less enjoyable. Alex Orso is an excellent professor. This is a great beginner software course, and I really enjoyed the lectures. There was a final group project at the end in Android that was very time consuming, but other than that the assignments were straightforward for people who know Java. I had a horrible time with this class. Everything was subjective to the TA's and the group project was unbearable (I had a really bad group). If you have any real world experience, this class is a waste of your time. I did not learn ANYTHING new from this class. Everything is \"Perfect World Scenario\" with no explanation of how it really works in implementation. I understand that this is a class teaching about the theory of software development, but does not give a real outlook of how it works in industry. This is a good introductory course. You will get familiar with Java and create an Android application from designing it to actually coding it and testing it. It is important to have a good group and they try to pair the groups so that each team has someone with prior development experience.  I really enjoyed my time with this class. Professor Orso was a very strong teacher and his passion for the subject definitely bled through his lectures and office hours. I would advise that there is a TON of \"ticky-tacky\" grading in certain assignments especially where instructions are incredibly vague or opaque. I struggled not because the material was difficult but because assignments were never entirely clear or the lectures didn't adequately prepare for assignments so you're left researching stack overflow and other places for hours. The projects depending on Android development was a blast! It was cool to see Orso start us off on a mobile project and then implement some of the SDP concepts on the project. Also, you're gonna need a good team for the project. By good I'm not talking about dev-savvy (though it helps). Good in this context means good communicators and overall team members. I had a fantastic team where we could depending on each other and split work appropriately. At the end of the day though, I have a tad bit of a bitter taste in my mouth because of a few assignments and some grading that I didn't agree with 100% (and I'm not the complaining type for this stuff). If Orso and his crew were to re-work some assignments this would be a 5/5 course for me. As it stands it's somewhere between a 3-4/5 Simply the waste of time. Avoid it if you can. I mainly took it to pair with a hard class, but apparently there are other better-use-of-time classes for that.\nWorst part is the head TA. She is a I-know-it-all and not very helpful. TAs enforce an environment on Piazza where students can't help others. I felt bad for some students who genuinely put in all the effort but got stuck in some trivial parts of assignments. But TAs would never give a simple straight answer. It would rather be circular and useless. \n\nOh, and grading is super slow and frustrating. I didn't know more than 55% of my grade till last week of semester.  This was my first class in the program and I thought it was quite well done. The class eases students into development the first few weeks by giving several introductory individual assignments at the beginning including a review of github, Java and Java testing. These will be a breeze for anyone who works as a software engineer already, but gives a nice review and catch up time to those who aren't. Thus, if you aren't a software developer you have a few weeks to ramp up. The group project was perhaps the most time consuming part of the class and also my lowest grade in the class. Overall, the group assignment was not so difficult technically, but the struggle of my group was procrastination by 2 members such that I didn't have time to review and fix what they worked on. The white box/black box testing assignments near the end of the term were interesting, though highly academic and theoretical. Overall, this is a great first class for the OMSCS program, especially if you are already a software developer. The class will also keep you on track with set deadlines and assignments coming out at manageable intervals.  If you are starting OMSCS program without having good programing skills, I recommend taking this class as the class is nicely designed to cover fundamental elements of software development and you will have opportunities to develop or brush up programing skills through the course. While I had been away from programing for quite some years, I was able to catch up and enjoyed all the material in the class. However, I still recommend some preparation beforehand such as learning basics of git commands and java program through the free Udacity courses if you are very new to the program. \n\nThe quality of the class is very good as lectures are well structured and clear. I hear different opinions around project assignments but the class will try to assign a project team with good mix of experience (i. e. balanced) with common available time slots as much as possible. My experience on project was very positive and I felt like I was really in school having a weekly hangout meeting with colleagues. \n\nOpportunity for improvement I felt was the lead time for assignment grades and opportunities to practice white box and black box testings. The class gives some good examples but it would have been nice to go deeper in these area. \n\nOverall, very good class to take and I enjoyed almost all assignments and exercise in this class.  Overall, this was an enjoyable course. The content is a good intro for someone like me with no professional CS experience. Most of the assignments were fun, interesting, and not overwhelmingly challenging. I wasn't crazy about the group projects because there's always a roll of the dice with the quality of your teammates, but it mostly worked out ok. \n\nThere is one major problem with the class, though: they were extremely ineffective and providing timely feedback for assignments. We had weekly assignments and in many cases it was over a month between submission and when the grades were released. This made the assignments quite a bit less effective than they could have been. Every week the head TA made commitments about when we'd get our next wave of grades back and he virtually never followed through on those commitments. Were it not for this significant shortcoming, I'd say the class was outstanding.  I enjoyed this course. Although some of the grading felt nitpicky, I think for the most part the instructors were fair. My understanding is group projects could be a crap shoot. Lucky for me my group was terrific and everyone was well-engaged and willing to put forth effort towards each project. This year, two of the projects were group projects with the final agile project being an individual project. \n\nWhile it's not a make or break, coming into the class with an intermediate level of Java is probably best.  This is a very good course for JAVA or Android starter. This is a good course for the introduction of software engineering. It may not be useful for those who have much experience from industry. This course is of medium difficulty. For someone having java/web development experience, this course would not hold any value.\nI am a mainframe programmer from a decade and hardly had any experience with java coding experience, so i learned few basics about java coding and also android development. The lectures were good, but did not taught me anything new as i am already used to work in agile environment. \n\nGrades are always late and no one knows for what marks will be deducted. I lost few marks in some assignments because of fat-fingering few spellings. one of the more interesting classes, it required weekly assignments which were due saturday morning and released on saturday. the work was doable, but it was challenging. This course is a great intro to the OMSCS in general. It includes group projects to get you used to coding with a remote team, but at the same time will teach you the basics like using git. For most people who work in SW Development, the content won't be anything new, but the chance to create something in a group is always beneficial. The class is interesting but it all depends on your group. We had a terrible teammate for the first few weeks and that was a mess. But, the class ended up fine. This class is an excellent overview of the stated topic. I work at a large company in a division that develops software, and learned much about what certain processes are, why we do things a particular way, alternatives that could be explored and areas that could be improved. The actual coding of the class project was beyond my technical capabilities without a lot of additional work, but fortunately some of my teammates were well versed in programming Java and Android, and I was able to pick up more/most of the work on the requirements and documentation side to make up for it, which obviously helped and felt like a fair distribution. You will need some basic Java programming on your own as well, but if you have any kind of a programming background and take any beginners-level course, like the one offered by Udacity, you'll be fine. The instructors is fantastic and funny, and the TA's are very helpful and responsive. We went nuts with Piazza, which made it hard to keep up with, but that was our fault. Overall I highly recommend this class, even though it's not a killer I think everyone who doesn't have a highly detailed background in large-scale software development and management can benefit from it. If you're a programmer and you want to brush up on the best practices in development, this course is for you. I had long forgotten about best practices and processes. A good course to be reminded of them. The TAs and Prof are very active on Piazza. \nI took it in the summer so there was one assignment every week, which can be a little frustrating. \nThe team projects needs collaboration. I had an awesome team. The tip, respect other people's opinion, its ok to give in sometimes and keep it simple... and do not take anything personal.. its all about the grade. \nThere is one individual project.. follow up on piazza to get through it.. I got it working due to posts on piazza.. \n\nGood luck. SDP was my first class & I am not currently working in the software field. I have had programming experience 10 years back and more recent scripting work. I had to learn Java & Android for the course unlike some people who had both or at least Java background. \n \nEvery Friday there was an assignment due so it was a busy course. Some were easy, some not so much. I had a great group for the project so overall I loved the course. I felt like it was challenging enough for me but not too much, to be discouraging. I learned stuff and more importantly felt confident about getting back to school and taking harder courses. \n\nThere was a lot of gripe from people in the class about how easy the course was and I can see how it might have been. So if you are programming/scripting for work and are not looking for class fillers, please don't bother taking this course. These reviews exist for a reason This is an easy but good course. It teaches many concepts in software engineering that Non-CS students don't learn in school. The concepts of software development tends to be overlooked. A good software is not just good coding. The workload is fine. There is deadline almost every week. It is a good course to refresh your java programming skill or even learn it if you don't have much experience. The grading is lenient. I would actually recommend any Non-CS background student to take this course even though it appears to be easy, but many of the concepts in the course are basic but important to know as a formal CS student and can tell whether you are a CS student or CE/EE student if you don't know them. Course lectures provide good examples and walkthroughs. There's a historical context for each lesson which I liked.\n\nThe Android lessons need more work. The group project involves making a Wheel of Fortune app. The implementation is somewhat important, but the bulk of the grade comes from the design documents and project plan that your group creates. I didn't know much in terms of Android development so going from the first individual Android assignment to the group project was a bit of a stretch. Someone else in my group was knowledgeable about Android which helped. You don't get to choose your group, but you can assign preferences for meetings times. Hint: choose to meet early in the week before project deadlines.\n\nIndividual project is implementing a command line utility. The focus is on testing and refactoring.  It's straightforward, and while the black-box testing assignment doesn't provide much in the way of learning, I did find the overall project helpful for thinking about test cases and inputs.\n\nGood course to kick off the OMSCS program and pair with a harder course. The other reviews for this course are accurate. There is a lot of work (and some of it people think is monotonous), but the summer is shorter than the fall and spring semesters, so the amount of work per week is probably higher. \n\nTo prepare for the class, I recommend brushing up on Java and Android development. There are some good classes on Lynda for this purpose. A good, interesting class with projects that do a good job of illustrating the concepts taught in the course. TLDR: Great course that teaches the fundamentals of the software development process, however, it uses some outdated practices in what is taught. Professor highly involved along with TAs. Highly recommended. Assignments released on Friday, due Friday (7 days). Makes a good, getting back into academics, course. \n\nPrep: Have good familiarity java and android development; have the ability and time commitments to work with a team to get a group project done. \n\nMy expectations of this class were to refresh some of the basics that I already knew from coding in industry for 7+ years. The class met these expectations, but relied on some outdated information and documentation that is not actually used in the real world industry. \n\nThe course was a great overview of what it takes to develop software from the systems or business side of things. Not just the guts of programming. The course takes you through the steps from initial concept, requirements gathering, documenting designs for approvals, prototyping, reviewing designs again, implementation, testing, and final presentation\\shipment for a software project. \n\nThe class leans more towards requirement gathering and documentation then programming, so be prepared for that. \n\nThe course had almost no flaws in it, besides the team picking process and getting the students to work together, but that is a separate issue. The TAs and professor were very helpful and willing to see the students learn the material. \n\nAs others have mentioned, while this is a decent course for those who are not good programmers, you still need to be able to program to take this course. This is a Computer Science Masters degree after all. This course also has little learning for industry experienced developers, but it worked as a decent transition back into academia after being out of it for a while. Dr. Orso and his Merry Band of TAs did a great job with this course! The lectures were well done, materials were documented, and the projects were perfectly in line with what we were learning and reflected what was presented in the course prereqs and syllabus (as opposed to my experience in another course). \n\nMy only suggestion to future students is that if there's ever a debate as to whether something is required or \"good enough\" (documentation, feature, tests, etc) - be safe, not sorry.  This was one of the first courses I took, and I am glad that was the case. It was a comfortable way to get started. I also enjoyed learning how to develop an Android app.  This course feels like the easiest I've taken in the program, but this may be due to the fact that it is very well organized, clearly structured and not ambiguous. There are individual assignments with enough time to complete and a group project that is a small Android app. The lectures are fabulous in their flow and design and quite interesting, even if a lot of it might be familiar to someone working in software development. It was still helpful to have the material laid out in such a fun way. Getting an introduction to Android was also great.\n\nConsidering the ambiguous nature of the rest of the classes I've taken, SDP is now engraved in my mind as a sweet memory. I wish more classes were like this - I feel that many other classes try to cram an inappropriate amount of material, which causes them to be kind of all over the place. Pretty easy class, and you won't learn much if you've done any software development in your career. I was just starting my career when I took this so learning to use git was useful. There's some exposure to developing a basic android app and working with a team which is useful. This class is definitely more valuable at the beginning of the program as opposed to later, and pairs well with anything. This class is very well run by Prof. Orso. My background is in Python programming and I entered with essentially zero Java background aside from the Lynda course you may use provided by GaTech. \n\nGood: Well run (as stated previously), videos are well produced and the assignments are very clear in what they expect*. \n\nBad: TAs took an extremely long time to get us our grades. This was very frustrating because rapid feedback is always appreciated. Our class project (#2) depended on one of our past assignments, on which we did not receive feedback. This made it quite tricky to navigate. Additionally, as with any class with group projects, some teammates will be good, others bad. \n\nTakeaway: I learned plenty of Java, and I feel that I've successfully polished my ability to use Git well. I would definitely recommend this as a first course to the GaTech program, as it is a good intro to the program's systems itself (Piazza, Buzzport, T-Square). Overall 9/10.  This is my first class in OMSCS and this is a very good introductory class to OMSCS and Software Engineering. I\u2019m working as Software Engineer but I still feel the class is fun and worth taking. It brushed up my git skills and introduced me to Android programming. \n\nThe instructor (Prof. Orso) is very active and always conducts office hours every week, he is also always present in piazza (except nearing the end of the semester, when he and all TAs were overwhelmed with grading and grade challenges). \n\nThe load is quite constant and I spent about 5-7 hours a week, except for the Android team project, which I spent almost 50 hours across 3 weeks span. But that\u2019s more because I wanted to deliver a \u2018nice looking UI\u2019 with a close-to-non-existent Android expertise. \n\nThe contents are pretty straightforward and easy to grasp. There is no exam but instead your grade comes mostly from assignments and projects. Having said that if you want to get an A, you have to focus on the details of each assignment and project, making sure to deliver what the instructors expect from those assignments and projects (make sure to attend/play later the \u2018optional\u2019 office hours too, as often clarifications are given here - even though usually the piazza also has a corresponding thread). For some deliverables, the instructors may deduct quite some points for non-compliant items, so don\u2019t underestimate the seems to be easy assignments and projects. The grades are also not curved (90+ to get an A) so it is important to get a good grade for every assignment/project. \n\nOverall, it is a great course, and I recommend taking it especially for new students as an introductory course to OMSCS and Software Engineering.  Very good and passionate instructor. Made good use of Office Hours time. TA's were helpful. \n\nMake sure you inform instructor early on if one of your project team members is MIA. \n\nCourse was a good review of some of my undergrad work. Very good presentation of Agile and Scrum. The JAVA and Android was a nice change for development tasks. \n\nWork with your group up front to find strengths and weaknesses. When it is your turn to be the task lead stay on top of it. Having team members in 5 time zones can be a challenge but it gives you a perspective of what it will be like for remote collaboration efforts. Professor Orso made the lectures interesting, and we got to work with some cool languages. Grading was fair, and TAs were good at correcting mistakes. Using GIT to grade was a great idea, but I would recommend you check over the grades they give you. I had multiple instances where they used the wrong commit (mistakes happen), but again, they are quick to resolve these issues if you talk to them about it. \n\nCourse is entirely project based, with a group project, and a series of individual projects. Not being able to select your group is annoying, because the group project is pretty large and the time frame is really small. I ended up getting a team where two students did not pull their weight, and I had to do a large portion of the work, putting me in the position where I had to play catch up for that class and another class for the rest of the semester. Some of the projects can feel like busy work as well. \n\nKnowing Java is ideal, but knowing Android will really help you on the group project. I enjoyed a lot of the material and thought it was a good course for people who have not been working in a software company that primarily uses object oriented programing.  I have mainly been in silicon and embedded systems development (C heavy) so found the material quite good as a survey of understanding potential processes outside of that environment.  The weekly assignments differed greatly in difficultly and completeness of instructions, the TAs would help clarify - but if they thought it was clear enough they would stop.  \n\nI really disliked the Friday due date of assignments - the only way to make this work with the curriculum is to stay one week ahead of the published schedule otherwise the weekend is wasted as you don't have the background needed to make progress.  This made the course interfere with work much more than it should have, particularly for the bigger assignments.\n\nGrading was always really late - especially annoying for assignments that built on one another (and it turned out the multi-phase assignments only got one grade at the end.)   This is a great class to start the OMCS program off with! Gave me a good opportunity bang off some rust programming with Java and I got to learn some new stuff with android development. This class is project driven, which I really liked and I felt the projects were generally challenging/interesting. This was my first OMS course. I enjoyed the video lectures and Professor Orso does a great job keeping you engaged in the subject matter. I really appreciate his breadth of knowledge and enthusiasm for the material. I was very impressed (and relieved) by the quality of the online delivery system and Piazza classroom forum. \n\nWhat I liked most about CS 6300 is that it differed from your typical boring, textbook heavy software development course that beats SDLC to death. There is no textbook and no exams. Just quizzes and projects. I really enjoyed the projects because they were opportunities to apply course concepts. We learned Git, Android development, MD format, JUnit testing, and so much more! Many of the tools, such as IntelliJ and Android Studio (and even Git), I had never touched before. I learned so many useful tools and concepts that directly applied to my professional work. \n\nAlthough the majority of reviewers rate this course as easy, I caution others not to under-estimate the effort required. I finished with an A but it did require an all-nighter once or twice to meet deadlines and weekly deliverables. Having a programming background definitely helps, especially Java. If you have zero programming background or you're not strong in it then be prepared to suffer a little. The course will not be impossible but I found it challenging enough to meet deliverables because the week seemed to go by so fast between keeping up with lectures, quizzes, and the assignments themselves. I have over 10 years experience developing in C++, C#, Java, VB. NET, SQL, and some HTML and PHP and I felt I was barely prepared. There was still a lot of new learning I had to do and had to do it fast in order to complete assignments on time. I am thankful my group had others with programming experience. It is true that grading is slow but I feel the TAs were doing the best they could. I never felt the slow grading affected my progress or learning. This class can get a bit boring. However, you learn some useful development methodologies that are useful when you work on long projects or when you work on group projects. Also, you learn about test driven development which is a useful thing to know. Android development in this class is not that difficult. For the first android assignment, you practically follow a tutorial by the instructor with minor changes. For the group project, you will also use android but it is not that difficult as well. You will need to know how to integrate databases in your app as well as how to navigate through views in android. Other assignments are not bad and can be completed comfortably within 2 days. The instructor and TAs are involved and quite active on Piazza and generally do a good job in answering questions and clarifications. Generally I have favorable view of the course. As someone who coming from an optical physics background, I've worked on device drivers and algorithm, but there were things that I'm peripherally aware that are missing my background. This class filled in the knowledge gaps in software development process, and pieces of best practices over the years made sense to me holistically. Most of the time crunch will be with the team project. \nHighlights:\n1. ) Learn to develop in asynchronous, distributed team environment using github. Shifting and changing roles. \n2. ) Learn to develop android app in 1 week (or less)\n3. ) Learn to do simple software architecture with UML tools\n4. ) blackbox test interface development with TDD. whitebox test on code coverage.  If you have any experience as a *software developer* this is a very easy course for you. Another way to look at it: you will not get a lot out of this course.\nLectures are very light and superficial, there were 7 assignments doable in a rather short time, an individual project and a group project. There was no exam. Grading is generous (but not curved). The average median over all projects was 95.\n\nThe group project can be time consuming depending on your team. Teams get assigned based on availability and experience (you fill out a google form for that) - you can't choose your team members.\n\nOverall: most of the time I felt like I was wasting my time. Exception: the group project where I was working day and night. This was the first class I took through OMSCS. I enjoyed the class overall and learned a great deal too. Unlike some other OMSCS classes (that I've taken since taking one), I thought the lectures were done very well in this class. The professor and TAs were very helpful on piazza. This class stays true to its mission, which--as the name suggests--is to build up the 'process' parts of the skill set as opposed to the programming or theory skills you'll get in other classes. This means that it may not be the best option for those that already have experience as a developer, but for those that don't, you'll get useful practice with Git, unit testing, UML, white-box testing, and black-box testing, among others. The assignments and individual project account for over 70% of the final grade, the group project accounts for another 25% (split 15% for the actual project and 10% for your teammates' assessment of your collaboration), with a a few remaining free points from Udadcity tracking whether you watched the lectures and did the quizzes. As long as you follow instructions, the grading isn't very strict. This class pairs well with other classes, though be aware that the workload during the month or so of the group project can be higher than for typical weeks. Professor Orso and the TAs were very involved and helpful. My main complaint was that the pace of grading was pretty slow. This was the first course I took as an OMS student and it was a great introductory course to get used to the framework of OMS (Piazza, Udacity, T-Square). \n\nThe assignments and project guidelines were fairly straightforward, though there was a pretty wide disparity in grading leniency among TAs. I'd expect rubrics in future iterations of this course. Best advice I can give would probably be to establish how and when your team will meet/communicate/collaborate for projects early on, and try to keep up with the Piazza threads. \n\nProf Orso had great lectures and was very consistent with office hours. I really enjoyed the Hangouts Live format of office hours. Overall, great introductory course for the program! The name of this course should be Ambiguous Software Test instead of Software Development Process. There are 5 formal assignments besides Survey and Github usage, and 3 of the 5 are tests. And the whole individual project focuses on testing. Assignment 6 uses a tool named 'TSLGenerator' invented in 1989! I think lots of students are younger than it. Deliverable 3 of the project asks to write test cases to cover 100% of the classes which are invisible to us. It made me like a robot when I spent several hours on trying all the combinations to achieve the goal. What is worse, the whole course is ambiguous. The descriptions of assignments are ambiguous. Most of topics in piazza are discussing the meaning of assignments. The TA (if not a forum mediator)'s answers are ambiguous. For example, a student's test cases cover 98% of the main class and he/she wants to know the weight of the other 2%. \"You can get partial score\". Do you think this kind of answer helpful? The comments of assignments are always ambiguous. I got one line comment for most of assignments even I lost lots of points. I have to say this is the worst course I have taken from this program.  This course was a lot of fun. I could see where anyone with significant development experience might find it boring but I myself enjoyed it and encourage any new OMSCS student to take it. Dr. Orso was active on Piazza and held regular offices hours. Lecture material was well put together and entertaining. The TAs were very active on Piazza. There was only one group project that lasted about 3 full weeks. For individual homework, I advise that you do pay close attention to details. The material isn't very difficult but you will lose a large number of points for small mistakes that could have easily been avoided by reading the assignment more closely.", 
    "CS-6310": " I learnt UML and OOAD back in 1999 when the three Amigos were the three Amigos - Booch, Jacobson and Rumbaugh\nhttps://en. wikipedia. org/wiki/Unified_Modeling_Language\nI had to switch careers during the 2001 meltdown. Its good to be back learning OOAD again. \nThis course has a very interesting perspective on teaching UML and OOAD. \nYou have to know or learn ILP and java since the solver is java based\nThere are no fixed answers to the projects since in real life there are no fixed design solutions. \nThe same with the requirements. In real life requirements tend to be vague and it takes a good analyst to fill in the blanks. \nTake this course with an open mind and you will learn a lot.  I took CS-6310 in Spring, 2018 with Dr. Mark Moss. This was my first OMSCS course. I felt like the course was a good first course. It was not too difficult, but it did require me to put in about 10 hours per week on average. Dr. Moss and the a couple TAs were very involved in the course and I feel like they communicated very well compared to what I've heard about in other courses. The course was organized and well-run.\n\nThere were no tests, just assignments, which included a group project in the final 3-4 weeks. The main assignments were 2 design documents using UML, an approx. 6-7 page (double-spaced) research paper, and and the final group project. There were of course the Udacity videos and some required readings, but the readings did not count as part of a grade. The content was fairly interesting, but I felt like a little too much emphasis was put on UML and not enough on architectural styles. You can't really work ahead on the assignments as they are released at specified times. I had taken UML classes before, so this was more like a refresh on the concepts. \nThe only problem at least with this summer term was that the feedback took too long for each assignment.  As has been said in other reviews, each project builds upon the next, and there is little to no feedback between turning in one part, and starting the next so you have no idea if you are going down the wrong path or not. The last piece of the project turns into a group project and you have to merge each members ideas/work together or start from scratch. I think this was one of the ONLY group projects I have enjoyed, mostly because everyone knew what they were doing and actually did the work. It was spectacular. Hardest part for me was some of the diagrams you have to build. A few of them didn't really have good samples so I had to do some comparison from the real world examples I could find and hope it correlated back to what was expected in the class. \n\nSoftware Architecture and Design is what I do for a living, so this class was a breeze for the most part. Completely forgot to turn in one of the projects (wrong date on my calendar, lost 15% of my grade right of the bat) and still got an A. Before this class I had a rather strong hatred for Java. I can honestly say this was the first time I used Java, that I actually enjoyed. The course title describes the course exactly. The Udacity videos are very long but thorough. The most tedious part of the course is the UML diagrams, but once everyone found out we can access LucidChart for free with our @gatech. edu emails, it made the process much easier. At the end of the course, there is a final group project that involves creating a user application for a course registration simulation. If your group is responsive and you're willing to put in the work, your results and grade will reflect that. For me, the main takeaway from this course is a better appreciation and interest in software design. \nBeyond that, if you've taken a Software Architecture course before in your undergrad, most of the material will be very familiar.  This course is similar to SW Dev, both in the sense that you have a group project and as far as content goes. I do remember the lessons being a bit dry, and not fully feeling that I had a grasp on all the design patterns and principles when the course ended. This is a good course to take as the first one in the program. It is easy to understand and the assignments and projects are well balanced. Mr Moss is an excellent lecturer and the classes are good. There is one group project, but it is not a big deal if the group is responsible.  Enjoyed the course. Loved how the assignments built off the prior assignments. \n\nNot sure if videos should be refreshed however towards the end the videos were not very helpful. \n\nInstructor and TAs were very responsive. In general, it was a good course. It was much better organized and prepared than a few other OMSCS courses, and office hours were regular and informative. I'd think that both professor and TA's could have participated much more actively in Piazza, as it was usually necessary to wait till office hours to get responses to some of most straightforward questions, even questions about logistics and organization. \nThe unpleasant surprise, however, was that the group project, which was supposed to be most highly weighted in the overall grade, was never actually scored (or perhaps it was scored, but score was not disclosed to the students?). Eventually, I of course did get the overall grade for the course at the required deadline, so I thought the project grade is just a little bit delayed, but up to this moment I still see neither grader comments, nor the score for the main project. Don't know if I just missed it somehow. Perhaps other folks could chime in if that is indeed the case. This course felt like a continuation of Software Development Process. It is not meant to be, but the topics built upon what I had already learned, so I'd recommend you to take CS6300 before taking this one. \n\nAgain, be ready to write lots of documentation and spend a long time diagramming UML. There's also quite a bit of Java involved, so make sure you've got a good understanding of the language before adventuring in this class. \n\nThere are several assignments where you'll be modeling solutions to different problems and writing a lot of content. I specifically remember the Stateflow diagram problem stealing more than a few hours of sleep from my nights. \n\nTo me, the best part of the course was learning optimization with Gurobi and applying it to a real problem. There were three projects, all related to an application that needed to optimize the scheduling of classes. It was an exciting and challenging exercise. The final deliverable takes time, so start as soon as possible. \n\nThe final exam wasn't particularly complicated and it was open notes. You can pass it using the video lectures alone. I studied like crazy and then found it to be easier than expected. \n\nOn this class, you work on teams. I began to be very picky during the selection process, and I ended up with a great team. We had our challenges but ended up pulling through and completing all the work on time. If you have a background in designing or architecting a system, this course should be a good refresher course. The topic presented is broad and the professor presented it thoroughly. That being said, some of the lectures only provide brief discussion and then it is up to your curiosity. The amount of knowledge you learn, hence, depends on your initiatives. \n\nI found the assignment was quite okay and the grading is fair. Piazza forums was active and the TA were really engaged in answering the questions. This helps a lot in the assignment because the feedback for your submission might not be delivered on time for you to work on the next task (and most of the assignments are basically refinement of previous assignment). \n\nSomething that I think might be improved is to include modern architecture like microservices or SOA and more examples on the popular frameworks/tools for the implementation. It might be good since most of the students are working professional in the industry. This course - at its core - teaches two things:\n\n1) the syntax and conventions of UML diagrams: class, sequence, state chart make up the major players. Other diagrams get supporting roles. \n\n2) the taxonomy of architectural patterns that arose as software systems and their teams became larger over the history of the industry\n\nIt delivers on those two fairly well. However the standout feature of the course, to me, was ILP (integer linear programming) with the commercial-grade solver Gurobi. I knew nothing about ILP and now I can't get enough. I have an extensive Java background, so learning \"ILP in Java\" meant one new thing paired with one old thing. NC State University hosts a large library of Gurobi code samples in multiple languages. Find them!\n\nEvery silver cloud must have a dark lining, so caveats from my view:\n\n1) grades focus on the _syntax_ of your diagrams, not the quality of the architecture expressed. I got all points on syntax-perfect diagrams of ideas I considered underwhelming. \n\n2) in summer, grading took forever. I didn't get any informative grades until two days before the drop-with-W date. You cover half the courses' content before you get grades on the first real assignments. \n\n3) also in summer, course staff did not assign any OCL homework, despite several hours of lectures and a reading on OCL in the syllabus. a one hour overview would suffice, without using OCL for any assignments where we can practice and receive feedback. \n\n4) another summer specific comment: some assignment windows overlapped, including the final project.  this class required a lot of work. it also required having a good team. We ended up with a good team initially and picked up some other good members before the end of the semester. it's one of the most time consuming classes taken so far in the program. It was both interesting and rewarding. Learned a lot along the way. 50% Projects\n20% Assignments\n20% Exam\n10% Class Participation\n\nThe projects were and assignments were doable if you had a good team, but this course is entirely team dependent. The good thing is that unlike some other courses, you can choose your team members. The exam is straightforward as long as you watched the lectures, or did the assignments. The second project was pretty nice, since it allowed you to develop a whole system, and allowed the students to work with many different components and languages, which I found useful. The biggest annoyance with the projects is that they require you to interact with a Gurobi which is very poorly documented and hard to use. I spent more time in this course learning that Gurobi than I did doing anything else. That being said, you can pass this course or get an A, as long as you put in the time and the work. Assignments were numerous but doable as long as you stay on top of them. Project success was largely dictated by who you chose in your group and whether or not any of them had significant application-building experience. Biggest complaint about the class was that it seemed the majority of the first project had to do with mastering Gurobi, which IMO, had nothing to do with Software Architecture and Design. This was a make it or break it. Thankfully, after many hours, I was able to figure it out. \n\nBiggest upside to the class is once you figured Gurobi out, the rest of the project which included, of course Software Architecture and Design and then implementing that design, was pretty fun. A good project and the implementation could be in any language. \n\nLots of good techniques and knowledge taught here, although, in my 30 years of software development, haven't had to use UML, and probably won't for the remainder of my career, but still good to know. This class is probably a good first class or one to save to take with another class.  No tests, and most of the work towards the end.  I wrote 5 hours/week here but I am not sure how much it actually was, since I basically just completed every assignment the weekend (day) before it was due.  The group project was the only thing that required scheduling, but if you have a good group like I did then it's not a problem; plus it was an obscenely small % of the total grade.  The periodic assignments, class participation, and peer feedback was a large percentage, and they were very manageable.\n\nThis class went through the motions hitting all the key beats, but focusing mostly on UML class diagrams and state charts.  It then touched on and required us to generate behavior diagrams and a deployment diagram.  There were periodic assignments requiring various diagrams to be generated for various designs, and then there was a group project.  The group project was based on a scenario described in a prior assignment, so the initial work consisted of reviewing the group members' class diagrams and code and combining all the best parts (or picking someone's who got a good grade).  All of that was fine.\n\nThen there was a surprisingly large amount of coding.  It was my first time having to write Java in 10 years or so, and I was surprised, considering design can 100% be done without writing code.  Either way, as you can see from my rating, it was pretty easy overall, but I would just be warned that there is significant coding required.  Also the videos were weird; I didn't think they were bad at the time, but having taken a couple more classes since I can see they weren't great.  Also, they didn't always have anything to do with what we were actually generating for the assignments and the project, but the state chart ones were OK. Not bad -- just not super interesting. I do designs at work frequently and the details in this course I definitely learned but felt that I would never need to dive this deep 95% of the time. Would skip this course if did it again I really wasn't a fan of this course. The readings in the class were good, and I was fine with most of the lectures, but the quizzes didn't help reinforce any of the concepts in my opinion. Also the TAs were slow graders, and took quite awhile sometimes to respond on piazza. A ton of the topics are pretty much stuck in the 80s/90s of SAD, so a lot of it isn't really relevant to today. The class is pretty easy if you have some programming knowledge, especially since there are no exams. 50% Projects\n20% Assignments\n20% Exam\n10% Class Participation\n\nThe four projects build on one another to ultimately produce an app that uses a linear programming engine (Gurobi) to make course-enrollment recommendations given student/admin input. \n\nThe assignments require writing a document covering a particular topic. I thought pursuing CS would be an end to writing essays, but I was wrong. \n\nThe final is open-book, take-home. As long as you've watched and internalized the lectures, it's straightforward.  Enjoy this course a lot. I was happy that I was able to learn the different architectures and actually put them in play This is a good course for someone from a non-CS background or has little experience in architecture and design. The UML coverage overlaps a little with SDP 6300, but expands beyond that.\nThe early assignments were good. The professor held ~weekly \"reading discussions\" to discuss research papers, which I found very helpful. Most of the reading assignments were very interesting also.\nThe group project felt like just another group project. It had some design aspects, but little to reinforce the architecture component of the course. SAD is a good course and gives an overall basic knowledge of software architecture and design aspects and principles. If you are new to architecture and design it's a good learning and if you have already worked in the software development and design for few years this will be a refresher course. This course was well structured and took you through the iterative design and implementation process that you might experience working as a small consultancy. You start on your own then move into group work. The class was all project based which I prefer. Grading could be slow but overall I enjoyed this class. Some of the grading seemed arbitrary, but it's a great overview of the topic.  Disconnect between the older lectures and the newer approach in the readings and office hours/discussion.  Group project was really good, and a good way to get to know others in the program well. One of the easiest courses in OMSCS. Projects are easy but time consuming. The last project which is worth 20% of the grade was a code based implementation group project which needs to be tightly managed as team members are all over the world and have different experiences. The subject matter of this course is not difficult at all if you are a java software engineer. That said, the workload of this course can be deceptive. There are some assignments that don't take much time but there are others that do if you want to get top marks. If your goal is to get the highest grade possible then be prepared to put some time into this course but if all you want to do is pass then this course probably won't require too much. This is grad school so at the end of the day you get out what you put in.  Though it was stressful at time, overall I liked this course. Professor and TA's were very responsive on the Piazza forms, though they were at time slow on returning assignment and project grades as well as updating mistakes in the grading. \n\nOverall the workload depended on the week. When there were no projects released or assignments due, I would typically spend only a few hours a week. When a project was due, I would spend closer to 20 hours a week. I would recommend starting on projects when they are released, as if you do not, you will end up having to pull some late nights. The lectures were informative, but really did not cover what you needed to do on projects and assignments in great detail, though I think the professor's point that you cannot teach design through lectures is valid. \n\nThe one thing I really did not like about the course was the choice of technologies we had to work with. The projects involved implementing a tool called Gurobi, which is very poorly documented, and very hard to work with unless you understand what you are doing. For the first project especially, I spent at least 75% of my time trying to get Gurobi to work and 25% actually focusing on what the course teaches.  I liked as a first course, not too many hours per week. I ended up spending more time since I had to review the course content more than once partly due to work. However its easy and with the timelines you could make it. Important is the 200 point project, if your team is good you're good. Make sure you spend sometime learning the UML concepts, they will be used throughout. I was part of the Spring 2016 class as well, overall I really enjoyed the class and learned a lot. This class was overall not difficult in terms of the content that was taught. However, the programming projects were a bit more difficult and extremely time consuming, thus the reason for my higher average workload feedback. Mark Moss was a very good professor. He attended all office hours together with the TA's. TA's were also very responsive on Piazza as well, so support was easy to get if you asked for it. Projects were all java based which was nice because my Java background is lacking, so I was able to learn a new programming language as a result. In terms of project details, the first project was not team based and required decent knowledge of optimization concepts and the use of the Gurobi optimization framework. So you would be wise to brush up on Linear Programming optimization. Projects 2 & 3 were team based and as someone else mentioned on a different review, if you have a strong team, you will love this course! We had a diverse set of skills that allowed us to get very good grades on the projects, in addition to coming up with really cool designs and implementations. For our last project, we pretty much designed a full web based distributed application that utilized Vaadin (web gui), Spring (MVC framework), and the Gurobi optimizer. These are all technologies that I believe are used in the real world so I believe I can really apply what I have learned.  The material was pretty straightforward, especially if you've had any experience working for a large organization. Some of the stuff was a little tedious to implement. Additionally, the workload increased dramatically toward the end of the semester with implementation stages and team projects. Very good course with a lot of material to learn. It can easily be thought as two consecutive courses in order to spend adequate time on all topics. I loved the videos and the reading materials. Most emphasis is on UML class diagrams and state charts. The design patterns are covered but it deserves more emphasis as it seems to be a hot topic these days. You need to know Java to do the projects. This class was fun and I enjoyed it. However, my experience was probably due to the amazing team I had to work with. Almost everything is team based. The projects are big and hard, but no too hard if you have a good team. There are several weeks where you need to be working on your big project, but they assign you a research paper to do at the same time. They aren't big, but almost seemed irrelevant, like a side nuisance in the grand scheme of the projects. Plan to spend lots of time on big projects and get yourself a good team right from the start. It will make this class much much easier.  The Course is OK. However, the response from TA and instructor is relative slow. Sometimes, we would not get feedback from them 3 weeks after submission. In my opinion, the course material needs an updated for more design pattern coverage. This was my first class, and it was a good introduction to the program. Not too difficult, some projects to help get you into the flow of school again (for those of us who last attended school ages ago). The group project was the hardest part, mainly because of getting everyone on the same page and being able to do the requirements on time (there was a lot of wasted time on our part organizing and scheduling). I highly recommend when you get a new project to start right away as they projects always seemed to take longer then one would expect.   The course had really good TAs, they were active on Piazza. One thing that got me was the first java assignment, they were very finicky about your program's output matching the expected answers. Make sure you match the expected answers 100% (keep running diff commands). Make sure you familiarize yourself with UML diagrams, state charts and OOP design patterns and you'll get an A. The grades come back kind of slowly, but as long as you break the problem down and model it correctly you won't have any issues. The video lectures are good, actually pretty funny because of the professor's interactions with the udacity person. This is for sure a first course to get you in the swing of the program. \n\nUse lucidchart for your diagrams, it's ezpz. Big disconnect between video lessons, reading discussions and assignments. Probably, in part, due to the fact the professor changed from the the time the video content was created.  I thought a disproportional emphasis was put into UML versus SW architecture and design topics. Group project towards the end of the semester is interesting, but if you find yourself in a bad team you may be in trouble as the team project accounts for 20% of your entire grade. Also on grading, it took the teaching body a long time to grade assignments, which can be a problem as, since some of the assignments sort of build on each other, if you make mistakes on an early assignment, you may get penalized for the same mistake on a later assignment. However, grading seemed very reasonable and methodical overall. It was my first course on the program, and one I thought to be a good intro to it after the fact. Probably worth taking it, but don't expect much learning if you work as a SW engineer on your day job; however, as others already alluded to, it is a Graduate course and you get what you put in.  Good course. Definitely applicable to most work places. Good experience with the team project. The assignments that require drawing (diagrams and so) took me a very long time to complete. Not a hard course, but very time consuming. ", 
    "CS-6340": " This class is hard... BUT... it is fair and passable.\nThe exams require quite a bit of preparation and study (I studied at least 40 hours for Midterm, 25 hours for Final, and my grades reflected it [83% midterm, 74% final]), and are timed, but there is ample time given. The assignments require multiple languages, C++ (this was one assignment, and my first time with C++, and got 100%), Java, Python, Shell-scripting, etc., and using unique tools to convey the concepts in the class. The resources are excellent, test prep, pdfs of lectures, office hours are unmatched in quality of information. The Instructors are continually making improvements, and I've personally witnessed some, (I attempted class twice). The instructors are a class act, with plenty of communication, and always making sure students are given the tools needed to be prepared week to week.\nWhile I did not ace this class, and would not want to re-take, I wouldn't change the fact that I took it. I did learn quite a bit, and will end up using the concepts in my day to day job.\nJust don't think you'll skate by, without putting in the effort.\nAnd If you take this next semester, I'm sure it will be improved, knowing these instructors. Warning about previous reviews: I found many of the claims in previous reviews to be INACCURATE: that the exams didn't test student's understanding, that the exams didn't look like the practice exams, that the assignments lacked specifics, that the lectures didn't help with the assignments, or that the documentations of libraries/frameworks/tools for the assignments were lacking. \n\nThe exams and assignments' questions were among the best quality in all of the classes that I've taken so far. Mid-term and final exams tested concepts from the lectures, were straightforward and fair. There were no trick questions. If you paid attention during lectures, took notes, and spent the time to understand the concepts, you would do exceedingly well (I scored in the 90%s for both mid-term and final; it can be done!). In fact, for a couple questions in the final exam, the answers were directly in the lecture notes, and so you could literally just copy and paste!\n\nThe lectures were excellent and provided all of the (basic) fundamentals to work on the assignments, and you would fill in any gaps by reading the required readings mentioned in the assignment instructions. Again, if you took notes during lectures, and did the readings, then the assignments would feel straightforward. This doesn't mean that they were easy, but at least you wouldn't get entangled in the concepts, and would instead be able to tackle the \"puzzle\" head on. The documentations on the libraries/frameworks/tools were sufficient and clear. \n\nIn summary, this is an excellent class on static and dynamic analyses. In addition to the application, it covers theoretical aspects: does an analysis terminate; is it complete; is it sound; can we do better, and if so, what the trade-offs would be? You will learn a ton, and end up with a deeper appreciation of static/dynamic analyses--the sort of things compilers and IDEs do to optimize/analyze your code. Also, Dr. Pryby and the TAs were responsive, fair, helpful, and awesome. I'm writing my review near the end of the summer semester, with only one assignment and a final left to go. From reading some of the other reviews I am wondering if this course was changed after last semester. I do not find it anywhere near as hard as some reviews have indicated. \n\nI've been able to get by with about 3-4 hours per week of total time, during the summer session, and have a very good grade so far. The TAs have posted statistics and the median grade of the rest of the class is also very strong. I believe the midterm average was around an 80%. \n\nThe material and assignments are interesting. I'd actually appreciate a slightly deeper dive into some of the areas, rather than the pretty quick surface study that is given in the lectures. That said, the lectures are good, and there is nothing stoping students from researching more on their own. \n\nThe Prof has been mostly absent from piazza all semester, but the team of TAs have done an excellent job grading and responding to posts in a timely manor. I did not attend any office hours so cannot comment on them directly, but based on many posts I saw on the forum I gather the office hours were helpful for those that needed it.  20% Midterm\n25% Final\n50% Assignments (8)\n5% Participation\n\nJust took the midterm, which was proctored (ProctorTrak). It was open notes, where you could view slides with a PDF viewer. The questions mirrored the quizzes in the lectures. Exam format was multiple-choice, multiple-select, free-response. \n\nThe pace is approximately 1 lecture per week with 1 assignment every 1-2 weeks. \n\nAssignments so far have paralleled the lecture topics, covering Dafny, Korat, Randoop, Statistical Debugging, Delta Debugging, and Dataflow Analysis. They are interesting and graded pretty quickly. \n\nThe instructor is excellent and very active in Piazza. The material is very relevant. Highly recommend.  This class requires you to setup and use many tools on your workstation and/or a VM. For Windows users, the setup I recommend is as follows in the host OS: (1) Visual Studio Community Edition (or higher) with Dafny extension, (2) JDK 1. 8, and (3) Android SDK. Then, create a Ubuntu VM with the following: (1) JDK 1. 7. Yes this is a lot of tools and you will need them all :)\n\nThe assignments are for the most part pretty interesting! There is usually a \"trick\" involved and once you figured it out things will just click. However, plan on some extra time for the static analysis assignments towards the end of the class. Some of the students spent hours and hours on the last assignment, (Constraint Based Analysis), and the solution is surprisingly concise at about 20 lines of code. \n\nThe midterm and final were pretty difficult. On the midterm there was a generous curve and the instructors said that there will be a similar one for the final. The material comes from the lectures and is expanded upon. I would recommend watching each lecture twice; once before doing the corresponding homework and once before the test. Also, plan on re-taking quizzes using pencil and paper when watching for the second time (since you can't blank out previous submissions on Udacity).  Background knowledge:  Do not be fooled by the supposed required background knowledge.  They said we needed to be \"familiar\" with \"a high level programming language like Java or C++).  For your own health and safety, do not attempt this class without a very solid foundation in BOTH Java and C++, and experience in C and Bash scripting would definitely help to have in advance.  I went in not knowing C++ and we ended up having an assignment written in that language with a special framework that I got a 30 on because I had to spend so much time just trying to figure out the language and the corresponding special framework that I barely got around to actually figuring out the concept behind the assignment.  Don't make my mistakes.\n\nClass material:  There were definitely some interesting and useful concepts sprinkled in, but I work in this field and had never heard of most of the concepts/testing techniques in this class.  Either my company is just really terrible at testing, or a lot of these techniques are outdated, far too specific, or not used in the actual business world, and I think it's the latter.  There was some material that was very useful, but many of the lectures were incredibly boring and slow-moving.  Lots of time was spent on background and not as much on the actual concepts.\n\nAssignments:  This is what killed the class for me.  Assignments were either ridiculously easy (an hour or two) or impossibly difficult (30+ hours, and the majority were like this).  There were 7 total and I came to dread each release of a new assignment.  For me, they felt like an enormous leap from the lectures and I felt completely lost for the first third of the time spent on the tough ones.  Provided resources were extremely limited and lacked detail, and the concepts nearly always couldn't be found anywhere on the web, so I had to rely on asking the other students and TAs on Piazza for everything I couldn't understand, which was frustrating.  Overall the assignments tested our ability to figure out what we are supposed to do with the tiniest scraps of information as possible rather than our understanding of the concepts from class, so they felt like a huge and infuriating waste of time.\n\nExams:  The midterm was tough but I felt it was pretty fair.  We were given a practice exam for both the midterm and final and I felt the practice gave a good feel for what the real exam is like.  The class average was a 65 on the midterm, but the grades were curved soon afterwards.  The exams are open-lecture notes.  \n\nProfessors/TAs:  One of our professors was very dedicated, consistent with office hours, and was always on Piazza helping out and answering questions.  The other professor who recorded the lectures showed up for one office hours, which were supposed to be weekly, and then cancelled each week after that before finally not scheduling them at all and being replaced by rotating TAs.  The TAs were helpful and seemed dedicated to helping the students, and they seem like they had to carry a lot of the weight, so I commend them for that.\n\nThis was my first class in the entire program and it had me questioning whether the program was right for me.  I am hoping I will have a better experience in other classes.  Overall, I can't necessarily recommend the class but if you are better prepared (see section 1 of my review) you will probably suffer much less than I did. This was my first class in OMSCS. I found it very exciting and very useful. There were 2 exams both were very tough ones. It was easy to lose marks. We could easily get about 55%. But after that it would be difficult. Assignment were tricky connects with the lessons we learn. We need to pay 100% attention to every word that was written in the lecture notes. There were 7 assignments. All were worth doing. Subject covered pretty broad spectrum of Software Testing and Analysis methods and approaches with more emphasis on compiler and Visual Studio's testing. Some of the tools I got introduced to were never heard before. Couple of those assignments were very tough. It took almost weekends to get them worked. Overall it enabled me to think in a much broader sense. I really felt the challenge of computer science subject. Overall, I felt very good about the course, although I did not fare very well. This is one of the best courses I have taken in the OMSCS. I would put the difficulty somewhere between easy and medium, depending on your previous experiences and knowledge. \n\nThe assignments are interesting, they align well with the lectures, and more than enough time is provided. All assignments had 1-2 weeks to complete and I was able to get most done in ~ 2 days (and I have very little experience in Java). \n\nThe exams are more than fair: first, provided practice exams do well to prepare students for the actual exam; second, the exams are open-notes; finally, there is nothing tricky about the exams and the questions were entirely reasonable. Follow the lectures, take some of your own notes, keep a copy of the instructor notes handy, and run through the practice exam, and you should have no trouble with the midterm/final in this course. Study for the exams earlier rather than later. The instructors (rightfully, IMO) do not answer questions about course content during the exam window, so if you wait to start studying until after the exam has opened, you may find yourself unable to get help if you're stuck. \n\nFinally, the instructors/TAs for this course were excellent. They were readily available to assist students, from Piazza to Slack to Office hours. They were courteous and respectful to students, extremely fast with grade turnarounds, and overall ran the course better than just about any class I've taken so far. No mid-assignment revisions, no absurd grading policies, no \"gotchas\". There are some interesting concepts and tools introduced in this class about testing and debugging, but there are lots of cryptic academic only notation and syntax, and definitions that seem custom to the class. The videos are very light on information and it was absolutely necessary to watch office hours and review piazza since there was a lot left out. Grading makes this class relatively simple since most of the grade is based on the projects, but the tests are vary hard. The tests seem to cover topics that are either barely covered in the videos, or combinations of topics that we are expected to figure out on our own.  This is a fun and great course. I'm happy to see more and more courses going online so that OMSer's have more choices. I don't come from a CS background and took this course mostly for curiosity and the fun of puzzle solving. It's eye opening to see so many techniques, each with their own benefits and trade-offs. The lectures are not the most entertaining ones, but the organization is very good and I had no trouble following through. The assignments and exams focus heavily on application of concepts and problem solving. \n\nEach assignment involves reading the documentation on your own. It sounds intimidating but once you get your hands dirty with some examples, the problems aren't impossible. You can even get away with reading minimal amount of documentation. I'm not sure if the tools you learn in the assignments will be used in your future career, but they do serve the purpose of helping you learn. You'll need some knowledge about Java and at least be able to debug pointer related errors. The exams are difficult but open notes. It involves some tricks and a lot of thinking. \n\nRegarding plagiarism, the solution as simple as \"don't do it\". There's no need to worry that your one-sentence code will most likely be the same as someone else'. The teaching staff know well enough about software testing to avoid false positives. Anti-plagiarism is not your enemy unless you are happy to graduate with students who cheat their way.  Overall the class covers some neat topics. Assignments are directly related to the lectures and utilizes the tools discussed in the lectures. In fact, some of what we've done I would like to see used in my job. \n\nAssignments aren't too difficult and aren't too time consuming. Some will require extra reading but overall they should only take a few hours to finish. Exams were difficult, in part due to the exam format. ProctorTrack did make some updates for the final but the format still was kind of wonky (making table with text is kind of hard, long questions were in a scrollable box so you had to keep scrolling back and forth to get the full picture). There wasn't anything in the exam that wasn't covered in the lectures, you just need to make sure you have a real understanding of the lecture material and really understand the solutions to the lecture quizzes. \n\nThere are some pacing problems, but that will likely be improved in future iterations of the course. Up to the midterm there's something to do every week, but after there's not much material left to cover.  Content - The Udacity videos did a good job of presenting the course information. They presented the information in a pretty traditional, straightforward way (as opposed to the \"socratic\" approach of a class like ML), but they were sufficient. The quizzes embedded in the lectures were well-designed and more than just a trivial \"pick the right answer\". \n\nProjects - Favorite part of the class. Each project gave us a chance to use a tool in order to get hands-on experience with a topic covered in the lectures. Most of these tools required (or recommended) Linux in order to get consistent results. It would have been nice to start with a standard VM image, but it's also not difficult to set one up yourself. Regardless -- the projects were well-designed, relevant to the lectures, interesting, and most of all -- fun!\n\nExams - Both exams were open-notes. You could even use PDFs on your computer during the exam. Therefore, the questions on the exams required less rote memorization and more active application of the concepts learned. From what I've heard, most of the students that had trouble with the exams actually struggled more with ProctorTrack than anything else. That's unfortunate, but not really a knock on the exams themselves. The questions were fair and did a good job evaluating comprehension of the material. \n\nAdministration - The TAs and the professor were very active and helpful on Piazza. This is not necessarily always the case in other OMSCS classes, so it was definitely appreciated here. Most of the grading was done in a timely fashion, although a few of the assignments took longer than average. \n\nOverall - This class is an overview class -- you'll cover a lot of different topics, without going too far in-depth. The class is similar to CS 6035 in that regard. You'll get exposed to a lot of interesting ideas and use a variety of tools to explore those ideas, which hopefully encourage you to learn more in the future. I highly recommend this course.   Personal Background: Completed undergraduate degree in computer engineering in December 2014 with minimal CS training in Java, C, and C++ in basic concepts as part of degree. Worked as an electrical engineer in power distribution between now and then. Full-time online student currently. No formal software analysis and test training in academic or work environment. This was one of two courses that I took in my first semester. \n\nCourse Experience: Overall, the course was worthwhile from my personal background. The instructors and TAs are truly excellent in operating the course and helping the students understand the material. The assignments are very effective in teaching concepts and new tools. All horror assignments alluded to in previous semesters have been removed. Some tools were specific to academic research and not necessarily widely used in industry, which may not be beneficial for some students. Everyone had to fight through the difficulty of obscure environments and languages. I had an abnormally large and painful learning curve for most assignments due to my deficient background, hence the 25 hours a week. Five different languages used throughout assignments, but I was able to figure out the appropriate usage of each given enough time. Once you endure through the learning curve, you realize the simplicity of the coding for all but one assignment that required a specific algorithm that I hadn't implemented before. The concepts and analyses are relevant as well. The exams require application of the knowledge rather than simple memorization. For example, given this type of analysis, find the output of the given simple code rather than recite the definition and characteristics of an analysis. I gave a \"liked\" rating as the lessons I learned on the assignments and exams were truly valuable but often cost me 20% or more on my grade, which can be a difference in a letter grade. Then again, one should have to earn an A.  Full disclosure, I have no idea if I'm passing this course with a B or not, so I may not even get credit for taking it. Despite that, I learned a lot in this course. I'd even go as far as to say that this course actually prepared me for a separate assignment in another course which helped me apply what I was learning while taking this one. As a qualification, I am of the student build that didn't come with a complete CS background, instead having a degree in IT with an emphasis in programming. However at time of taking this course I have never taken a traditional algorithm and data structure course which the class expects you to come with some knowledge. \n\nThe course surveys different testing tools and ways of deriving analysis. It requires a lot of exploration and research on the student's part which I think is largely why there are many negative reviews because in many instances you were stuck reading through pages of a specific API in order to complete one part of the assignment. For me at least I can say that this has largely made me a better programmer though it feels like a trial by fire. We had a pretty active piazza environment so I was able to make some pretty good strides. However, be aware that the instructor is a stickler for plagiarism, so absolutely it is to your benefit to write your own code by yourself. \n\nThe tests are open book, but it doesn't really help because it will be based more on your ability to apply the knowledge to problems. \n\nClosing statements, this was the first iteration of the course online so there were a couple of speed bumps. I expect that the course will get better with time.  one of the worst course I have ever taken. Both professor and TAs were disinclined to help students with very less participation and clarification. I doubt if I will ever use topics learnt in this course in my professional career. regret taking this course after putting so much of effort and time.\n This was my first course on the OMSCS which I liked overall. My background in Java helped out a lot in the assignments but some of them were pretty tough such as working with Datalog. TAs and instructors were really helpful on Piazza and would promptly answer any questions raised. Midterm and Finals were challenging but very fair and would focus on testing the understanding of the concepts taught in class. I liked that there were a lot of assignments that tested most stuff taught in class to help in understanding and getting to use real live tools used in industry to showcase the concepts taught in class.  This was my first course in the OMSCS program.  \nThis course provided an introduction to a variety of software analysis and testing methodologies.  The tests were tough but representative of assignments and lecture materials.  The assignments used a variety of programming languages (which I thoroughly enjoyed) and gave insight to the usage of the techniques from the lectures.  The assignments at first pass came across as difficult but after reviewing the assignment instructions in more detail, the instructors gave plenty of hints and suggestions of how to proceed.\nThe use of Piazza as a forum made getting information from instructors, TAs and fellow students simple and convenient.  The instructors were responsive and helpful as were the TAs.  Additionally, using Office Hours linked to a Piazza post with times into the recorded videos made finding answers to questions convenient and relatively pain-free.\nSince this was my first course in the program I don't have much basis for comparison, but I can't think of much that could have made this course better. This course was very hard, but if you want to be exposed to some bleeding-edge research on analysis and testing techniques then I highly recommend this class. Ok, bleeding-edge might be a bit of a stretch, but you will learn something new :-).  Also, fair warning to those considering this as your first class. This class can take a lot of time depending on your background. Don't let the average workload fool you. My background academic experience consisted of predominately electrical engineering courses sprinkled with skeleton computer science code problems during my undergraduate program. My current job is a System Administrator and I hardly touch code. I can definitely say I this class took a lot of time due to my background. If you are like me and you don't have a decent amount of software development experience, I would recommend taking SDP before this class. You definitely don't have to take Software Development Process before this one to excel, but I believe SDP would give you the exposure of typical bugs software engineers/software developers would encounter. This exposure would give the student a deeper appreciation of techniques presented in this course. I believe anyone can take this class and do well if you work hard; however, to shave off time of some of the projects it will serve you well to have a solid grasp of C/C++ i.e pointers, pass-by-reference, STL, etc. and Java, some graph theory terminology i.e. node, edge, path, directed etc, algorithms of common data structures such as trees, linked lists, and arrays, very basic probability and statistics, and all of the common operations from Set Theory. If you decide not to brush up in these areas you can still do well, but it may be a bit of a struggle.  If you have questions during the course, don't be afraid to ask the instructors, they won't bite :-). If I had done this for the first couple of projects of the course, I more than likely would have had a better outcome.  What can I say? This was my first rodeo so I had to live and learn. Exams are very hard and will require a good bit of study time to do well. For my class, they provided a very watered-down version of the exams as a review and that helped a lot. This was my first of two classes in the OMS program and I did learn a lot. Hopefully, this review will be of some help to you and I wish you the best in your future endeavors with this program. Good luck!  In a sentence, the material is interesting but assignments' docs too suck and staff too sour to enjoy course much. Still, recommended if keen interest in the topic. \n\nRe: my ratings, I attempt to succinctly capture every detail from the lectures, so I end up spending a lot of time on the OMSCS courses, including this one. \n\nI found most of the assignments really difficult, mostly because the documentation provided with the software was bad and, strangely, there were no teacher-provided materials (other than scattershot Q&A) towards filling that in. Quite too much sleep-deprived hacking resulted. \n\nOn the other hand, the exams were well written and the practice exams helpful. I thought the video lectures also very well done. I didn't care much for the teaching interactions though, because they were aloof, with all that implies. Fellow students were more helpful (as is often the case). This was a fairly interesting class, with a few serious flaws. The teaching style of the professor was somewhat detached and aloof. He rarely showed up in Piazza, and left things mainly to students. The head TA was active, but his style was also a problem, usually answering questions with more complicated responses that did little to address the fundamental problems that students were having. \n\nThe assignments were written in a very dense academic style that made for a lot of confusion in the students. \n\nThe assignments were very challenging, with the mean scores on the low side. The assignments often required considerable outside research. In some cases we were referred to external resources and documentation that didn't match the stuff provided with the assignments. \n\nThe first assignment was on a tool called Dafny, and it wasn't covered in class at all. We were given the assignment with a brief overview, referred to the Dafny website, and left to puzzle it out on our own with virtually no instructor or TA guidance. \n\nThe midterm was very challenging, and didn't have enough time allocated for it. \n\nIn spite of all of this, the material was genuinely interesting. This could be a fantastic course if the problems were addressed.  Despite what the previous review said, you get as much out of this course as you put into it. The TAs were very responsive (usually my Piazza posts were responded to in less than an hour, and they were also almost always available on Slack for quick queries) and most of the time they were helpful without giving the lab away. Having said that, one of the labs was slightly problematic in that you either understood it or you didn't, and there was no help that could be given (other than \"don't overthink it\") without giving it away. However, this lab is being reworked for next semester, so that should no longer be an issue.\n\nIf you come into this class without knowing C++ (pointers and STL containers), C, Java and shell scripting to some degree, you are going to have a hard time. However, if you know these already, the class is not that hard. Some of the labs are head scratchers, but once you figure out what you need, you should have no difficulty completing them.\n\nIn summary, it's an interesting course, and, if you know how to program (and if you don't why are you doing a masters in CS?) then you should have no difficulty passing.\n\nOne other thing. Although I put down six hours per week, I actually did 11 hours some weeks and 1 hour on other weeks (watching a lecture) because the labs were due every two weeks. But that distribution has more to do with me putting off the labs until a few days before they were due rather than any issue with the course. Not a good class.\n\nMaterial: The first half of the class teaches you some outdated APIs with little to no documentations, which feel like some orphaned research project. I fail to see how they can be any use once you move outside of academia. Second half teaches you tools that may actually be useful, but less than 50% good does not make up for the horrid 50%.\nAssignments: Extremely frustrating. Some assignments are extremely easy while the some are very difficult, not because you learn some difficult yet interesting concept, but because they are designed to be - otherwise all the assignments will take only a few hours to complete. Most assignments are auto-graded, so if you have typos in your typed answer don't expect any leniency. There's no Slack chat for the class - again if one existed the assignments would have been super easy. Some can be completed by \"throwing random inputs at the wall and see what sticks\", which is actually a valid testing framework, according to some lecture.\nLectures: Difficult concepts are skimped, while lecturer spends a lot of time explaining obvious, common-sense concepts. Lectures are mostly disconnected with assignments. Expect maybe 10 minutes of useful materials and 30 minutes of filler contents, and unlike ESPN the filler contents can give you a coma. Examples are not adequate so the office hours are mandatory if you want to understand what's going on, which you really don't since....\nExams: Completely different from the samples and the lectures. I mean, seriously, if I didn't study Statistics in college (yes, statistics) I would have easily lost 25% on the exams. Esoteric concepts from lectures were drilled, so you have to really think outside of the box. It's excellent to get students to drop the class and apparently so, since piazza traffics pretty went quiet the weeks after the midterm.\nTAs and Professor: The Professor did not show up at all so we can safely disregard him. TAs work really hard answering questions and maintaining conversation but harder not revealing solutions. I feel sorry for them, since their hands are tied. The way assignments are simply prevent them from having a meaningful conversation about the concepts. Sometimes by explaining things in a non-revealing way they ended up confusing people. \n\nSave your time and $800+ and take another class.  This was a good class. It was well organized and presented some interesting topics. There's no reading, and the assignments were typically not that difficult (there is one that requires you to learn DataLog which is tough but definitely doable). The exams were tough, but fair. The concepts presented in the lectures aren't too difficult to wrap your mind around, and I found many of them very interesting. \n\nSome of the other reviews complain that the tools used are out of date, which is true. However, they're still interesting to use in terms of learning the concepts and thinking about how you could apply the ideas to your day to day work. Of all of the OMSCS classes I've taken, this one actually has some direct use in the industry (e. g. statistical debugging). \n\nThe class seemed well-run, with assignments being returned within a week in some cases. There were recorded office hours weekly which was helpful with some assignments. Excellent presentation, clear and concise lectures\nVery good overview over modern, academic approaches\nExpands thinking about testing and offers a glimpse into academic advances \nQuizzes in lectures really help understanding the content\nVery well paced, consistent amount of work every week\nGreat choice of topics, good little insights into previous and current research\nVery active professor and TAs\nGenerous grading curve Software testing and analytical skills is a must for security application developers. It should help software testers to reduce bug count before deployment and manage bugs when software is in production. Back to the course. Basically it covers 3 types of software testing & analysis methodologies: static, dynamic and a combination of the two. The coding assignments overlaps reinforce the lectures. Some were very challenging; however they provide output goals for each. Personally I didn't have a problem doing the coding assignments, the exams were more challenging to get an A in. The class average on the 2nd exam was approximately 68. Think critically about the lectures. This was my first summer class, and it was perfect for it. There was a lot of material crammed into a few weeks, but I felt the amount and complexity were fair for the time. \n\nThe field of analysis and testing was pretty new to me, so I learned a whole lot of new methods and techniques. Every lesson was about something new and exciting that we got to apply right away on one of the multiple assignments we had. It is a very hands-on class, so be ready to use Java and have a deadline almost every week. \n\nThe two exams were open notes. I had to put a lot of hours studying the material and I fared very well on both. The questions were fair and covered the content of the lessons, but you have to make sure to know it all, albeit of having the notes in front of you. Really engaging class with a ton of instructor support. Highly recommended if you are just starting the OMSCS program as it eases you into the school schedule. The course content lead to more investigation into different testing frameworks and code analysis that I am able to apply at work! Quick background about me that might help understand the context of the review: I am a software developer working full time in a corporation (12+ yrs). Im quite comfortable coding large pieces of backend code (servers) mainly in C/C++.\n\nWith that said, here is my take on this subject:\nI found this course very well organized. The lectures correlated well with the projects and was quite informative on the latest trends in the software testing field.\nAlthough the projects were quite straight forward, I found the writeups associated with the projects a little tricky. Especially when it came down to grading these projects, i found some of the answers content to be subjective\n\nThe exams a bit challenging and needed some solid preparation before hand. Getting a good grade in the exams required a good understanding of the topics covered.\n\n\nIn summary: \n1. Very well organized course and lecture videos\n2. Very responsive and helpful TAs and prof(s)\n3. The content was informative and the up-to-date tools used provided useful insight into incorporating them in real world scenarios\n4. The exams were not multiple choice and was not easy. It required a good understanding of the topics covered. What a great class! I think some people are expecting a \"how to unit test\" type class, but it really dives deep into how software can be analyzed at both the static and dynamic levels. There's a lot of depth to this area, and I feel like this class gave me a foundation to dive into the theory and application of so many techniques. This class is basically using tools that only grad students use which makes it hard to google. I was able to ask lots of questions and make my way through the course. It did introduce me to some pretty cool testing tools for Android but the other tools were a pain and will probably never be used again. I would recommend this course as it does add value. Overall:\nI enjoyed this class and the material it covered. It had more of a \"testing in theory\" instead of \"testing in practice\" approach that I found refreshing. I didn't find the class too difficult and it served nicely as a companion course in a semester where I needed to take two classes. \n\nWhat I enjoyed:\nI found the material covered in the course quite interesting especially in the second half of the course. \nThe majority of the assignments mapped to the material quite nicely with the exceptions listed below. \nThe tests were somewhat difficult but really helped solidify my understanding of the material instead of being an exercise in memorization. \nThe TAs (and other students) were helpful on Piazza. \n\nMy concerns:\nThe first assignment didn't align well to the material covered in the lecture. It's not a major issue but it wasn't clear what they really wanted us to get out of the material based on what was on the exam. \nThe last two assignments were too easy and didn't feel like they required an understanding of the material to complete. \nThe last lesson (dynamic-symbolic execution) didn't have an associated assignment which was disappointing. \nThe lesson on type systems didn't have an associated assignment. \n\nConcerns I heard from others:\nThe class sometimes requires you to use outdated APIs that are no longer supported/poorly documented. I agree with this but it wasn't a major headache as I've had similar experiences with other classes. Just know what you're getting into. \nThe APIs are difficult to get set up. I used the class VM and kept up on Piazza so this wasn't an issue for me. \nMost of the material was recycled from a course offered by Stanford. I think that the material/assignments can be freshened up a bit per my comments above but this doesn't bother me. \nLack of involvement by the professors. I agree but I think this is normal for many other classes I've taken. The TAs were helpful and the profs were active on Piazza prior to exams. This was my first OMSCS course and overall I liked it. I have a background in Java and C/C++ and that helped me on the lab assignments. The hardest part of the class for me were figuring out how to start some of the lab assignments we had. A few of the more difficult labs felt like we covered a topic briefly in a lecture, and then we had to immediately work on a full lab regarding this topic. This led to me having a hard time initially figuring out how to start a few labs, and I only made it halfway through lab 5 because I had a hard time understanding Datalog. Even though I didn't do well on lab 5, I did fine on the midterm and final (which I felt were both challenging but fair, the final wasn't cumulative but was harder than the midterm) and got a B in the class. For NON-traditional students \u2013 the course is not difficult but expects you to be familiar with many different tools. Don\u2019t get caught because you not familiar with basic linux debugging for java and c.", 
    "CS-6400": " This course is too basic for a graduate level course. To be fair, it did cover everything that the syllabus mentions, and I have a few years of application development experience. But still, I expected it to be a much deeper course. We did not even cover the basics of locking and transactions. I was expecting a deeper understanding of these concepts, as well as may be query optimization which are extremely relevant in today's world of distributed computing. Instead, the course spends inordinate amount of time on ER diagrams and ER modeling, which are outdated tools. Nobody uses them in the industry for any real world project. Piazza posts/questions tended to be left unanswered for a long time, or left with student answers with no instructor endorsement.\n\nI had a great team, so the project execution was fun and painless. But I can see that if you mess up in picking the team (wide range of tie zones, wide range of capabilities etc.), then you might struggle a bit with projects. However, the project itself isn't too hard. Even a single person can do it. The struggle would be with coordinating between team mates, if you end up with a bad team.\n\nThe reason I say you cannot Front load the work is only because the team project will only move at the team's pace. Rest of the content can be learned quickly.\n\nVery lightweight course. I feel I wasted a course as I did not learn anything new. It is a foundational course though, so that's good. This is basically an easy version of undergrad DBMS course. Your mileage will vary. I'd suggest keeping it for when you need an easy credit. Overall I like this class, but I wished the professor and the TAs are more organized (they sometime argue with each other on the requirements for the project on office hour). Also I feel like I spent more time on designing and developing the UI instead of working on the database/sql. If you are coming to this course with very little experience in databases, as I did, expect to learn a LOT but be prepared to put in the effort. Compared to my previous OMSCS course (6300), I would say I averaged twice as many hours reading through the (often dense) textbook and studying for exams. The real gem was the project, where we learned everything from designing databases with diagrams and understanding DB concepts (EER, IFD, relations), to implementing them using languages and tools I'd never programmed in before (MySQL, Php, HTML, MAMP). It provided me with not only a working prototype of a database in action, but also with a great experience working with teammates who I plan to keep in contact with. By comparison, the four exams only nominally helped to prepare us for each phase of the project, and seemed much more difficult than initial self-study and sample exams would indicate. I think that pacing in the course could be improved; the beginning felt very rushed to complete everything, whereas by the end it felt like there wasn't enough to keep us busy. It was up to us to plan our learning material consumption, but the deadlines with exams and project phases did not always give ideal time lengths to prepare. Professor Mark and the TAs are knowledgeable and approachable, though if you really want questions answered be prepared to ask during office hours. Overall, it was a challenging course and I liked certain parts more than others, but I definitely learned a lot. This was my first course in the OMSCS program. I was lucky to have a great team for the group project, so that eased some of the tension around the massive project- which, required a lot of coding outside of SQL. I enjoyed the lectures, which were done by Dr. Leo Mark. The exams were more challenging than the sample ones that were distributed. Everyone on the teaching staff was very responsive and very helpful when questions arose (for me, our team, and for the class). I have database work experience and learn very little from this class. Although textbook has been updated to include new technology such as NoSQL, it is not covered in the lecture. The class project focused too much on web development as opposed to the database. There are a lot of ambivalent requirements which generated tons of questions in Piazza, which led to lengthy discussions that turns into bad feeling and snarky arguments. There is no helpfulness or positive encouragement provided in learning. Lots of negative responses and sarcasm. First, you need to search and read through all piazza posts before asking your question (to avoid annoying the TAs). Second, you didn't get a straight answer most of the time, so might as well do the research yourself. My take on group project: there will always be someone who doesn't do any work. With that in mind, always focused on your own learning and not worry with what other people do or don't. If you're lucky to find good people, it's a bonus!  if not, that's okay too. The exams are open book and open note, total 4 exams. They are difficult and tricky. The project is painful and lots of UI work (such as dynamic drop-down parameters).  Use PHP to create the project because there will be examples provided. I would avoid this class.  4 Exams, 2 so far, both open book notes. All easy I thought although median / avg was mid 80s. Projects are team based but not terribly difficult, especially with multiple input from teammates to correct mistakes. For someone completely new to databases/SQL some added SQL examples would be helpful (Stanford's intro to databases class on coursera / youtube goes into more detail). The professor and TAs are quite active, especially near the due dates. This is midway through semester, I expect project work to ramp up a little later in the semester during implementation. \nEdit: So I would definitely say the course gets harder later on in the semester since the final project implementation came 1 week after an exam this semester. Make sure you have lots of free time the two weeks before that. updating average workload from 4 to 5 hrs as the beginning of the semester was still low commitment Well organized course presented by effective, patient, knowledgeable and responsive instructor Jay Summet, and Will, Emile, Aoyi, Peter, Tosh, and other TAs were responsive and dedicated. \nDo not expect an easy \"A\" (low percentage A's). Material covers nearly 700 pages from textbook (read carefully), covers EERD, relationships, relational algebra and calculus, SQL, functional dependencies and normalization, as well as indexing. Four exams divided content logically, but tricky questions yielded low class averages (70, 71, 72, 80). \nSemester long group project spans three phases to design and build functional web site with SQL DB back-end. Teams allowed freedom to choose DB and development stack (php, python, java, javascript, etc). Project required substantial time investment. Choose your team carefully based upon skill and commitment. My background is not in CS and I hadn't designed databases before I took this course. I think this course is an easy introduction to databases for students without DB experience. For advanced students, I think this course might be on the light side of the spectrum. Exams are super easy (I got 100 from all of them). Phase 1 and 2 of the project are easy too. The only challenging part of this class is the phase 3 of the project. Having good team members helps a lot in phase 3. The exams are open book; however, you will have a hard time if you take the exam without reading the book in detail. I think this is a very useful course. Project bit can be a bit hard for people new to database but it is well worth the effort.  The course had a lot of potential, but started at too basic a level. I'd have preferred diving right into Relational Algebra and Relational Tuple Calculus, as well as covering more advanced DB topics. It seems like the first half of the course was a remedial introduction to concepts that should have been familiar to master's degree students. \n\nThe final project was a really jarring change from the rest of the class, where we had to implement a functioning webapp. This divided the class into two camps: full time developers who could do it easily, and non-programmers who struggled with the implementation.  There's 4 exams and a group project with 3 phases. Basically watch 20 minutes of videos and read a couple chapters every 3 weeks for the exams. And the group project has some videos of how to do each stage. Overall about 5-10 hours of studying for each exam and about 10-20 hours of work for each stage of the project. Main criticism is the professors and TAs love \"gotcha\" questions and grading for the exams and project. If you aren't good with study and work at your own pace you can fall behind as well. This wasn't a hard class, and it wasn't necessarily an easy class. There are two big problems from this semester. First, the project and the exams are completely disparate. There is one set of lecture videos for the exams and another for the projects. It makes budgeting time a little weird, especially since the project is groupwork, so you also have to work around other's schedules. \n\nThe other issue is that the project was not well defined. After the first part of the project was completed, it was clear that the requirements were vague and the desired app had a lot of holes. No feedback came for part 1 until a week before part 2 was due. And then 3 was released with a truncated set of requirements. \n\nUltimately, this course is good if you are looking to learn about databases at a very basic level, and how database development should fit into application development processes. This is a very well organized course, thanks to Jay, Will and other TAs. This is particularly true when it is compared to CES 6242, a complete disaster reviewed separately, this semester. Jay is a great professor, he is knowledgeable, responsive, and respectful, though i have a different opinion regarding the exam questions (I run my own graduate course for four years in Europe). Of course, my old friend Will is great as usual, I will perhaps miss his long but detailed posts on piazza in the future. \n\nBeing a graduate course, the topics covered here are fundamental, but never assume an easy \"A\". This course, arguably, has the lowest percentage of \"A\" among all the OMSCS courses. The exam questions are purposely tricky. There were four exams in total, the grade mediums are below 80 (out of 100) except one exam. Though my grades are 2~4 sd higher than the medium, but I do not believe that tricky questions are good to motivate studies. Another thing I would approach differently is the course content, instead of emphasizing on EER diagram which is essentially a formalization to represent information, I prefer to dig deeper in more practical issues, e. g., query performance optimization, normalization, or non-SQL database. In addition, I suggest to remove exam #3 for SQL and move the questions to other exams, there are so many moving parts in the course, which makes it hard to follow. \n\nIn the group project, we were asked to build a fully functional web application with a database back-end. This is not hard but you have to invest serious amount of time. I am having a hard time to believe people only spent five hours per week can contribute much to the project. My advise is that pick your teammates wisely, preferably someone has previous experience on developing similar applications, and read the book carefully. Overall good course if you don't have a lot of experience developing an application and want to learn. You create an application for a food bank where you can create users, view/edit profiles, manage inventory, send and accepts requests and manage clients to use the services. The content of exams is easy, but the questions are tricky. Spends 75% of the course on basic concepts you should know if you know anything about databases. The other 25% is a shitty overview of database performance. The project is a mess. The requirements document is a garbled word vomit of ideas and requirements which really hurt the head. It is really 75% web development project and 25% database, which is a mistake by whichever idiot thought up the project. Done properly the project should take 200 hours to complete, which is an inappropriate amount of time a project in an ms program should take. Overall this class was terribly executed. Unfortunately the guy executing it makes nearly 300K per year, go figure. Course content itself is easy and covers basic concepts. If you've worked with ORMs and know basic SQL, you won't learn much. The EER diagrams, schema design, and normalization content is useful. Read a book and don't take the course if that's what you're looking to learn. If you haven't done web development, you will learn a lot from the final project which is a web application. The database component is a decent component to the project, but there's a lot of unnecessary UI requirements. Many requirements are arbitrary and not relevant to the database (i.e. drop downs, radio buttons, printable pages, unit conversion).\n\nProject was terrible. It wasn't reviewed for accuracy or the actual technical requirements that students were supposed to get from it. It was refined over the semester, and felt like the instructional team was making it up along the way, which led to a lot of questions on Piazza. No rubrics were provided for the three project phase submissions. Grading is inconsistent. I had a great group, which made it bearable. Choose your group wisely and try to find others that can complement your skills for the project. There's a team formation period so use that time wisely to find others who are motivated and engaged.\n \nExams were fair for the most part. The last exam was pretty tough as some of the questions, especially calculation questions on indexes, efficiency, and performance weren't like those found in the book or sample exam. Still possible to do well if you think through it carefully. Be prepared for 1-2 questions that don't cover the content assigned in the syllabus. Be prepared for 1-2 tricky questions per exam that assess small details that aren't relevant or core to the course material.\n\nInstructors were not responsive. The head TA was pretty defensive in some initial threads which didn't create a welcoming or positive learning environment on Piazza. Many Piazza threads were never answered, including exam questions and project requirements. The instructor asked for feedback in the middle of the course (which many students appreciated including myself) after some students communicated about the negativity on the forums and the somewhat artful deception of the few exam questions I mentioned before. Most of those threads went unanswered even after the instructor said he'd follow up with individual responses.  \n  \nHope positive changes actual take place in future offerings. I'd recommend the class for those uninitiated with web and SQL. A lot of people already familiar with databases tend to not like the course. This course is awesome, I really love it. The exams are a little tricky, but reasonable. The project is well designed if you do not hate to code for a web.  This was a nice class. If you come with previous DB experience, it will be easy. If this is your first interaction with relational databases, then it will be harder. There are 4 open-notes exams. The 4th one was by far the most difficult. The final project will take a long time but everyone on my class fared very well. I continued breaking my rule of avoiding courses on their first run once again, when I took CS 6400. \n\nHaving made it through the entire semester, I found this course to be very easy at the beginning. The first two exams were essentially review for anyone who has done ER diagrams and relational modeling. The third and fourth exams were moderately difficult, with relational algebra/calculus and functional dependencies being the hardest concepts to master. Some of the exam questions regarding SQL were not everyday queries, so you did have to stop and think about what was being asked. Even though the exams were open book, not having lecture notes or some familiarity with the material would put you at a disadvantage. (Some students were \"kind\" enough to share their notes, and I'm surprised the instructors didn't put the kibosh on that. )\n\nConcurrent with learning about the theories, we had a group project assignment. As always, the most important factor is your fellow group members. I was lucky to have a hard-working team, which made me sad that there were no peer evaluations, as I would have gladly given them all positive feedback. (One problem with group formation is that there was a \"re-org\" deadline for groups to reform after a member dropped the course, that was before the final drop deadline. So some groups had less manpower if someone dropped after the \"re-org\". ) The timeframe for each phase of the project got progressively shorter and shorter, and so the effort level had to kick up a notch or two by the end of the semester. There was also a final WebEx presentation that didn't quite have all the kinks worked out, but was effective. \n\nAll in all I enjoyed this course and I found the later material very interesting and can say I learned something new. Dr. Mark, while no longer actively researching, clearly is an expert in the topic and has great opinions. The lead TA did a commendable job keeping things organized. It was a good experience.  If you do SQL at work, you do have a mild advantage in this class. However, the 4 tests also cover EER, relational algebra, relational calculus, EER to relational mapping, function dependencies, normalization, file organization, and indexing. Exam averages were 74, 71, 85, 69, but project grades had much higher averages, 87 and 90 for the first two phases. The full-stack project this semester was very time consuming, but the database parts were less than the majority of the work in phase 3. Choose your teammates wisely and finish phase 3 coding early because there is an exam and extra work in the form of sample data (3k lines of SQL inserts in our case) and a demo to prepare at the end. Phase three of the project is primarily graded via the demo where you checkout the code from github, load the sample data into MySQL and walk through the demo via Bluejeans with a TA in 25 minutes or less. Check the schedule for your semester, and if its the same, yes, finish coding early. They are not kidding about the importance of practicing the demo. Recent topics like NoSQL and big data are not covered, yet. As mentioned by other reviewers, Prof. Jay Summet was very engaged on Piazza. He and the TAs were extremely helpful answering questions about the material on Piazza and the regularly scheduled office hours. The class was well organized and well run. This is a pretty solid course on dB design. It focused a great deal on theory. Lectures were very well prepared- although I personally prefer 1-2 longer videos edited together instead of having to click through 6-8 short clips. Lectures alone did not prepare nearly enough for exams. You HAVE to have the textbook in order to fully understand the content. The course project was the best part of the course, but (at least my team) spent way more time on the application development than the dB design. I enjoyed this course and working on the project, but be warned- there is very little hands on database design and practical examples.. and quite a bit entity design and diagramming.  This was a class that started out not tame, but really ramped up towards the end.  Phase 3 is a huge amount of work, and the final test 2 weeks later is the hardest of the semester.  You'll spend hours upon hours on Phase 3 and that final exam.  The whole class is structured around designing and building a database-backed application (like many websites you might have used).  It is a lot of fun to work on Phase 3, since it's all about implementing something using MySQL+PHP, Python, etc that you've been designing all semester.  But the graders are rather tough about the first two phases having the diagrams and pseudocode being perfect, when in reality a lot of the pseudocode gets changed when actual implementation occurs (at least in my case).\n\nAll in all it's a good class, and the workload you have really depends on your group.  But it's more than you think, and I don't recommend taking a second class with this.  The workload isn't much at first, but watch out at the end of the semester since a ton of work hits you all at once even with the revised schedule in Spring 2018. I loved this subject. The instructor was really good. The TAs were pretty understanding when there were grade disputes and most often they favored the students. In all very nice course to learn more about Databases. I wish I could take this again. Overall for somebody who does not have a formal CS background, I'm happy I took this as my first OMSCS course.  Although it is a database course, it broadly covers/requires other CS topics like web development, disk management, AMP setup and admin, PHP or Python scripting.  I would only recommend the course for students without much database development experience.  \n\nI am not a fan of the book.  You should get it for the course as a reference and for the exams but don't plan on keeping it.  \n\nThe exams are not difficult but are not easy to get an A.\n\nI like the concept of the project because it demonstrates \"putting it all together,\" but the Fall 2017 semester version was not well executed.  I think the TAs and instructors are taking feedback appropriately to improve it in future semesters. A great database class! Ignore those whiners.   I haven't taken any database course before, and this course is very friendly to those students without a good cs background. Exams are easy and open-book. Projects are a little tricky. Group corporations are very important for projects. I definitely learned a lot about SQL, Html5, CSS, PHP, Javascript and Jquery in this course. This was a challenging class for me even though I've been developing with databases for years. The main reason for this is because some mostly academic topics are covered in depth such as query calculus and algebra. These were completely new topics for me. The rest though was pretty much the same you'd learn in any db class I was having lot of expectation from this course but I felt it is not organized properly plus the concepts were not explained that much in detail. My hope after taking the course was to write more complex queries but I don't feel that I gained anything in that area. Even some more light can be thrown towards database performance and storage. Though I enjoyed the ER concept taught in this class. But to me this class is for entry level, I would not suggest to take this class if you have idea about database and expecting much from it though you can go for this one if you want to complete electives. Best of luck :)   This was one of the best classes I have taken in terms of usefulness. Was slammed with a terrible group unfortunately so in the end I had some very late nights where the onus was mainly on me to get the project done. I had people in my group that almost did nothing so I can see how this gets a rating of not time consuming. Don't be fooled though, you may have an extremely time consuming project to do if your group is bad. very easy course, if you have previous experience on DB. the group project takes some time to coordinate but if you've got a good group it will be fine. Major task in this course is to build a DB backed website/software. tests are not hard, except for the final one. course materials are more on the conceptual side, than the practical side of database systems. I had previously build some websites and had some experience in MySQL, but I still learnt something from this course, especially the design methodology, and I really like it. Course material is a little out-dated as it doesn't address NoSQL databases. There's one project, which is a group project, in this class that consists of 3 phases: requirement gathering, documentation and implementation.\nThere are also 10 non-proctored quizzes, each worth 2% with no limit on the number of retries. 4 proctored, but open book, open notes (no internet access) tests. Too easy for a graduate level course. Much of the first half could be condensed into a 3-4 week review of normalization and data design rules. Would like to have seen the course expand more on indexing/performance strategies, modeling approaches to analytical systems vs transactional, and perhaps an intro to big data.  I love this course. I must say that I'm lucky to get a really great team. With our effort, I built my first application. There are 3 exams for summer semester. The first one and last one are tricky. The second one is all about SQL and it's straightforward. This review comes after the third of four exams, and near the end of the final project. \n\nDr. Mark is straightforward and to-the-point in lectures. The textbook is readable. If you try taking the exams without having read the book, you will have a bad time. \n\nAs mentioned in other reviews, this course is mostly review for experienced database developers. This course is deceptively easy. The material and concepts are not hard to grasp, but the exams have some subtle questions that might combine three or four little tidbits into one question. That's probably why the average exam scores have been in the 80's. \n\nFor this semester, there are three group projects. You're given a spec document, and must design and implement a database-backed application to satisfy the spec. The last of the three projects is implementation, and it feels like busywork. \n\nOverall, kudos to Dr. Mark and the TA's. This course was interesting, well-run, and not too difficult.  The exam thing will not come outside of the lecture. At first I read a lot of book to prepare and then I just learned that all the stuff in exam is only from the lecture which saves me a lot of time to play overwatch. The course was challenging, but enjoyable. I did have a strong SQL background going into the course, so was familiar with a lot of the presented concepts already. The SQL calculus and algebra concepts were interesting, but gave a lot of people some headaches. The assignments themselves were straightforward but did require a significant amount of web coding knowledge - I had to learn python and Django on the fly. So make sure you choose your team mates very carefully. \nTests were straight forward but did require understanding of the lectures. The provided practice exams did give a good idea of what the exams would be like, as well as ideas for what areas to focus on for studying. Make sure to pick up the textbook also, it does help with understanding the presented concepts.", 
    "CS-6440": " One of the worst courses in this program even after the complete remake in Spring 2018. I would say the course is over ambitious in terms of scope. It attempts to cover many subjects within the area or US health system and standardization for interoperability. It feels like fitting 20 pounds of stuff into a 5 pounds bag. In the end, I did not get much out of it. In addition, the course lectures include many interview videos which are often lengthy but do not provide much academic values to the topic. The only reason I took it is because it is mandatory for the II specialization. Instructors may re-evaluate their choice of using HL7 v3 standard for the FHIR activity because there are limited examples available online. This class is very very easy. The lectures themselves are extremely boring, and I did not learn very much from them. I did have to do most of the development work on our group project BUT, since I did most of the work, I also feel like I learned the most about the FHIR API and how to use it and how some of the health data is structured. That was all really interesting to me. My biggest gripe about this course is that I feel the instructors are focused on assignments and grades... rather than students. Maybe it's because I was taking EduTech at the same time, but I felt like the instructors just LOVED taking points off for things like \"video was 30 seconds too long\" or \"Essay was too long\" (the essays are maximum 800 words - it is hard to sufficiently answer the questions without going over) or \"Wrong format submitted\" (even if the assignment guidelines were modified before the due date), etc.\n\nWe worked with an external mentor (a doctor in Atlanta, Georgia) on our project and he was very helpful and very responsive. It seems most of the External Mentors were really good. I wasn't a fan of our TA Mentor (for the aforementioned reasons), though. This is definitely one of the easier courses in the program in its current format. You work on a number of quick assignments, as well as 3 essays, but the bulk of the course is spent on a group project. Lectures are good but light on content, you're finished with them halfway through the course. The group project is teams made up of 4-6 people working on mostly pre-defined projects in the healthcare field. In most projects you work with a mentor who is in the healthcare field. As long as you're with a competent team the group project should be fairly manageable. This course would pair nicely with another course as its workload is light and you can balance around a lot of the work to fit your schedule.     This class was fairly straightforward when I took it, but I ended up spending so much time on the class project due to my teammates not pulling their weights. Content wise, it was very light, and so I decided to buy two books authored by the professor and read them from cover to cover because I was interested in health informatics. I would suggest picking up the books to maximize your learning in this class, and pick your group members wisely. The material is very interesting. The professor and TA Team are passionate and helpful. Class Piazza Participation is great. As mentioned in the previous reviews, the FHIR activities were pretty interesting and provide hands on knowledge on using APIS accessing FHIR database. The recommended readings provide good background on the topics covered. Would have been better if the team project weight is reduced from the current 35% because the team performance matters a lot in delivering a quality project. Yes, this class is an easy A. Yes, this class had some major communication problems. \n\nThat said, I loved this class. I have many, many years in the informatics field. This course exposed me to many amazing ideas and technologies I'd never heard of. \n\nI also had an amazing team; our group project could easily be turned into a startup. \n\nI certainly understand why many folk may not like this class. In my case, it was an absolute joy that greatly boosted my self-confidence and had a substantial impact on my career.  I loved this course because it offered a view into a huge field that I was unfamiliar with, and showed just how much of the field could stand to benefit from technology. The essays were a bit high level considering they have a low word count requirement, and the group project can be hit or miss depending on the team sponsor/mentor, but this is one of those courses where a student can get a lot out of it if they are curious about the healthcare industry and willing to put in extra effort. This is one of my first courses. I really liked the course. The professor was so full of energy in the videos. The essays were fun to write. I spent a lot of time reading, and rereading, and reading the external material. Spend the time to watch the videos and write well-crafted essays. TA's will reward you with extra credit. I think they read so many essays, they can tell the difference between those who spent the time learning the stuff and who's just bs-ing their way through. I highly recommend the course! The Health Technology background is useful, the class has minimal technology training, the real-world project is the saving grace that made the class worth taking.\n\nThe lecture videos are the worst of any OMSCS class I've taken.  They are mostly the instructor speaking with no use of visual aids or poorly edited interviews with people in the health field.  The class was very disorganized with many poorly communicated corrections and changes through the semester.  There is almost no teaching on the actual technology beyond basic concepts and logical architecture of FHIR.  The activities are rudimentary and don't provide much benefit other than following directions and using trial and error to get things working.  The essays focused more on references than content.\n\nThe workload week to week was very inconsistent.  One week would be 10+ hours and the next might be 3.\n\nThe real-world group project for the class was rewarding and I learned a lot from that.  I would have preferred to start it much earlier and remove a lot of the extra unneeded lectures / interviews. Pros: Overall well run. I work in Healthcare IT and found class useful. Easy workload, makes a good candidate to pair up with another class.\nCons: Subject matter is very boring and videos are dry.  This course was very easy , to me,it  didn't meet the expectations of a grad level class. It felt more like a freshman level class in undergrad. We were provided with basic level exercises that were somewhat tricky but doable without too much effort. You do get to learn the high level  concepts in  health IT through lectures,and we have to write three essays through out the course. Lastly,  the course project is the main part of the class,which is somewhat interesting, but risky because you might get teamed up with students around the world,with varying time zones making it really difficult to collaborate.  Extremely easy class. Virtually no work, but also no information.  Pros: Interesting material! Since it's a domain-specific course (focused on healthcare), we're constantly exposed to real-world applications of the technology. This includes current and historical challenges, and new opportunities. The course incorporates a fun group project working with an external mentor (from the healthcare industry) to create a FHIR app that might actually turn into something. (I cringe at all the throwaway code I write for an OMSCS course, so this was a refreshing change.) The TAs are super responsive and I was delighted how fast the assignment grades came back!\n\nCons: This semester the course has been significantly reworked. The lectures are new and autograded activities have been created from scratch. There were a few hiccups with the activities, but the TAs were always quite responsive and graded generously in these situations.\n\nMisc.: Students are expected to write numerous short-form essays (200-400 words), citing sources using APA format. This was new to most of us, and the TAs were helpful in getting us familiar with it. The autograded activities required Java code written to interface with a FHIR server. If you're learning Java while also learning the FHIR API, expect a few weeks of pain. Really easy class. I didn't watch any videos. Essay and assignment take 1 hour to finish. The group project is a simple demo. A good class to pair with the hard ones. ", 
    "CS-6460": " I'm pretty much echoing the other comments. This course is different than the typical OMSCS course (It was my 7th one, for basis of comparison). It is unstructured in the sense that there are not formal video lectures throughout [there are several introductory videos from Dr. Joyner on Udacity you'll watch in the first week, but that's it and even those are informal]. The rest of the course involves researching educational technology and proposing a project which you'll then complete while working with an assigned mentor. However, it is structured in the sense that you'll be guided through a series of objectives and milestones along the way. Discussion on Piazza plays a big part too... basically every day, there'll be some suggested topic to discuss or debate, although everyone is encouraged to ask questions, share articles or other interesting content they've found and just generally join in much as you would in a traditional seminar course. The TAs and Professor were extremely responsive and involved, but they also managed to stay out of the way and avoid micromanaging. The style of individual mentors varies as you'd expect but they make an attempt to match you up for a good fit and I had no problems working with mine. Finally, peer reviews are also included.... my impression of the utility of those was mixed. In all cases, various sorts of 'participation' are acknowledged and form part of your final grade. At the beginning, you'll probably wonder \"What have I go myself into ?\" but before long you'll find yourself fitting into the flow just fine. Your communication skills will definitely be exercised... there are weekly essays prior to actually beginning the project phase, milestone & progress reports, a final project video presentation, and a final project paper suitable for publication. Time management is also important, particularly in the compressed summer semester. Bottom line --- you'll get out of it what you put into it. This is a very easy class. It's self-paced so if you are able to manage your own self and capable of coming up with stuff to do and do those things you come up with, then you will do well in the class. I think I got 100% on everything. It requires a lot of writing and checking in every week with your TA to let them know how you are progressing. I would recommend this class to only those who are interested in starting a business after they are done with the masters or to those who may be interested in doing PhD after the masters. The reason why is because if you want to start a business, you can get the ground work done in this class - have an app you want to build or software for something related to education (and education is really being used light here) this is the class for you. Have a cool research idea you want to research and maybe do a PhD on, this is the class for you to learn how to go about doing that in the next level and also get some serious research done.  In this class, you choose your own project, which can either be an educational tool or a research study. You don't need to have a project in mind before starting the class but since all the activities since week two are directed towards researching your problem space, you'll need to land on one pretty quickly. Alternatively, you can join someone else's project, which I'd probably recommend even if you have your own idea. With more people on the team, you can combine your efforts, build something more polished, and have more fun along the way. Otherwise, despite encouraging feedback from peer reviews, you might feel a little lonely in your one-man-project. \n\nDuring the first 5 weeks, there will be a short (~500 words) written submission documenting your research every week, followed by project proposal. In the next 8 weeks, you'll be working on the project, summarizing your progress in a short text or video recording every other week. In the final two weeks, you will combine all your previous notes and research to write an academic paper in a format and quality to be presented at a scientific conference. You don't have to officially submit it but even without doing so, you'll have gone through the entire process of researching a topic, identifiying a problem, designing a solution, and writing a paper about it. \n\nThe structure of the course is very free-form. There are no common videos or texts to read -- instead, you'll be expected to do your own research (i. e. find relevant papers, learn tools you want to use). There is a suggested breakdown of how much time you should spend on research/review/writing/programming in a given week (~10h/w total), but the actual content varies for each student. The plus side is, you'll be assigned a mentor who will guide you on your journey. And if you've known David Joyner for a while, you can be sure he'll post weekly plan and summary announcements, daily discussion threads, and reply to almost every comment.  Very self driven class. The entire class is working towards a single project and presentation at the end of the semester. The video content is very limited and is essentially just a tour of the course catalog and what the different categories are.\nThe class is certainly what you make of it, the instructors aren't really looking over your shoulder. I'm sure they would be helpful if you asked them direct questions, but they didn't seem to have much input for any given weekly checkin.\nIt'd be great if there was some way to encourage more group participation, the peer feedback is a great tool, but working directly with classmates would allow teams to have cooler and larger-scoped projects. This course was a fun course, I would recommend to anyone who is interested in working on a project/projects. That said, it involves is a lot of writing but it gets all connected to the end project and you will appreciate it in the end when you see the results of your hard work in the end. Dr Joyner is great, the class was well organized and documentation is spectacular, second to none. This is a class structured as a PhD, where there are no lectures and you decide how hard it will get. It's very possible to ace this class if you're motivated enough. \n\nSince you choose your own project or research, pretty much anybody can relate to a project that concerns Educational Technology. \n\nHere are some examples of projects: Music teaching tools, sign language SW, anti plagiarism tools, identity verification, group interaction tools, AI for pretty much anything, k12 and STEM involvement, safety and security, assessment tools, and the list goes on and on.  A self-driven class where you get out of the class what you put in. You explore areas of educational technology at the start of the class and then propose a project you would like to do. Communication is excellent throughout the course. The mentors are helpful, and everyone encourages you as you explore, define, and create your mini PhD project.\n\nI wish I would have had more time to explore other project proposals to join a group. There's some opportunity to do that by looking through the library and peer-reviewing projects, but you need to make time for it. Really recommend doing that if you take the course because you might find something you hadn't thought about or that captures your interest more.\n\nI'd recommend taking this course towards the end of OMSCS as you might have acquired some new skills that you'd like to apply to an EdTech development project. Such a great class either way! Kudos to David Joyner and the awesome mentors in that class. I loved this class and wish more courses followed this format! It's an almost completely open-ended class where you propose a project and then work on it throughout the course. The professor and TAs are good about making sure you know the expectations for the class, that you keep your scope for you project reasonable, and that you are roughly on track throughout the course. If you prefer a more structured course, you may not enjoy this course, however if you like to work on a project that interests you personally and have a ton of creative control then you will enjoy this class. \n\nI would suggest having a rough idea of what you would like to do for the project going into the course. However if you aren't sure, educational technology is a pretty broad field and the first few weeks are spent researching various topics in the field to help you brainstorm ideas. \n\nAs far as grading and workload, the expectation is that the scope of the project itself will be about 100 hours. This amounts to 10-15 hours of work each week. You should be able to earn an 'A' if you put in the time and communicate your progress (even if you end up behind your original schedule). Difficulty is really how familiar you are with the work you do for the project, and since you choose what to work on you can control how much you want to branch out there. \n\nTaking this course over the Summer is tougher but do-able, you are looking at a few extra hours a week due to tighter timelines. Had the option of working with team or individual, I selected to work as individual and although the research was, well, it was research, the outcome and process of creating a research project was fun. This was my first OMSCS class after joining the program. We worked on a semester-long project, where we had the option to work individually or in groups, on a development or a research project -- I worked individually on a research paper. Definitely suggest honing your time management skills for this course, but overall a great class! Rating: \nThis is wonderful class that I was skeptical about but ended up loving. The course is compared to a PHD in structure, not necessarily rigor, and I learned a lot about the academic development process. The strongest aspect is this class is the organization and communication which is led by Dr. Joyner. His planning makes it very easy to focus on the content of the course and if you do have questions, answers are swift and sincere. The format is unique in that you are assigned a mentor who guides you through the process of deciding on a project and fulfilling the requirements. There aren't any strong negatives in the course but I suppose the initial project dive is a little rough. There is just so much data to sort through and it is a little hard to pick the problem you want to solve. Fortunately, if you come in to the program with a problem in mind this is a non-issue!\n\nDifficulty:\nThis class is what you make of it. You could pick an really easy problem or a really hard problem, the only person you're hurting or helping is yourself.The first few assignments are almost entirely reading academic articles so get good at reading those efficiently. The writing is not that hard as long as you stay on point and have a purpose. My initial project idea was too ambitious but I was able to massage it into something that could be completed in about 100 hours which is the goal. \n\nWorkload:\nI spent a lot of time reading throughout the entire course so that never really goes away. The last 4 weeks was my big dev cycle and I ended up pouring about 25/hrs in the last week or so. My measured average is about 10 and if I had not been taking a second class, I probably would not have had the huge uptick in hours during the last week. For the most part this class is what you make of it. It is possible to say that the hardest part of the class is the beginning where you are deciding what you want your project to be. There is consistent writing along with consistent feedback. For me the pressure of finding a project topic was a little over whelming. \n\nOnce you decide on your project, it may feel easier since you have probably chosen something you at least enjoy doing. Don't get me wrong though, you are definitely expected to challenge yourself and follow through. The TAs and professor set a high bar and make sure you reach for it. \n\nOverall a great class and very well run.  This is probably the most interesting class I've taken in the program.   it requires either a resource, content or development of educational technology.   I didn't know what I wanted to do prior to taking this classes, but as I started doing research, I got a great sense of what to do.   This is a work at your own pace, but keep up class.   It does require somewhere between 12 and 15 hours per work a week.   There several large papers and smaller papers.   If you pick an interesting topic you end up loving this class.    I want to continue to develop my idea and maybe leverage it back to OMS or other educational programs.    It's a truly great experience and I highly recommend this class.  This course was my introduction to the OMSCS program and I felt it was a good transition from professional life back into school life. The course is very much what you make of it and most of you will enjoy the freedom granted in the final project. The first half is very heavy in writing where you are exploring a topic of interest then you get into your project. You can choose to either work individually or work with a group. The freedom in project allows you to create something meaningful; I will continue the work that I started this semester after the conclusion of the semester because I believe in the value of what I got started.\n\nI highly recommend this course! This class is unique. It is great to learn how to do research and construct a research thesis. I learned a lot of project management skills also that I feel will be great in the work field. All the deliverables are stated and guide you through it. If you have an idea for a project or a business this will force you to follow it through and a mentor will guide you.  I had no ed tech experience and I learned so much since at the beginning I had no idea for a topic so I researched many fields prior to narrowing in on a project idea. The class  is definitely what you make of it. Great for independent learners. Good course if you are self-driven. There is no specific syllabus and sky is the limit. Chose a topic and explore and build a tool/ application or do research. Education is something we have all gone through and are continuously doing and changing education landscape should be of interest for almost everybody. \n\nBased on what I understand, you are judged on what you do - not how brilliant your idea is. And that is a good thing for most part. \n\nThe course is divided into multiple questions/ milestones and you should know if you have gone of track. Try to keep yourself on track - for getting grade \"A\" - the margin for error is not very high. \n\nAnother plus for this course: if you have made a mistake - you can simply request your mentor (TA) to correct it. You can focus on ideas and innovation and not worry about typos and losing points.  This is one of those classes where you get out what you put in. You spend the first few weeks figuring out which areas you're interested in, and the remainder of the semester is spent putting your project together. Those first few weeks are very important as they will change the complexion of your experience in the course depending on what you choose. I worked on a team, and I think that is the best way to approach this class. You have other students that are holding you accountable and that are dependent upon you to get a good grade. You can do the project individually if you'd like (most people did, but I wanted a bigger project). It is also worth noting that you have one TA in this course - your mentor. So if you have any questions or want to know what to do to succeed, you have one person you can ask. In my opinion, this made it much easier because you're not getting conflicting information or trying to juggle multiple people's expectations. It is also much easier to get answers to your questions because one TA isn't trying to answer all of the questions - just their group of students' questions. A class that rewards hard work and is really oriented around you persuing something you're interested it. This was a very different type of class - only one week of lectures and the rest of it were projects. Probably shouldn't be taken your first semester or two. I loved this class. Choose a project (content, development, or research) that you are truly interested in and the semester will fly by. Ask questions of your TA/mentor, they seem genuinely there to help. It is difficult to assign a number of work hours per week. Some weeks only required a few hours of research and peer feedback, however other weeks required many more hours to pull an assignment together (especially the final project deliverable). Almost everything is self-paced, so be sure to have your calendar out and set reasonable milestones at the start of the project. Dr. Joyner and the TAs were fantastic. As with many previous comments, this class is really about how much you put into it. The grading is very generous and it's really easy to get grades from participation. Participation points literally rains on you from the surveys, Piazza participation, and even peer feedback (similar to KBAI). A side effect of this is that some of the peer feedback you get is pretty much generic. There are some really useful ones though so keep an eye on that. \n\nThe class's Piazza is really active and Dr. Joyner is quick to reply there and on Slack as well. Your mentor may be a hit or miss. My first mentor was great and we had lots of discussions on my research topic at the time. If you form a group, you get assigned a new mentor and that's usually the mentor that most group members have (if there's one or is random otherwise). My group's mentor was really hands off (as in I actually got 1 personal communication the entire time he was assigned). We didn't hear much from him throughout the entire project and our team's grades was always late. \n\nThe class allows you to research/work on a project that you want as long as its related to ed tech in some sense. There were some really interesting projects and I believe group work here helps a lot. While most of the time group projects are kind of a bane, this is one of the classes where it can really help you come up with something that you'll never be able to going at it alone. Just MAKE sure that your group mates are as interested in the idea/project as you are. I had a really great group but found out late that one person in the group was just bandwagoning and the work produced by that person really showed the lack of interest. This course is what you make of it. I did a research project based around another OMS class. Based on the schedule for that class, my workload varied a fair amount week to week. There were weeks where the instructional team for the other class wanted formal writeups from me that were above and beyond what this class required. I did have a bit of a crunch at the end of the semester, as I didn't have my full data available for analysis until about a week before the final project was due, which meant that I put in a lot of hours the last week analyzing data and writing. \n\nDavid Joyner describes this class as a mini Ph. D. and I think it's a perfect description. You explore your educational interests, propose a project, have it accepted, do the project, and defend your results. Many students picked difficult projects, put in a lot of hours, and produced amazing results. Other students put less in and got less out. I have a paper that is close to being ready for publication that I do intend to submit this summer to its intended journal. Since there's currently no research track available in OMS, this class was a welcome bit of research. I'd love to see more classes like it if not a full research path available for OMS students! If you like research, this class is for you. If you'd rather read, do problem sets, and take exams, pick another course. This course is one of the best courses i've ever taken, online or offline. There are a lot of learning moments for each individual, from reading papers, to gathering peer feedback to building, designing, and scaling up or down the project based on your own abilities. I think at the end of it, not only did I learn about education technology, but I also learned about how I learned and how I analyzed and tackle projects.\n\nGreat class and honestly, the workload is what you put in it. If you want to learn more and deep dive, feel free, but if you want to do the bare minimum, that's ok too.  This class is a lot what you make out of it. You start the class with a bunch of essays slowly narrowing down you topic. Should be at least one less essay in my opinion. The instructor, Dave, is really involved and will probably write to much instead of not enough. TL;DR will happen some, you can't help it. There is no real videos as it is all about the conversations hence the didn't read above. Also, I think the Peer Reviews were mostly crap as most didn't really provide any input anyway. I always did but others just did an exercise instead of a way to help others. The project itself was incredibly open ended and the meat of the class. I thought there were alot of useless projects people took on, however, it might have just been hard to come up with ideas. Here is where you can get a lot or a little out of the class. The TAs and Dave are here to help you in this open ended way. The class is an easy A but it is what you make out of it. You can learn a lot or a little but depends on you. Interesting concept for a class (being lecture less) and has merit. Grading of a class like this does require a finesse which I am thinking is a little lacking at moment. Overall, a fantastic class by a fantastic instructor and would recommend. If nothing else to get use to how upper academia is done. My criticism is just to let people know what they are getting. Note, my project was fun to do but it was one I thought about ahead of time noted below as important. If you go into this class with a clear project in mind, you will love it. \n\nYou will be spending a lot of time writing and peer reviewing other students. The peer review process made it clear that students who didn't have a clear project definition, and students without strong project management skills, struggled with this class. \n\nOverall, this is a \"capstone\" kind of class, that is best taken once you've developed strong research and project management skills.  This class is fairly unique in that it begins with discovery and research of the domain but finishes with a 100% self-driven project, either done with a team or individually. As a professional software developer having built some POC/crude mobile apps, I used this opportunity to use a framework and toolset I have always wanted to try but never had the time or project-idea that combined led me to actually investing the time to learn and develop the application. This class gave me that flexibility with some rigor through a proposal with a timeline and ultimate deliverable with the flexibility to adjust as needed. \n\nOverall, I would recommend this class for anyone who genuinely is interested in exploring the intersections between education and technology and is interested in either developing content, doing research, or developing an application to add to the community. The flexibility to do a more research based approach versus a development approach is something that I think most people will enjoy about this class. Simply explore, learn, and contribute. \n\nAlso, the professor is very engaging and constantly is a resource to contribute and inspire conversations. Great class. You choose your project and develop it during the semester, alone or as a team. Instructors and classmates offer support and feedback. Professor Joyner is fantastic. This course should be mandatory for first semester omscs student! It is very well organized and Prof. David Joyner is such a positive influence in the course interactions and all communications throughout. Peer feedback is a great feature to learn about other projects and possibilities. Highly recommend this course. You will guaranteed to learn other fascinating things beside computer programming. This is a great course after you have some experience in OMSCS. I've seen wonderful projects ranging from instant messaging APP to second language study software. The tutor is helpful all the time and the progress is very much self-paced. You will like it a lot!\n\nI also saw in this class people recorded podcasts about wine or wrote about gender in IT. It seems to me that you can do whatever you want in the class. It sounds cliche, but this class is what you make of it. You are the primary driver of what you learn. During this course there are two tracks you can take: research or development. Both require you to conduct a mini \"literature review\" before you can begin your final project. If you choose research you will either conduct your own study or find a new way to examine existing data/studies. If you choose the development track you will create a working prototype/product. There are really no lectures outside of a few at the beginning and then any others you choose to watch while trying to land on a research topic. \n\nThere are papers you must write during the initial research phase as you narrow down your topic. During the project phase you must do weekly check ins and two milestones. The final project is a paper formatted for journal publication, the actual project (paper or prototype), and then the actual files/research you used. \n\nI personally chose to do develop an actual prototype. I was given free reign to pick the platform and the features as long as I could justify them. I really enjoyed working on the project and was able to produce something I had always dreamed of producing. \n\nThat last point is something that the instructor specifically designed the course to encourage. During course feedback on Piazza I said at times I felt like I was paying money to work on a hobby project. He responded saying that was the idea. This course will give you credit for working on a passion project. You can then use the results for other endeavors: publishing, PhD, or even a start up. You will ultimately learn only what you choose to learn. If you want an easy A you could likely get that done, but honestly it would be a waste if you don't use the opportunity to push yourself. This is a great class where you get out of it what you put in. It's quite easy to get an A by putting in minimal effort; if you at least execute on the main grading points of each assignment, you're guaranteed an A. However, the one pain point of this class is the rush to complete the final project. I would recommend getting as much done as possible well ahead of time, because you will have to submit a formatted paper, a video presentation, and your actual project. The course library is very well thought-out and organized (if incomplete at this time). The forums are active, which is typical of a Joyner course. I would definitely recommend taking this class. Dr. Joyner is amazing, as usual. My mentor is also amazing, I guess also as usual? He's got some reputation, so I heard, though this is my first time I had \"met\" him. My classmates are amazing. We have another TA who has been really friendly, helpful and also amazing. My teammates are amazing, and I think we did an amazing job. Everything is amazing, but still, if you get to decide whether to take this course on a shorter summer or on a full semester, I suggest you choose the full semester. Those extra 3 to 5 weeks would be a very big difference. Really big. \n\nBTW, there are now three available tracks: research, development, content. One of my favorite classes. It's the first course where could throw your efforts into something you find super interesting. The entire course is focused around a project you get to choose. The professor is highly engaged.", 
    "CS-6475": " This was my first class in the OMSCS program, and I would recommend it to other students as a first class. TA involvement was high throughout the class, and assignments / feedback was given quickly and with clarity. A few elements felt shaky (peer reviews) due to growing pains with switching to Canvas.\n\nThe grading scheme for most of the glass was to allow between 10-20 'easy' points, and 10-20 'hard' points per assignment. Most of the homework was subject to an Above and Beyond rule limiting the grade to a 90 without extra effort. The best approach to get full credit was to find a research paper related to the assignment and implement. The grading scheme makes a B average fairly straight forward to obtain, but requires significant extra effort throughout the semester for an A. The final exam was full of 'trick' questions and no curve, so it was important to go in with a high average if shooting for an A. This is the type of course that I like to call an easy B but a hard A. If you're coming in with some knowledge of Python and Linear Algebra, then I would say you can put it in 10 hours per week, get most of the knowledge out of the class, and walk away with a solid B. But if you're really going for an A, then you'll find the class taking up a lot more time. The grading structure is designed such that each homework assignment has an \"Above and Beyond\" section that counts for 10%, so to get anything higher than a 90, you'll need to develop something beyond the basic requirements of the assignment. Personally I enjoyed this a lot, but it's clear that a lot of others didn't. \n\nThis class is being redesigned over the Summer, so I don't know if any of this will hold true in the Fall though. Overall I had a great time, but for the future I hope the instructors make the writeups shorter and the coding more challenging. \n\nEdit: Also definitely do the readings! They are absolutely fascinating! But don't worry about fully understanding all of the math for each reading - you just need to get the gist of them. Probably my favorite course in the program so far. This class is project driven and due to the \"you only get 90% unless you go 'above and beyond' \" rule, some projects I undertook were fun, but total time sinks. You get much creative freedom in what you want to do in this class within the scope of the assignment (e. g. use \"Use epsilon photography\")\n\nIf you go the bare minimum route, this class has a light workload, and can be done with another class easily. I found when I had a packed life schedule, I could tie up a base project in a night or two and submit and move on. \n\nPeer reviews were scary at first, but ended up being very helpful and useful to build a class culture and learn new tricks. \n\nThe one Piazza thread per project seems miserable at first as it can't be loaded on mobile devices (especially when people are posting lots of images). However, it seemed to work significantly better than in my other classes. The professor wasn't on Piazza much, but with so much TA involvement that never was an issue. \n\nThis class covers many similar topics as Computer Vision, but takes a fun, more artistic approach.  Normally I don't take option classes too seriously, but I have to say I just loved this class. Almost every assignment was super interesting, challenging and rewarding. Arguably one of the best classes in OMSCS. I wish all the classes were this good.  I took this course during Spring 2018 and paired it with HCI.  This was my first semester in OMSCS.  Overall, the course was good.  As many mentioned, you can only make a 90% for most assignments without doing Above and Beyond work.  This work isn't impossible, but even then you most likely won't get higher than a 95.  \n\nIf you aren't an amazing programmer, I would highly suggest you start on the projects well before they are due.  Don't procrastinate.  The TA's will not help on the projects in any way.  You will run into issues.  Start early on everything.  Before the midterm project, there is only one assignment that requires any coding at all, so the difficulty jump here is terrible. You need to brush up on your python and numpy skills well before you get to this point.\n\nThe notebook quizzes are terrible.  There is no other way to describe them.  They are only worth a tiny portion of your grade, though, so not too big of a problem.  \n\nThe assignments are pretty fun, but you don't code until about 1/3 of the way in as I mentioned before.  \n\nThe final project is student choice.  I didn't find this project as hard, but I had also gotten used to Numpy by this time.\n\nThe final exam is hard, but you get two chances.  Study and you will get a good grade.\n\nThe slack channel is your friend.  Seriously.  Bookmark this channel.  It is incredibly active and is probably the easiest way to get your questions answered.  One of the TA's is involved there and he is incredibly helpful.  You can also get great ideas for Above and Beyond in this channel.\n\nOverall, I liked this course a lot. I definitely recommend it and can easily be paired with a second course if you have the time.  Just make sure to get ahead on that midterm.    A really fun course. I personally learned a lot and thought the assignments were very enjoyable. The class was also really well organized (the TAs are very responsive both to questions and to feedback, I found very few issues in the assignments, grading wasn't exceptionally fast but still a lot better than in the other class I was taking etc. ). \n\nNote that most of the assignments require taking your own pictures, which some people might find a waste of time if they're only interested in the \"computational\" aspect of CP. Personally I thought that on the contrary learning about photography is obviously an essential part of mastering Computational Photography, which is also why I enjoyed the \"Camera Obscura\" homework that some people have criticized below. \n\nThe \"mandatory\" part of the assignments is pretty easy (I recommend learning about advanced indexing in numpy, which makes most of the coding trivial), but it only counts for 90% of your grade on the assignment. The remaining 10% is \"Above & Beyond\", which I find very motivating in terms of expanding your learning, and it can be pretty hard to get a full 100% on an assignment. Because that was what I aimed for, my workload was fairly high and the course was of Medium difficulty for me instead of Easy. If you just do the bare minimum, the course might qualify as Easy, but your odds of getting an A will be much lower. \n\nI haven't taken CV but it is clear that there is some overlap, so if you've taken CV you will probably have an easier time in CP. In general, I really liked this course. The content was interesting, and the homework assignments were a lot of fun. \n\nUnfortunately, it was certainly not perfect. Each homework assignment focused on a different computation technique or aspect of photography, and the coding/interactive portions were a blast. However, along with each assignment, we had to complete a lengthy PowerPoint report. The report templates contained many relevant questions and topics to respond to, but there were also numerous \"busy-work\" questions as well, and we had to go into great detail for each question in order to get full points. \n\nOn the topic of \"full points, \" the grading policy was the worst part of the course. By completing all requirements in a single homework assignment, the max possible score was a 90/100. In order to get any portion of the last 10%, we had to go \"above and beyond. \" The requirement for this was extremely subjective, so maybe this was a decent idea in theory, but it didn't work very well in my experience with the class. In addition to this, the grading/late policy just generally had no flexibility, and it punished all students equally, regardless of whether they were truly lazy/incompetent or just busy with another work/life issue, which is likely more common with OMSCS students compared to on-campus students. Perhaps it was fair in a way - it just seemed overly harsh to me. \n\nALL that being said, the course was a ton of fun, and it was a great way to brush up on Python/numpy skills. It was somewhat more time-consuming than I anticipated due to the long reports required for each assignment, but it was generally easy overall, in my opinion. \n\nIf you're at all interested in photography or image computation/manipulation, give this course a shot. Hopefully the grading policy will get an overhaul at some point, but it's definitely manageable if you put in some extra effort. I imagine it will provide a good head start for the CV course, but I have not taken that... yet! The contents of this class are really fun and mind blowing. Assignments are organized and most recently seems to push students to write code and reports well. Be aware that this is not an easy class at all! Reviews seem to be outliers from past semesters. One thing that makes it hard is the pace the assignments are released / delivered throughout the course, every week. With the A&B concept it makes really hard to get 100%. I myself went A&B a few times only. Not easy to get an A and with a lot of work I got a B. I took this course after Computer Vision. It is not as well organized as CV, and the videos are more annoying than educational, but it's a good course to take if you're interested in photography and manipulating images.\n\nThe mid-term project could potentially be very difficult if you go in without python & numpy experience. In my case, CV provided the background to make CP only medium difficulty.\n\nTips to get an A: \n1. Always try for A&B: The above and beyond grading scheme on the assignments is a strange beast. On one hand, you have absolutely no clue how to get that final 10% of your grade. On the other hand, it encourages you to just try something -  just use your wild imagination and creativity - and you are rewarded by the fair and generous grading.\n\n2. The assignments, projects and exams get progressively harder and trickier towards the end of the course, so work hard at the beginning and don't procrastinate.\n3. You're generally graded on the quality of the report and not the code, so have fun coding and all, but to get full marks, make sure you answer all the questions and follow all the guidelines in the report. In fact, if your code fails or you run out of time, you can still get a good grade by describing what you did and didn't do. This class is not terribly hard mathematically/conceptually, but the assignments can be very time consuming and are not always well-designed. Still, I overall found the course to be well-taught and a solid introduction to computational image processing with OpenCV. This was a very interesting class with responsive and fair TAs. There was a project every week which included a Python coding portion and PowerPoint presentation that you submit as a PDF. At the end of the course was a final exam and final project which were both time consuming but rewarding. \nThe only thing I didn't like about this course was building the Camera Obscura. The quality of your results depended on how crafty you were, but it was still interesting to turn a room into a camera. \nIf you are interested in computer vision or photography and enjoy applying computation to art, I would definitely recommend this class. This is my first course, and i loved it. the lectures were very clear and precise and give you the understanding of material easily. the assignments were not that tough as the initial template code gives you lot of hints to complete the assignment(which i think should not be the case, as it takes away lot of learning). there is amble of time to complete the assignments and for most we had two weeks to complete, we had totally 6 assignments this semester, be warned that, only 40 - 50% mark for coding and the other 40 - 50% is for report in which you have to answer lot of questions and contemplate on your understanding and your work on that assignment. Assignments also had a concept called Above & Beyond, i never tried A&B, you have to do something extract other than required on that assignment topic to receive A&B which counts for 10 mark. we also had a mid term project which is the replication of an published paper, this was the most difficult assignment of all to me, but if you spend enough time it will be an easy A. we had two attempts at the exam, and exam is easy one but really tricky one, as there are multiple choice questions, if wrong answer selected negative marking is given. choose your final project when you reach mid term itself and start working on it, as much as possible choose an easy topic as you have the liberty to choose the topic.\n\nOver All this class is very good class. I enjoyed this class, but it was an interesting experience. Firstly while I ranked the class Easy because it is pretty easy to do the base requirements of the class, I actually spent the same number of hours per week on this course in the summer terms as I have spent per week on ML and CCA during the full terms. This is partly a factor of the reduced term period, but also because I also spent a lot of extra hours on Above & Beyond work for the homeworks just because I got obsessed and was having fun. If you restrain your enthusiasm then you will reduce your workload by a large amount. On the other hand I think putting in the extra time will help you get more out of it because the base parts of all the homework assignments are pretty easy and simple. \n\nWhile the material and base assignments were pretty simple, this summer the assignments were being reworked for autograding which meant they were not released in advance, so it made dealing with summer travel more difficult as we had about 2 assignments due each week for the first two months of the course. The pace was sustainable but a little tiring due to my travel plans and not being able to work ahead. Be aware of that even though the course is ranked easy (in future semester perhaps this won't be a problem). \n\nI had taken CV prior to this course, so in several areas the CP material was simpler and a less in-depth treatment of the material. However in the 6th and 7th lecture modules of the course they cover more specialized topics that were interesting and for the \"8th\" module we were given a collection of 6 academic papers to read. Reading those were my favorite section of the course and I highly recommend reading them early as they give some good ideas for final projects. Like the above & beyond work, you will get more from the class if you challenge yourself on the final project - that gives you a chance to go deep into an interesting area of your choice. Be creative.  This is a very time consuming course contrary to what previous semester reviews say. Course material is taught clearly by the professors so understanding the material is not a challenge. You will want to review the material thoroughly as the final really gets into the details from lecture. There are a tremendous amount of interesting topics to learn even if you don't take photographs often. \n\nYou should expect to spend significant hours on the class if you want to master the assignments. I was not able to do all of the readings even spending 30 hours. If you only want to pass the class with a C or B then the 10 hour estimates are correct. First two weeks of class is only about 5 hours but it ramps up quickly. \n\nIf you are aiming for an A the majority of your time will be spent on above and beyond (independent research) and writeups. Expect about 2-3 hours a week on lecture (take notes while watching!), 5 hours on coding for complex base parts of assignments, 3-5 hours on writeup for base assignment, and the remaining time on independent research (both coding and writeups). Also a variable amount of time on taking your own photographs depending on the project. \n\nThe course will be undergoing a revision this fall so hopefully the workload comes down. Also a more flexible grading rubric (or more points allotted to overall quality of explanations) could further differentiate students who put effort into the assignments vs those who did not. I really enjoyed the class and highly recommend it. This was my first class in OMSCS and overall I enjoyed it! I am a hobby photographer myself so it was really cool being able to see how photography techniques were implemented on the backend, like panoramas and HDR.\n\nTechnically, the class was medium difficulty. There were assignments every few weeks, along with a midterm project and final project. There were also a few quizzes and a final test. You'll notice in a lot of the other reviews they mention the \"above and beyond\" aspect of a lot of assignments. The vast majority of assignments were \"above and beyond\", meaning that if you fulfilled all the requirements, the highest grade you could get was a 90%, and the rest of the 10% comes from going above and beyond the original requirements. Getting all of this 10% was pretty tricky. Some assignments, like the midterm and final projects, were not subject to this rule.\n\nBecause of the A&B rule, it was relatively straight forward to get a B in the class, but difficult to get an A.\n\nThe class is done mainly using Python and Numpy - would recommend getting familiar with those tools to have an easier time in the class This is nice course but the pacing is very high during summer with 2 assignments per week. There is a lot of things to learn and the subject matter and techniques that you learn are fascinating. However, during summer 2016, the professor did not participate in the class discussions and it felt sometimes like we were on our own.  This was my 6th class. I was somewhat prepared to take this class. I took this class purely out of my interest and for fun. Experience in KBAI from last summer helped me wee little. Looking back, I should have taken CP class before KBAI. exam. My only criticism, is this class seems to bite more than we can chew at times, lectures are over-packed and at times. Video lectures sometimes become too much \"illustrative\", and some of the useful details seem to get left out, when the lectures say this is just for the illustrative purposes. And because of this, you might understand how something works, but might not always understand why something works. I loved the idea of Above and Beyond (A&B) in the assignment, it did seem to align well with the spirits of the masters' degree. If you are planning to go with CP&R specialization, definitely take CP before CV. I am coming from 6+ yrs of professional C# and .NET experience, but regardless, I definitely would recommend some good practice with Python, NumPy and OpenCV, bring down your workload. The assignments are not that hard, but they might seem challenging at times. I found the midterm project (Seam Carving) challenging. The class let's you pick your own final project, so you can truly make the most out of this class. Final exam was neither too hard nor too easy. Do read the question twice, in the final test. I expect them to lower the velocity. I did not always appreciate when the videos ignore some of the necessary details. Overall, stay consistent, do the the exercises, spend time reading the white papers. Take the time to read the white papers. there are a TON OF WHITE PAPERS TO READ, which might seem overwhelming, but do not forget you are a graduate student, at Georgia Tech. Fun fact: in the Udacity video lectures, the processor utters the word \"of course\" 1395 times. A just about perfect course -- interesting lectures, interesting projects, and clear expectations. It actually works better online than it would in a classroom. And what a fun topic -- it is so refreshing to do computing math and actually see a result that looks like something! I strongly recommend this course. \nIt's an excellent summer option, but with the compressed schedule on many weeks there are two assignments due, making it more challenging to keep up. \nAssignments are Python (Numpy, Scipy, and CV2). If you aren't a solid Python programmer, this course will help you as you look at your classmate's examples (slicing arrays, set operations with np). And if you are a bad photographer, you will at least learn how to be bad in novel ways.  I found this course to be more of an application of the concepts you learn in CS6476 (CV). Although, it's less intense & not as stressful(except for those odd days). Should be much easier if one has completed CV. The course load is very well distributed. It had 7 assignments, 2 project work (mid-term research work replication & final project) & one final examination (with upto 2 attempts - max considered :))\nThe TAs are vell organized, very passionate & very helpful too. Despite their own course loads, they were present on piazza (&slack) answering questions; both technical & logistical...\nThe only not-so-positive aspect for me personally was that a significant portion of assignment grades were deteremined by quality of report. This sometimes makes you feel that some technical challenges resolved/attempted were getting overlooked especially if you are not one of those who are good at reporting :).\nHaving completed more rigourous courses like CSE 6220(IPC), CS6601(AI) & CS6476(CV) where the reporting was not a big factor in determing the grades found this a little discouraging. But on the brighter side, it's gave an opportunity for me to improve on these aspects (which is definitely important in professional life).\nOver & above the computation part, the fun aspect was experimenting with photography... I used the opportunity to get myself a nice SLR (not mandatory for the course) & learnt quite a bit of photography during the last 4 months.\nIf you need a term break from the heavy load ones & want to have some fun along with learning, will recommend this course.  This is not an easy A class anymore, I narrowly got an A. To prove my point, see grade distribution for pass semesters: https://omscentral. com/grades/6475, As are trending down. If you do the minimal in \"guided\" projects, and get everything right, you'll get 90 on each project, you must do extra and produce good report to get > 90. 1 or 2 project require special camera/environment setup, if you are traveling/on the road, you might have a hard time with those. The final project is \"unguided\" and from the 3 peer reviews I did, they bite off more than they can chew and ended with no/poor result. Keep good notes on Udacity lectures, you'll need them for the final exams. Overall, very good class, I fully enjoyed it. As an amateur photographer, this was a cool class to take to get a better understanding of what computational photography is and its wide breadth of applications. The homeworks were in Python and were typically straightforward and easy to complete. The final project was a little more work, and I wish that there was more guidance from the TAs on expectations or sample final projects before turning the students loose. The open-book final exam was pretty easy as long as you took notes on the lectures throughout the class and could search them for the answers. Beware of earlier reviews from previous semesters that suggest this course is easy. The assignments have been retooled somewhat to include more complexity, providing more of a challenge. In addition, at least for this summer term, we were presented with the full workload from an academic term in the compressed summer timeframe, meaning most of the 11 assignments were given two at a time (and not in advance. ) In some cases, changes were still being made to assignments days before they were due. \n\nThe course material itself is fascinating; I really enjoyed everything we learned about, and in retrospect would have preferred taking this course in a full term to really be able to dig into the material, instead of just finishing up assignment after assignment. The final project was especially rewarding. The exam was \"check all that apply\" multiple choice, appeared deliberately vague and misleading in places, and was a mess in my opinion. \n\nAdministration of the class this summer was also troubling. The professor was entirely absent - he weighed in twice in Piazza and was otherwise absent, and his TAs appeared to have trouble getting guidance on simple questions that needed to be answered for assignments that had been changed (e. g. \"Can we use X function, or is it in the group that is not allowed?\"), leading to confusion and frustration on the part of students. The confusion, stupid fast workload and angst all made what should have been an enjoyable survey course one of my least favorite in the program as far as organizational issues went. That said, I greatly value everything I learned in that class, and will take a risk on taking CV with the same instructor -- during a regular term! -- solely because of what I learned there. Assignments were interesting and final project allowed for bringing together what you learn. Enjoyed the projects. Final Exam is a huge pain of nit-picking multiple guess. That was the only frustration.  Subject is interesting with lots of real world usages but teaching methods were the main reason for disliking it. Course videos are pretty average. Assignments ask for too much write up in detail, this led me to lose the interest. There is \"Above and Beyond\" rule for all the assignments and its an irritating one. (If you are an TA reading this, please use challenge question method used in CV and remove this A&B). Mid term project and final project are interesting. Exams are too tricky with words not with knowledge or logic. This class starts slow at first not quite feeling like a CS class, but by the end you're replicating research from the mid 2000's. The final project was choose your own adventure... This class was a lot of fun and very interesting to me. I loved everything about it except the assignment to build a pinhole camera (I hated that assignment but others loved it, go figure). The workload is fairly light and easy despite getting to learn a lot of fascinating and useful photography and computer vision algorithms and implementing some yourself. You get to pick what you do for the final project which is really cool (just remember to scope it down so you have time to finish). The exam was open book. I loved that we got to review each others work and share our outputs on Piazza, very creative and fun way to learn more. The support on Piazza was fabulous and the coding assignments even came with unit tests! It's been two years since I took this class and I still remember it very fondly and wish I could take more classes like it (I wish there were more classes like it)! The course is full of fun. Learned a lot about photography and how photo editing software works. The assignments are not very difficult but encourage the creativity for more points. It is really a pleasure to do peer review and honestly I was amazed by many of my classmates' work. TA and the professor were very active on Piazza, as well as lots of discussion and showcase of assignments and projects. I was pretty proud of myself when I was making my portfolio listing all the assignments and project done during the semester.  The course begins deceptively slowly, then accelerates without remorse.  Definitely start (and finish) all assignments as early as possible.  In comparison to other courses, the lectures are of marginal learning value, so count on having to complete the readings and probably do some extra learning on your own.  Prof Issa had only one office hour session, to my knowledge, but the TAs and Slack channel were reasonably helpful.  In general, this course was easier than ML, RL, and CV, about on par with AI, AI4R, and Data Viz, and more difficult than KBAI. Because I took this in the summer, the workload was much higher than you will see in other reviews. If you are not taking it in the summer, then ignore the amount of time I put into this class. \n\nOverall, I really liked this class. It allowed me to learn Python, and do some really cool stuff with photos and videos. The final exam is a little lame, but overall the assignments were really interesting, and the ability to choose your final project is also a great idea. Class is all about TAs, no professor interaction. Not an issue, but set expectations accordingly.  \n\nGood to have some idea of linear algebra and calculus. Not a must, but helpful. Also, Python programming experience, particularly with numpy, will give you big head start. If you are not comfortable with those the optional programming work leading up to your first quiz is a good way to ramp on the Python & numpy piece. \n\nIn terms of difficulty, my understanding is this class became more difficult starting Fall 2017. As a consequence, instead of being a likely A with relatively low effort it's a likely B. I expect an A, but have done a lot of work to secure as explained next. \n\nOf the course's 7 assignments, 6 are setup that you can reach a maximum of 90% following directions. The remaining 10% - referred to as Above & Beyond (A&B) - requires that you do something else of your own invention related to the assignment. TAs will give suggestions or hints, but this is where you can easily spend 90% of your time and learn the most. Meanwhile keep in mind it's only worth 10% of the assignment grade. \n\nMidterm was difficult and saw 10-15% of the class drop. Implement a selected research paper. Took me more than ~ 60/hrs to do it. Very interesting work however, the sort of thing you'll probably want to share with prospective employers for instance. Mean average was a high C and counts for 12% of your overall grade. Final Project is expected to be of a similar level of difficultly - excepting you choose your research paper to implement for better or worse. \n\nFinal exam is a pain. You get two attempts, 2.5 hours per, and will need all of it. And Notebook quizzes are hard. I expect the Notebook quizzes to improve next semester. The Final Exam however is something that's been used for several semesters running so prepare for aggravation there. \n\nThe Slack channel for the class is very active and was by far the best part of the class. Piazza meanwhile got very noisy with repeat questions. \n\nFinally, get a tripod for your phone or camera if you don't have one. You can get a cheap one for ~ $20. Makes a big difference on several of the assignments.  Good course. Interesting topic. Cover a lot of material. Assignments ramp up pretty quick, but lots of online resources to help get through them. Midterm project was replicating a research paper and took considerable amount of time. Final project is open-ended and up to the student, which was cool. The final exam wasn't necessarily hard (open note and can take two times) but some of the questions are tricky and poorly worded. Overall I would recommend the course (especially if you are interested in photography/computer vision), but encourage students to not let themselves fall behind.  This was my first class in the program and a great introduction.  The material wasn't particularly difficult, but there is room to go as deep as you like with the above and beyond portion of the assignments.  I would recommend getting practice with Numpy if you are not familiar with it.  A cheap tripod was very useful for some of the assignments and I borrowed a DSLR for the camera obscura, which would have been much more difficult with a smartphone camera.  It was well organized and the assignments were fun.  I would recommend taking this course if you have any interest in photography or working with images. Course is easy and fun. \n\nI took CV before so it may be slightly biased from me to think the course was fairly easy. Really, only the HDR assignment proved to be any challenge. Some of the assignments I did learn a bit from, including the previous mentioned HDR assignment, panoramas, and implementing my own Canny Edge detector. \n\nBuyer beware though, many of the assignments during the course I felt were useless and a waste of time (1 / 5 / 10). These assignments were almost like high school science experiments (set up a dark room in your house and take a picture! comment on a picture you took! run a piece of software which does everything for you to make a point cloud!). I'm glad they are taking the summer off to redo the course content. It has a lot of potential as long as it gets rid of the wasteful assignments. \n\nAlso, pacing in the course is way too fast. Most assignments are a week only where two weeks is more of the OMSCS norm. This semester saw a reworking of the course projects, with a reduction in the amount from something like 11 down to 7, with an added new midterm project. The first run of this midterm project I feel did not provide sufficient time or feedback, which will hopefully be improved on in the future. Make sure you get started on it as soon as it is released.  There is an 'artsy' component to this class, where you have to deal with taking good pictures and then talking about how you took them well in the reports. Personally, I didn't like the subjectivity of it. \nThe most disheartening aspect of this course is that you must make up something to get more than 90% on any given assignment. What must you make up, you ask? That's a good question, as I am done with the course and still haven't figured it out. \nThe final exam was open book with two attempts, however it doesn't test that you actually know something. It's more of a needle in haystack search where you have to 'select all correct choices'. \nTAs were quite helpful throughout. Video lectures were pretty high level and didn't get into the meat of the algorithms, which made them relatively poor in my opinion. \nIf you are doing the Computational Perception specialization, you have no choice but to take this. If you have decided on any other specialization, just take Computer Vision and you would have covered a large majority of this course, with a much greater depth of understanding of the math and algorithms as well. You will learn more in depth, you won't have to make up things to get a solid A on any given assignment, and you can avoid the subjective artsy experience if that's not your thing.  The class is what you make of it - if you do the bare minimum on each assignment you can get out without too much difficulty, but there is a lot of opportunity to dive deeper into the topics and engage with your classmates and instructors. I liked it a lot. This is an interesting elective course that uses primarily Python and OpenCV. There are relevant and cool topics you learn about in the lectures related to how computations/programming have enhanced the photography process. It isn't too math heavy or difficult programming. A good well balance course. Just wish the instructor was more active in Piazza.  First off I will note that the hours per week will likely be much less during a fall or spring semester. The summer semester I took had an accelerated first half of the course so we could have approximately the same amount of time to work on the final project as the fall/spring students. This means you don't loose anything doing the summer semester, which is nice. \nI had not taken CV prior to this class, but apparently they compliment each other quite well. \nMajor grade parts: 11 assignments (mini-projects), 1 final exam (which you can take twice), one final project. \n\nOverall I enjoyed the class, you cover a lot of material at a high level and then for the final project you can choose what you want to investigate more deeply. You will learn a lot of cool things you can do with photographs.  This is my first course in the program. I have some programming experience and I love photography. \n\nThe course was hard for me. I had to try hard to wrap my head around before producing a code in assignments. I also had to invest a lot of time into it. Nevertheless I loved the experience. It makes you head smoke, but you get a lot of satisfaction when you finally submit at least partially completed assignment. \nI almost never had time to complete Above and Beyond, hence not hoping for a high grade. I am actually not sure if I even get B in the end. \n\nThe midterm was brutal. I hardly got 57. Make sure you set aside a lots of time for that. I expect final and exams to be even harder. \n\nI liked the fact that we were given two weeks for assignments. It gave at least some breathing room. \n\nThe course was very well organized. TAs were very helpful and responsive. \nI love that the course makes me think and create, overcome challenges and grow. A really interesting course that does a great job of helping you understand the coding behind an awful lot of what Photoshop does. I enjoyed the lectures and the projects quite a bit. This was my first course in OMSCS, so please take this review with a grain of salt. I had no Python experience, but lot of programming time (10+ years) in C and Java. I am also an amateur photographer and very comfortable with a DSLR camera. This course comes with a weekly assignment which is to be turned in every Monday leaving very little breathing space. As this was my first course, i had signed up for only one course and was able to spend atleast a day or two for the A&B (Above and Beyond) section. For many assignments (7-8 of them), lot of time is spent on research and report writing. The TAs shared some of the exemplary reports for each assignment and it was ridiculously amazing at the amount of work being put into them :)\n\nThe first 2-3 assignments are pretty simple and straight forward, though few of them requires setting up equipment (Camera Obscura), taking loads of pictures (Photos of space, feature matching) and few assignments have specific coding requirements (HDR). We get two weeks for the final project and the final exam is an open book multi choice test. \n\nOne of the best parts of this course is the auto grader for the coding parts of the assignment with Instant feedback and unlimited submissions. \n\nFrom discussions over slack, few had paired this course with another course based on the earlier reviews and faced difficulties due to the assignment schedule. \n\nCheck the Course Google group for insight into what kind of assignments were worked upon. Good luck! This is my 3rd course in the program and by far the most organized. We didn't hear much at all from the Professor in Piazza or other forums but the TA's had everything under control. I was very impressed by the level of organization. The auto-grader (affectionately known as \"Bonnie\") helped to provide some feedback that was useful with the coding assignment. I think this course was considered one of the easier or less-difficult courses in the past but they adapted the course this Fall term. I'm not sure how difficult it was earlier but I personally feel this course is no joke. Some of the assignments in the middle of the semester caught me off guard and I found myself pulling all-nighters in some cases to get the project done. For me the Blending assignment, while very interesting, was the most difficult. The first two assignments were really good at getting the introductions to the material but about the 3rd project it got real, really fast. If you have some Python experience, an interest in photography, some level of Linear Algebra I would highly recommend this course. As a prerequisite recommendation, I would suggest getting accustomed to Numpy, you'll be using this in nearly every coding project. Also check out some OpenCV tutorials. Otherwise, enjoy computing with pictures. I rated the workload as 20 hours per week largely because of the Above and Beyond portions of the projects. This is a really good approach for a graduate level course, it allows you to dive as deep as you want on the material and there are so many cool things to explore here. I also appreciated how we had 2 weeks per project to enable getting into the material more (than having a single week for a project). Honestly some might be able to get by with 10 or 15 hours per week but if you want to learn this stuff, be prepared to set aside the time. Overall, I did not have a good experience with this course.  While I found the lecture material interesting, I think there is far too much focus on the photography aspect of the course.  While the camera obscurra is a neat project, I don't think it has any place here.\n\nProfessor:  While very clearly passionate and knowledgeable about the material, it seems that his involvement ends with the lectures.\nTAs:  Overall seemed dismissive with questions, especially with the midterm research project.  They're given the task of teaching the course\nGrading:  The 90% Above and Beyond is the stupidest grading rubric I've ever come across.\nProjects:  While interesting, I don't believe they'll ever benefit me.\nTest:  The test is open book and there are two attempts; this sounds great...but like another reviewer put it, \"turns into a digital scavenger hunt.\"  I also found it to be marred by difficult/tricky wording (most likely by someone whose first language is not english) with a majority of the questions being of the delightful format, \"Select all that apply/are correct\".  I did not feel that the final exam tested my knowledge of anything that you might take away from the course.  Also covers quite a few papers that aren't really discussed during lectures.\nTime commitment: If I'm combining the time spent working on assignments with the time to watch lectures, then it's about 20 hours, if not counting the lectures it's a bit less than that.\n\nOverall:  I was thinking about the perception specialization, but this course turned me off to that completely.  If this were the first course I've taken in the program, I'd likely question why I was bothering at all.  I regret taking this course, and in the future I hope to avoid all those involved in its creation. Interesting material but it's full on, you can't catch a break\n Very good course. Nice insights into photography and computation with photographs... \n\nIts not easy in Summer. The assignments are too much too handle. But having said that, they are very rewarding. Concept of \"Above and Beyond\" is awesome - make u push urself harder... The exam, however, is a bummer.. I got through in the second attempt - but they can replace exam with a live assignment that needs to be done in two hours.... \n\nDon't miss it if you enjoy photography.. Its simply awesome.. Interesting course but hard to absorb all the material in a meaningful way given the pace. There is an assignment due almost every week and the lectures take a long time to watch and understand. Very good notes on the lectures are needed to do well on the final which had a lot of ambiguity and almost trick questions. Great lectures, both informative and entertaining. Active and helpful piazza participation by the TA team. \n\nAssignments and the final project are difficult because completing the requirements rewards a 90%. The last 10% must come from going \"above and beyond\", which is entirely subjective and anywhere from easy to impossible depending on the grader. \n\nThe final exam was brutal. On the positive side, two T-Square timed attempts with random (at least partially different) problem sets, only the highest grade counts. Unfortunately the multiple choice questions are very nit picking and almost all are a variation of \"choose all correct answers\" with a few ambiguous options that could be interpreted either way. \n\nTime is heavily weighted toward the final project and exam at the end of the semester (20+ hours per week). The lectures and assignments earlier in the term are closer to 5-10 hours per week. This is an exemplary model for producing a very easy class. Where a bad easy class, like CS6250, has trivial assignments and artificial difficulty in the seemingly intentionally obfuscated quizzes, this class doesn't try to make things more difficult than they need to be. The assignments are released in bulk early in the semester, so it is possible to work ahead; the content is accessible, and meeting the minimum requirements of the assignments is generally very straightforward (if you know Python and Numpy); the lectures are good - although there is a great deal of overlap with CS6476 (not exactly a bad thing). The nice part about this class is that while the assignments are very easy, that has given me a lot of time to spend with the assigned reading materials (compared to, say KBAI where I completely ignored the reading material in order to tackle all the graded exercises). Overall, this is an excellent class for a light summer term, or to pair with a more difficult class like ML or CCA. A few disclaimers: first, I took this class concurrently with KBAI, and this was my first semester in the OMSCS program so my view on the class has very little reference to other classes in the program; second, I did receive an 'A' in the course, so I'll try to not let that color my opinion of it; finally, reading past reviews indicates to me that this class has undergone a fairly large transformation in the past two semesters, be careful making expectations about the course from older reviews.\n\nNow for the review: \nOverall, the course was interesting and fun, and I feel I learned quite a bit. However, there were a few things that bothered me while I was taking the course, and I wanted to wait until it was 100% over to write them up to give others a fair warning about these aspects of the course:\n\nFirst, the open-note final exam did not feel like a good test of the things I had learned watching the lectures and doing the assignments throughout the semester. Another reviewer mentioned it felt like \"finding a needle in a haystack\", but I wanted to expand on this further. Some of the material on the exam did not come from any of the class material.   Most of the exam required finding keywords in PDFs, or a specific sentence mentioned in a lecture. Many of the questions relied on wordplay to attempt to fool the test taker (similar to the lab notebooks).\n\nSecond, the midterm, which I believe was indeed a fair assessment, should have included the grading rubric when it was released. A number of students wasted a lot of time on a portion of it that ultimately was worth much less than the other portions of the exam. Ultimately I believe this contributed to that assessment being the lowest grade overall for the class project-wise. \n\nThird, it appears reviews of the Above and Beyond portion of the assignments were mixed. You really need to attempt to do all of these if you want an 'A' in the course. Personally, I was not really a fan. I thought that while the Above and Beyond sections could produce very excellent work, grading of the sections was too subjective. These Above and Beyond sections count for about 4% of your overall grade, and getting more than half of these points seemed almost unfeasible sometimes. I understand the intention to make the course more fun and produce original pieces of work, but I think more guidelines need to be set for both the students and the graders about what qualifies as an appropriate Above and Beyond. \n\nI do not mean to dissuade others from taking this class. I really did enjoy it (doing the final project and seeing others' results was AMAZING, and all of the assignments were very well-made and fun to do). The TA's were extremely knowledgeable, active and helpful. And I've never felt so much pride in the work I've done for a class. Mostly, I just wanted to make the above writeup as a refresher to the reviews from previous semesters.\n\nP.S. Buy a tripod for your phone, and start the midterm early. Projects take a significant amount of time in comparison to homeworks. Homeworks are \"fine\" and generally don't take too long. Final exam was a bit hard in my opinion, but wasn't weighted heavily enough to matter too much. Everybody else had described the class pretty well. So maybe, to add new info... \n\nIf you intend to eventually take CP, but for now are choosing only one between CP and \n- CV: \n * Choose CV if you are already OK with Python (Numpy, OpenCV). That way, you could have more ideas for A&B and project components for CP\n * Choose CV first if you intend to pair CP with a heavier course, it might make understanding CP faster thus you can give more time on your other course. \n * Choose CP if you are not confident that you can make your Python (Numpy, OpenCV) and linear algebra skills at par for CV. \n- AI4R:\n * Choose CP if the reason why you are choosing between AI4R and CP is that you want some good introduction to OMSCS. AI4R could benefit from learnings in other courses. \n * Otherwise, just choose which interests you more at this moment. \n- ML4T:\n * Choose ML4T if you are not confident with your Python (Numpy) skills. It seems learning Numpy is part of ML4T's syllabus. \n * Choose ML4T if you think you do not have much ideas to work with CP's A&B activities. \n * Otherwise, just choose which interests you more at this moment. \n- DVA:\n * Heh... I don't see an intersect... \n * Maybe choose depending on what classes you intend to take next? \n * Or as always, just choose which interests you more at this moment. \n \nObviously these are just my views, your strategy may vary. Great course. Quite easy if you know Python and numpy. With that said, you learn some cool things and some practical skills. Take it with a hard class", 
    "CS-6476": " As stated by others, this class is very hard but well worth the effort. This is probably one of the best classes in the program. In my opinion, The videos are definitely the best in the OMSCS. The material is dense but Dr Bobick cuts through the math and makes it digestible. He has a great sense of humor, and even his interaction with Megan (the videographer) cracked me up several times. Even the seemingly small detail of having a black background was well thought out, and make the videos not too straining to the eye. The problem sets are hard and you need to get on them as soon as possible. Beware of the first major assignment (Road sign detection) because it is deceivingly difficult, and the video tracking assignment which was super difficult as well. The final project will easily take up the time of 3 assignments put together. Matthew Houston definitely deserves high praise for his high-quality recorded office hours. To conclude, It's a lot of work, but you'll be glad you did it.\n\nAs an aside, I was looking at the table of contents of the CV books on Amazon, and was amazed that the class covered MORE THAN ENTIRE BOOKS on the subject! About me: No CS background. No experience with Python or OpenCV (beginner experience with Java). However, I have a strong math background, and it helped me a lot. \n\nLectures: There are a lot of lecture videos. Toward the end of the class (hw 7 and 8), some of them are not needed to do the hws. However, I strongly advise against skipping any videos (cause you'll need to go through them for the final). The lectures contain a lot of mathematical proofs and derivations, so it might get a little dry. However, Professor Bobick did an excellent job of explaining them as well as the concepts and intuition behind all the math. \n\nHomework: There are 8 hw sets. HW1 is only 4% because it is easiest. Other hws are 11% each. In my opinion, HW2 and HW7 are the hardest (so get started early on these). In general, the difficulty of the hws is not in the coding, but it is the parameters. Getting the code to pass the autograder is not a difficult task. However, you'll have to pick the right parameters to produce the right images for the report (the reports consist mostly images and sometimes, short discussion, not essays). Optimizing the code was also a problem for me because I had no CS background. Overall, I don't consider the homework super-difficult. \n\nOther comments: Piazza and Slack are valuable resource, so take advantage of them. Most of the time, when I got stuck at something, the answer was in one of the Piazza's posts. Also, do watch the Youtube Office Hour videos. The TA explains how to do the hws very clearly and in detailed in those videos. Best class out of the 5 courses I took so far. Project2 to Project7 are intense, have to do a couple all-nighter along with helpful peer students on Slack. Office hours are extremely helpful as well. Definitely learnt a ton and recommend to everyone in the program. \n\nThe only critique I got is that most of the technologies covered are fundamentals for modern technology, although important, there is very little coverage on recognition, machine learning/deep learning, which is what the industry is using nowadays. I had to spend the summer after the class to self-learn these skills from online resources to get prepared for interview questions. In fact, we talked about this at the end of the semester through Pizza and I'm very glad that the instructors and TAs are open to hear our thoughts. I noticed that the Fall 17 version has allocated 1/2 of the semester to recognition&Deep Learning. Not sure if this is only for on-campus students, but I really wish we covered that in our class. Content - Very dense and overwhelming. Videos are sufficient (books not needed). Engaging and tactfully glosses over the math-heavy parts so that you are not totally lost without trivializing it too much. NOT very relevant in terms of current state of technology used in the field. \n\nProf and TAs - The Prof made exactly 1 appearance and TAs were not very prompt. It would have made a lot of difference if the prof and/or TAs could use office hours to augment the video content with current day relevance, or expand on difficult topics etc. Because of lack of their involvement, the experience was not very different from watching yet another MOOC video. \n\nAssignments - There were 6 - barring a couple, most very fairly hard. Success in this course is just a function of time you put in. Sometimes I had to watch the same lecture more than 5 times to spot what mistake I may have made in the implementation.\n\nFinal Project - Very time consuming, but it is the only time you can work on a non-cartoon problem and get exposure to industry standard problems and solutions\n\nPeers - Very very helpful. I survived a couple of assignments thanks to many of their suggestions. \n\nOverall, if you are interested in the subject, you must take it. It does a very good job at introducing you to the fundamentals. But you need to work on your own to fill in the gaps between the state of the art in 2015 and 2018. \nBetter administration could make this a MUCH better course.  This was an excellent class; very interesting lectures and course material.  Dr. Bobick's lectures are fun to watch and he does a good job of explaining the topics.  There were about 30 hours of lectures which seems like more than some of the other classes in the program.  It's important to watch them before working on assignments since the implementation steps for some of the problem sets are directly given in the lectures.  The TAs were great at releasing the problem sets and grades on a regular 2 week schedule.  Matthew Houston also gave well prepared office hours that he recorded weekly which were very helpful.  The final project had 5 possible topics and requires a lot of work; my advice is to limit your scope initially because you may otherwise try something too ambitious and not be as pleased with your results.  The open note final was pretty straightforward.  Taking CP first was very helpful for me since I hadn't touched python in a decade and I wrote more code for the traffic sign detection problem set than I did in all of CP (including my final project).  The overlap in some of the topics with CP also helped me feel more comfortable in completing the CV problem sets.  I really enjoyed the class and wish there were more CV classes to take. The instructor of record is Prof Essa, but the videos were produced by Prof Bobick before he left GT.  The videos and accompanying slides are really remarkable.  For most of my classes, you can find better video lectures online covering the same subjects.  Bobick's material is voluminous and high quality.  It represents a really unique contribution to online learning.  The volume of lectures is similar to a traditional lectures class -- probably 3 hours a week -- and it takes some effort to keep up.  There are a lot of assignments.  Expect to turn in a mini-project every two weeks with a full project at the end (given three weeks to accomplish).  The TAs, Matt and Pedro, are fantastic.  Prof Essa only posted a few times in the forum and didn't hold office hours.  The class is really well worth the time you spend on it in my opinion.  It's the highest quality of the seven classes I've taken. This is a great class. In our section Piazza and the TAs were very helpful. I don't believe the instructor of record posted much on Piazza. Make sure you brush up on python, numpy, and linear algebra before you take it. There is some simple calculus, but mostly linear algebra. If you're not comfortable with matrices and their operations some of the projects will be difficult. Projects 2 (hough), 6 (optical flow), and 7 (particle filters) were the most challenging and time consuming. The final was open book/notes and covered all sections of the lecture. It wasn't difficult if you covered all of the lectures and mostly stuck to higher level questions than minutiae. The one thing I really disliked about this class, and computer vision in general, is the parameter tuning/fitting. One will spend a lot of time doing that for the projects in this class to make things work. The most difficult thing for me was keeping up with the lecture/notes while also doing the projects. It was easy to get behind.  Very nice class on good old fashioned computer vision. No convolutional neural networks in this class (except for the final project, if you so desire!) but you will get to learn many of the cool insights that computer vision researchers came up with before deep learning was a thing, and that's still quite valuable.\n\nOverall the assignments are very interesting and cover a wide array of CV techniques. One of them (I believe assignment 2) is a lot more time consuming than the others, but overall they are all reasonably sized. Be careful about the final project though! If you take the deep neural net project, lots of people had trouble getting it to work in the required amount of time (fortunately I managed to do it). Took this as my first OMSCS class, without prior Python or OpenCV knowledge and sketchy Linear Algebra. It's a great class, hard but for all the right reasons. Very well organized, and a fair grading scheme. No grading on a curve so everyone cooperates on Piazza (within the 'no sharing code' constraint).  I could feel myself learning as the course progressed. Mind blowing feeling to go from knowing nothing, to knowing, uh.. something (Prof. Bobick style joke), and as an added bonus you will develop an internal clock that always knows AoE time. What makes the course hard? The sheer volume of videos to watch and assignments to complete in a short 17 weeks. Here's my time breakdown by week measured by Toggl, so you can schedule your accordingly: 18, 20, 24, 26, 22, 31, 32, 21, 16, 15, 24, 24, 23, 14, 50, 31, 16. That 50 is not from leaving the timer running by mistake - it's the time I packed in attempting to do the final project which I found incredibly difficult. The week before that with only 14 hours was the one I spent flailing around, despairing of being able to do the final project. Advice for others 1. Don't fall behind on watching the lectures! Watch them all before doing the assignments - even without taking notes and/or at 2x speed. They might seem to not be connected to the assignments, but they open up your mind to things that will help you do the assignmets - and certainly will make a big difference preparing for the exam. 2. Start assignments the minute the day they are released. Don't procrastinate because usually success in the assignments (especially if you're a newbie) is more a function of time than anything else. 3. Make an effort to post questions to the Office Hours, or be familiar with the assignment so you can benefit more from them - Mathew Houston's recorded OH were extremely helpful. 4. In the assignments, strive for 100% because the final project is 5 times harder than any assignment and you have only 3 weeks to complete it (took me about 85 hours to turn in something not so great), so it's likely to bring your grade down.\nSome criticism: The assignments have a lot of starter code written for you, so you can learn Python and OpenCV as you go along, however, it would have helped if the Matlab quizzes in the lectures were replaced with OpenCV ones (but Pedro the TA did provide OpenCV versions for some of them). The biggest criticism is that because of the final project, there are no assignments on the later sections and I didn't feel like I really learnt them. This class was intense and difficult, but it was also a lot of fun.  Very interesting material that was presented in a clear and sometimes entertaining way.  It did seem like they tried to cram a lot of lecture material into one semester.  Even the projects didn't cover the last several groups of lectures.\n\nFinal project was very difficult but it depends on your skill level and topic you choose, I guess.  I was burnt out by that time from everything else going on plus the holidays, so I bombed pretty badly near the end.  Still ended up with a high B in the class since I did well on the projects up to that point.  Just stay on top of your stuff and you'll be fine.\n\nI loved this class and absolutely recommend it.  I don't recommend pairing it with another course and I don't recommend it as a first OMSCS course if you've been away from academia for a while. This was a challenging course, and a time-consuming one.  I still generally liked it, however, since I ended up learning a lot.\n\n**Dislikes**\n* Lots of lectures, not all are really great. They could have better explanations.\n* Some homework felt like parameter-tuning busywork.\n* Usual gripes with unengaged professor and hit-or-miss TAs.  YMMV on the TAs.\n* Final project is potentially HARD, depending on what you choose.  Over this period of time I spent around 120 hours on it over 2.5 weeks, on top of working full time, and still did not end up with a product I was very proud of.\n\n**Likes**\n* Concepts were really fun.  Useful for applications from robotics to search to AR, etc...\n* We did learn a lot.\n* Final project option included convolutional neural networks, which are close to the state of the art in the field.  Most grad classes start with \"historically important\" primitive concepts that are then built up into larger, better systems, and never get to the true state of the art in the field.  It was awesome to have the option to learn about these a bit.\n\n**Bottom Line**\nHard class, big time commitment, learned a lot, would still take again. CV is a great course - well designed, challenging, lots of materials to cover. TAs are amazingly supportive with plenty of office hours (don't skip them), though the prof is never around. Being disciplined is a must - start all the problem sets as soon as you can and familiarize yourself with Python, Numpy, OpenCV functions. This is the BEST class I took. Excellent materials and professor! You need to be very familiar with python, probability, and linear algebra. The homework focus on programming your own functions based on the algorithms discussed in class instead of using existing functions. This really helps you to better understand how these famous algorithms work. Every two weeks I had to submit my programming project, so the time was tight and painful, but l could still handle it and definitely learned so much. I recommend this class to everyone. Loved the content and subject. But lot of effort needs to be put in for the assignments, be prepared upfront to spends your weekends on it. Generally this course is pretty good. I did struggle on some of the projects because I spent too much time on figuring out the best parameters. I learned a lot on computer vision. The lectures are cool and I found CV is really useful. This course is both extremely challenging and extremely rewarding. The projects are very hard, but every one of them was something I've always wanted to know how to do - actually getting them implemented and learning how it all works is just incredible. The lectures cover an extremely wide range of topics, while there is sometimes more of an emphasis on the math than the intuition, you come away with a lot. \n\nThe projects you work on in this course are some of the coolest things I've ever worked on. If they offered another CV course with more projects like this, I would take it in a heartbeat. Seeing the output of an algorithm that you implemented to track a hand in a video for example, that's just awesome. \n\nThe time requirement is very real. The 2nd project, which turned about to be the longest, took me about 60 hours to complete. The math and linear algebra can be intimidating, and if it wasn't for the community on Piazza I don't think I would have figured out how to do certain things. As difficult as it is, the grading is very honest and the TAs are extremely helpful - if you put in the effort you will succeed. \n\nThis is a very challenging course but it is 100% worth it. I would HIGHLY recommend learning numpy and at least brushing up on opencv basics before taking this course. I think a better understanding of numpy and \"vectorization\" in particular would have saved me a ton of headache in the first half of the course. Also, I did not do this, but I wish I had taken Computational Photography first. There were a few posts on Piazza about how much that helped.  This is one of the most well designed classes you'll come across during your time with OMSCS, seriously! I've taken a few other classes before and they all had a major disconnect between lectures and assignments -- the lectures were very thin compared to what was expected and a lot of self researching was needed. Dr. Bobick really does care about teaching this subject and wants you to understand and appreciate it fully and this shows easily in his lectures, which are formatted logically and are exhaustive (well, atleast for an intro course.. ). The TAs are very knowledgeable and helpful, made good comments when assignments were returned. \n\nRegarding the content of the course, much of your time will be spent on parameter tuning rather than implementing concepts and algorithm (especially in problem set 2, the hardest one IMO). So it is a good idea to play with the parameters early in the course and get an understanding of how they change the results. It does get a bit math intensive towards the middle and latter part of the course so brushing up on your linear algebra would go a long way. The final was open-book and was quite easy and straightforward sticking to higher level questions than mundane specifics. \n\nOverall, I absolutely loved this class to bits and would easily recommend it to anyone looking to dive into this wonderful and nascent field! Thought the course was good overall. I think the assignments though (value of the content vs time needed to spent on it) could be improved. Some assignments I spend like 20-30 hours just for just one question where on a different assignment, it would of taken me only 15 hours to do the whole thing. In general, way too many video lectures and content to cover in a single semester. \n\nI think shrinking the videos used for the course by 20% would be more fitting given the length of a semester. Great introduction to computer vision, but doesn't go into depth into anything. \n\nThe final is strange as the assignments don't really prep for some of the details required to get a good grade. \n\nI don't think the Peer Feedback component of the course helps at all, never read the feedback people gave me. \n\nThe Prof is completely hands off, letting the TAs run the course. The TA quality is odd, in the sense, I found some TAs extremely involved and helpful with some almost leaving me wondering what they were doing there at all. The course material is old. Dont expect to learn anything state of the art. However, some concepts are important IMO.\n\nThe worst part about this course is the professor. Prof. Irfan Essa, is one of the rudest professors I have seen in academics. His presence in the class is negligible; the course would be better off if it was none. The only time he appeared on Piazza was to let students know that \"the TA's are not supposed to answer students questions\" \nI have seen Coursera and Community college professors more enthusiastic and involved in their courses. \n\nMy suggestion: Wait until the prof is changed.  This class is extremely well done. The lectures go in depth into many different areas of CV. Some of the projects are tough. Project 2 and 7 were the hardest for me and took 35-40 hours. The lectures are long and go into the math consistently. Excellent introductory course to computer vision. The video lectures are pretty long but equally interesting. Prof. Bobick makes it so captivating. Its almost like he is telling you a story. He breaks down the hard math part pretty well. This course covers more math than many other courses so be prepared for that (ref:http://omscs. wikidot. com/courses:cs6476). The problem sets are many(1 introductory & 7 advanced... kind of) and can be pretty tough. Thanks to Pedro (TA) for breaking it down for us. I've completed 5 courses so far & have not come across another TA more helpful & passionate than Pedro. I'll credit him as much as Prof. Bobick for this course. \nYou'll learn a lot on fundamentals of CV, it's applications. You'll definitely learn a lot of Numpy tricks & openCV. \nOverall an excellent course if you are aiming for CP&R specialization or in general curious about CV This was one of the most difficult yet most rewarding classes I've taken so far. The workload is fairly large. There are a lot of lectures to keep up with each week, along with a problem set due every two weeks. The problem sets vary in difficulty and level of effort. Some took me as much as 60 hours to finish. Nonetheless, the problem sets do a good job of reinforcing the material covered in the lectures and help you develop a deeper understanding of it. Plus, the problem sets are interesting. Many times after finishing a problem set I found myself staring at the results in amazement. How many people can say they've implemented an augmented reality system and facial recognition software? I cannot recommend this class more highly. The content of this course is really interesting, though it feels to me like too much for one course - 30 hours of dense lecture videos exceed any class I've taken so far. The six projects had two week windows (plus a 3 week final project) and typically required tremendous effort, an average of 40 to 50 hours, and a peak of 70 hours for me. They mostly started off pretty cool - the coding was fun, the outputs were impressive - but typically had was too many parts, such that by the end the joy was sucked out of them. PS2 about sign detection was particularly atrocious in this regard. It just had way too much packed in. A notable exception was PS3 on augmented reality, which had a more reasonable workload (~30 hours), which allowed it to be strictly fun. It's my understanding that they redid a bunch of the projects this semester and it sounds like they got harder. This also meant there were frequent bugs in provided code, though I'd imagine this will be less of an issue going forward if they keep the same projects. In my opinion this course would be better off either split into two courses or with a little less depth; I was just so fatigued by the end that I really didn't enjoy it, even though the content is fascinating.\n\nI am surprised by the recent review which commends the instructional staff - this course has objectively the worst instructor interaction of any of six courses I've taken thus far. For example, there are a combined 320 unanswered questions or unresolved followups on Piazza, roughly 10x the next worst class I've taken by this metric. The ratio of instructor responses to student responses is 0.642 - I've rarely (never?) had a class below 1.0. There were commonly bugs in project code that would be caught by students, and the instructors would not post updates or even make conspicuous announcements about the errors to save hours of pointless frustration for students on already tremendous projects. The one glaring exception to this trend were TA Matt Houston's office hours, which were excellent. The actual instructor, Dr. Essa, was completely absent - no office hours, no Piazza, etc. In fact, one of just two times he ever showed up on Piazza was to attack some students who implied that he was absent!\n\n\n\n\n Great class, I learned a ton, very difficult final project.  I suggest you have a strong grasp of numpy as you will not be able to complete the projects without it. Spectacularly well-run course. These TAs should be the golden standard for TAs everywhere. Assignment descriptions are very thorough and the starter code has plenty of helpful documentation. Matthew Houston is a godsend. His recorded office hours are incredibly helpful for understanding the assignments. I stress the recorded bit especially because it is not always convenient for everyone to watch live office hours. I have taken ML, AI, and RL before this class. RL TAs were fantastic (especially Miguel), ML was decent, and AI was not that great. Great TAs and documentation make a huge difference in the quality of a class. You do not want to spend hours trying to figure out what is being asked of you for assignments, or what the starter code is doing because there is a serious lack of comments.\n\nThe final project involves exploring state-of-the-art methods on computer-vision related problems. It was very demanding and time-consuming but well worth the effort. There were several topics to choose from this semester, with accompanying specific instructions. \n\nA guide was also issued for the final exam. This was some of the densest material I\u2019ve studied. The lectures were interesting, but so packed with material that it was difficult to absorb. Grade was determined based on 8 problem sets (partially auto-graded), peer feedback, and a final exam. Thankfully, the problem sets supplemented the material quite well, and helped me to understand some of the math and concepts that were discussed in the lectures. Even so, without a fantastic TA (Pedro) who hosted office hours every week to talk about issues in the problem set, this class would have absorbed much more time. To get over a 95% on the problem sets, you had to put in some work to show going \u201cabove and beyond\u201d what was assigned. Typically, this took the form of an additional \u201cchallenge problem\u201d in the assignment. These problems usually were parameter-tuning extensions of the original assignment, but could take several hours to complete. I should also note that several assignments required some amount of parameter tuning, which some find tedious and boring. While this may be true, it does accurately reflect the nature of the field. \n\nOverall, this was an enjoyable class to take. I felt I learned a lot of applicable material, but also felt like I had not absorbed most of what was discussed in the lectures simply due to my time constraints (also took CCA and ML4T this semester). Like most classes, you get out of it what you put into it. The professor makes the lectures great. The problem sets force students to understand the material in the lectures by having them implement the ideas shown. The results of the problem sets are visual, so its nice to see how tweaking parameters can change the way objects are detected or tracked. The p-sets are python with heavy usage in numpy and openCV. Linear algebra knowledge is key to getting things to work efficiently. \nThe final was timed on T-Square and open notes/book/lectures. The wording of the questions were a little tricky, so make sure you take your time and really understand what the questions are asking for. \nGreat course! Be mindful of your grades in this course, there is not really any curve. 88. 3% got me a B. Overall I liked the course. I had no former education in Computer Vision, and I thought all CV was basically ML, which turned out not to be true.\n\nThe projects are good and challenging. The lectures are very entertaining and well done. That's what saved the course for me. \n\nTA engagement was kinda poor, and the Prof. was absent for all the time and only showed up in the last few weeks of the semester. I owe all my learning to my fellow classmates. \n Lengthy video lectures and time consuming assignments ( mainly due to the need to tune parameters a lot). TAs were very helpful and course content is pretty good Very solid all-round class. 8 HWs due generally every other week, then an open note/book/internet final. You should be comfortable using python and numpy or at least able/willing to pick them up. Some math is covered, but mostly at a pretty superficial level. \n\nClass was more time consuming at times than difficult. A few of the HWs took more time than others because of needing to hyper-tune parameters to get optimal results. Lectures are very good, but I wish they focused a little more on depth than breadth. This class covers a ton of material, but mostly at a pretty shallow level, but this is of course to be expected from an intro survey course. \n\nNo involvement from the professor, but TAs were mostly very good. The video lectures are entertaining, although the materials are really many and can be tiring. \n\nThe second problem set was REALLY hard, at least for me. From that point on, things had been more manageable. \n\nFeedback on the assignment takes some time. \n\nYou will learn a lot from your classmates. \n\nI watched most of the lectures related to computations needed for the problem sets twice. \n\nWhile doing the problem sets, sometimes it feels like you're in the dark as you can be uncertain if you are doing the right thing. Sharing resulting images on Piazza has been really very helpful for me. \n\n(Update)\nTowards the end of the course, I got really burned out I stopped trying to arrive at the best parameters. My PS grades suffered. My final grade could have recovered by performing well in the final exam, but I was really too tired. When I looked at the exam feedback, I realized most of my mistakes were just because I misread them, but I actually know the answer. Not that the questions are not worded clearly, I was really just blurring out already when I was taking the exam. Looking back, though, maybe my fallout could have been much earlier if not for my supportive classmates. I did not appreciate early on the virtue of having Piazza graded, but I guess it helped in making students vocal and more active in providing support to each other. On the other hand, just a little more push could have given me an A. So my advice to those who will take this: do not give up. It is doable. Very difficult, but doable. And allocate your energy well, you will need it until the end.  Took this as my first course in OMS. I had almost zero experience in CV, but had a lot of experience in python and numpy.\nThere are a LOT of lectures. LOT of content to cover. The lectures were done by Prof. Bobick (who is no longer with GaTech), he makes the content interesting it by explaining concepts clearly and breaking difficult concepts into small, simple and easily digestible chunks of information.\n\nThere are 6 assignments, 1 final project and 1 exam (worth 15% of your grade). The assignments do a good job of covering all the important and interesting concepts of the course. Some assignments are difficult in the sense that - you can get it \"working\" relatively well, but to get the output they expect you'd have spend A LOT (extra emphasis on lot) of time parameter tuning.  The exam was open-book, but don't let that fool you! you still need to have a good grasp of a pretty much the entire syllabus to do well in the exam!\n\nThe final project requirements are not straightforward. There is a lot of emphases was placed on your report - you had to read papers and follow strict requirements for each project topic.\n\nThe TAs were helpful in Piazza in the beginning, but the activity kinda fell off after the first few assignments IMHO. Prof did not interact with the class via Piazza during my term. The Slack group was a godsend. Discussions on slack with other students was what helped me through the assignments.\n\nOverall, it's an interesting course. CV is a very widely-applicable subject and I suggest if you are planning on having a career or doing research in ML or similar fields, do take this subject! This was one of my first classes in the program (along with [Computer Networks](/courses/6250))... I learned a lot in this class... but I feel like I could've learned more if we had the option of sharing code with others.  Without certain necessary numpy skills some projects would take hours to run.\n\nFor my final project I spent probably 120 hours on it and got it so that each \"pass\" would run ~8 seconds each, but I know other students got it down to single seconds each... but we couldn't share code. A very challenging class, but also really interesting. The projects really make you work to understand the coding behind computer vision and much of the difficulty with it. In the end, though, you wind up making code that tracks objects in videos which was really interesting and fun. The lectures are very informative and really fun as well. This course was terrible, please just take a course on Coursera instead.\n\nPros:\n\n1. Valuable hands on experience with Numpy and OpenCV.\n2. The lack of TA support meant I met a lot of cool people via Slack.\n3. The course material has been refined over many semesters.\n4. You get to choose between several topics for the **massive** final project\n\nCons:\n\n1. Prof Irfan is a joke (i.e. no interaction from the professor at all).\n2. The projects are absurdly difficult; the TAs are useless and do not answer questions.\n3. There are 40 hours of lecture videos. They could easily have condensed the content to 10 hours. There is so much irrelevant content that they waste your time with. \n3. The rubrics for each project are HIDDEN from you; you will be graded by that rubric and lose points.\n4. At the end of the day, the topics you get from this course are not very useful. Just buy a book on CV and read it.  I took this as my very first OMSCS course by itself, and it was the perfect choice for that.\n\nOne of the TAs described this course as \"a whirlwind tour through Computer Vision\", and I think that is a very good synopsis. It focuses on \"classic\" (pre-deep learning) computer vision, though there is a final project option that uses KNNs. The lectures are countless (after I completed the first one, I thought I was done for the week, but then I looked at the syllabus and realized it was only one out of five for the first week) and dense, so you get a thorough understanding how each presented method works. Not much fluff or handwaving going on here, Prof. Bobick will explain the algorithms and the math involved in detail.\n\nThe problem sets are challenging and time consuming, but also well-designed and motivating. At the end of each of them you'll have something quite impressive to show to your friends or co-workers. About half the problem set points are awarded by the autograder, and the other half comes from the report which mostly consists of images and/or video generated by your code. So if you get all the points from the autograder, you're almost guaranteed to get an A. So the outcome of the course is quite binary: either you don't \"get\" the material or your coding skills are insufficient and you drop half-way through, or you're able to complete the problem sets and get an A or B (the exam being the wildcard). Speaking of the exam, it was open-everything and unproctored, but still quite challenging. The assignments are only released one at a time, so front-loading is not really possible. On the plus side, everyone is working on the same stuff, so the collaboration (on Piazza) is better.\n\nIn terms of pre-reqs, make sure to brush up on Linear Algebra (you should at least know what a system of linear equations is, for example). A little bit of Computer Graphics knowledge is also helpful, but not required. I did Pryby's \"Linear Algebra Refresher\" on Udacity in advance, which taught me Python and Linear Algebra at the same time (without numpy, which I picked up during the course).\n\nIf you have a full-time job, I would definitely recommend not taking a second course with this one (unless maybe if you're a numpy master who does singular value decomposition in his head for fun). The best one among the 8 courses I have taken so far. Great homework projects, which really helped understanding the course concepts and givers us a chance to practice the algorithms learned in class. The course video is extensive and covers a lot of concepts, while still being clear. The instructor is very energetic and humorous, I really enjoyed watching the videos. the projects may be time consuming and difficult, though. You need to understand the algorithms, and have solid programming skill to implement it. This course made me question my sanity.  The assignments are So.  Hard.  I have a degree in computer science and 4 semesters of calculus, but still could not decipher the mathematical formulas we were given to implement our code.  I easily spent 40+ hours a week, 20+ hours spent trying to decipher the assignment.  Some people claimed they finished assignments (even the final!) in 3 days - I spent every spare minute on my computer from the minute assignments were released to the hour the assignment was due, and I was still lucky to get a B.\nThe course is great, really.  I loved watching the videos, and you learn some fantastic state-of-the-art stuff, like sensing road signs for self-driving cars, to how to create special effects like you see in the movies.  The difficulty comes from being asked to implement these things using just the math.  You've introduced to the topic, the theory explained, the math given and explained, and then off you go!  The problem is that none of that gives you an algorithm to implement.  I found it incredibly frustrating to interpret the math, and in the end had to conclude half of it was nonsense, unless that large 'E' symbol means something other than sum, and every time they ask you to subtract the mean (average), they are just kidding.\n\nIn the end the only reason I passed was because I ignored the formulas, looked at code off the internet, and got the source code for the openCV functions we weren't allowed to use, and painstakingly over several days, went line-by-line through the dense C++ code, figured out what it was doing, where it matched with the formula we were given, where it didn't, and rewriting everything into python.\n\nIf you don't have a lot of time, don't take this course.  You cannot skip a lecture, and will probably end up watching all of them several times, rewinding to go over some dense explanation.  If, however, you do have the time, want to learn some amazing skills, and can decipher mathematical equations with ease, you will love this course. The class consists of 8 projects and a final. The projects range in difficulty, from really easy, done in 5 hours, to really time consuming and param fitting, which can take 20+ hours. Then comes the report you need to submit for each project, here you will see the fruits of your labor, but will also spend hours once you are done with the coding just getting the params and nuances of the algorithms to work perfectly with your images/videos. \nThe final was 35 multiple choice questions, if you compile all the slides back to back, and run through all the lectures once, it should be pretty easy. I studied for about 4 hours, compiled the slides, and hadn't watched the lectures in weeks, but still managed an 82. There were a whole bunch of questions that I easily could have gotten if I spent the time to re-watch all the lectures. \nOverall, I really enjoyed the class and the output from the later projects is really cool. \nDefinitely spend time getting to know python and numpy. Being able to run your code efficiently can change your runtime from hours to minutes or seconds. There is always a way to vectorize. \nThis class is nice, in that the lectures have everything you need, and they are directly applicable to the class. You will be implemented algorithms given in the lectures. This is a good intro into CV(OpenCV will be your new friend). The material is really dense and it covers a lot of relevant topics. You could spend upwards of 6+ hours every week to really grasp the weekly lectures. There are 6 bi-weekly projects which can easily eat up your time. So you may end up paying more attention to the lectures related to the project and skim the rest. The project implementation goes hand in hand with the lectures. Everything you need are in those wonderful Bobick lectures. Aaron Bobick's lectures are great. He keeps the topics engaging and breaks it down into understandable segments. The project topics covered a range from basics of image processing, hough transforms, homography, motion tracking, optical flow, classification, detection,etc.. One topic that was genuinely missing was deep learning methods like CNN, R-CNN (supervised learning SVM is part of the course). \n\nYou have 5 choices for your final project. This is seriously time intensive (depending on your topic). There is a CNN topic for the final project which gives you chance to dive right in on your own. I loved it however it would have been nice to have some of the concepts being part of the course. \n\nCons: The professor(Essa) was no where to be seen till week 8 or 9 after which he made a cameo appearance. All the lecture topics are slightly out dated. The TAs and their responses were mostly binary however there was a very active Slack group which kept my spirits up.  ### tl;dr\nChallenging & fun course. Great material. Course management: not great but not terrible.\n\n### Overall\nThis was my first semester in OMSCS. And my first college course in 20 or so years. I found the lectures pretty engaging overall. I had no experience with CV, no linear algebra since HS, limited experience with Python, numpy, Tensorflow, and Keras, so I learned a lot in this course. The problem sets were challenging. The specifications could have been clearer. I really struggled with the second problem set and wondered if I was cut out for the class. Then I discovered the Slack channel. Saved my life. Seeing how others approached the problem sets (and how they interpreted the sometimes vague, sometimes incorrect assignments) helped me not get too far into the weeds.\n\n### Problem sets\nA lot of the problem sets, at the heart of it, were translating formulas (and occasional algorithm flowcharts) to Python. Sometimes I understood the fundamentals, sometimes it was straight up transcription.\n\n### Course Management & Piazza\nPiazza was pretty much a dumpster fire. Hard to believe anyone would choose it as a tool. TAs were occasionally helpful, often terse. Lots of questions went unanswered. Trying to navigate Piazza made it not worth trying to get help. Prof. Essa was in absentia until the very end when people got upset. He was also disingenuous by suggesting he told TAs not to reply so students would help each other out. I'd have believed that if it wasn't offered as a *post-hoc* excuse. \n\n### Final project\nThe final project (I chose the CNN one) was very challenging. I learned a crap ton, even though my results were pretty much worthless. I thought I might have tanked it but ended up getting 100%. Probably because I documented it well in the paper. And because I did a lot of research up front and tried to base my approach on current research.\n\n### Exam\nExam was challenging but not terrible. Open book. Which was helpful. I spent a good half-day reviewing the lecture transcripts (helpfully put together by a fellow Slacker) and the lecture slides. Lots of `ctrl-f` of course. Managed to eke out a B on the final and a high B for the course. That included slacking for a week of vacation and getting a 61% on one of the problem sets.\n\n### Advice\n1. Make sure your linear algebra and calculus fundamentals are strong. It will help you truly understand the material.\n1. Make sure you have a pretty solid basis for numpy, especially how slicing and reshaping and such works. Lean on numpy vs. for loops.\n1. Spend a few hours at the start of the course getting a high level view of the history and current topics in CV.\n\n*note: my workload is based on actual measurements. I spent 171 hours on this course total including administrative work like registration, watching lectures, reading research papers, problem sets, peer review, final project, exam, time on Slack* Requirements: Know some good python and numpy. So many ways to broadcast operations and indices (aka. vectorize), and you will use a lot of them. Good intuition of Linear Algebra helps a lot. Eigenvectors, projections, and so many linear tricks show up. For the first time in my life signal processing helped a bit. You might be able to get by without a background in either of these, but it's easier to understand if you've got this covered already. \n\nThe lectures are awesome, interesting, and in depth. There's 30 hours of them, so keeping up week by week is important. Projects every 2 weeks will keep you busy. Projects 2, Hough spaces, and 7, particle filters, are the most time intensive. Looking back, my ability to write python/numpy code has improved over the semester and project 2 would take me half the time now as it did earlier on. \n\nComputer Vision draws from pieces of so many other topics. Kalman and particle filters are covered in AI4R, graph cut and probabilistic algorithms in CCA, and supervised and unsupervised learning from ML. All of these are used, just applied to images and video. So you may get more out of the class after taking a few other classes. But it wouldn't be a bad first class, either, if you've got the time to commit to it, as the lectures explain everything you need. Lectures were dense and there were a lot of them. Overall the lectures were pretty good and interesting. \nThere were 7 projects. Second and sixth project were the most time consuming in my opinion, but not necessarily the hardest. A lot of the projects involve finding the perfect parameters to make things work and not so much programming. This was weird at first, but the point of the projects is really to teach you how the parameters affect the process. \nOne open note final exam. Basically it was just there to make sure you had a basic understanding of the lectures. \n\nI pretty much watched lectures Monday-Friday and worked on the projects over the weekend. 2 weeks for each project. Workload was inconsistent. Probably 12 hours a week most weeks with some scatterings of 20 hour weeks. Course lectures and projects were very entertaining and challenging. Projects are well defined. I suggest brushing up on linear algebra while taking the course as the later lectures are heavy in this area. Also be sure to comment and help in the forums, because participation actually matters. I lost 2% of my overall grade because I only made 70 comments in the forums -- the top student commented hundreds of times. The final was not super challenging and was a good reprieve from the rigor of the projects. This was an excellent course. I particularly liked the lectures, which were very entertaining in addition to the great content. The course page recommends a strong understanding of Linear Algebra, and that isn't a joke. The assignments are far easier if you have a solid understanding of the underlying math, and can translate that into efficient code. A good understanding of Python and Numpy will definitely help, but it is possible to pick up along the way. However, the assignments that would tend to benefit most from advanced knowledge of Numpy tricks are earlier in the semester. Community\n\nThe students in this class were very active on piazza and slack. A couple of the TAs were extremely helpful as well. The professor basically lets the TAs run the class. \n\nAssignments\n\nMost of the assignments in this class are difficult. For instance, I spent over 30 hours on assignment 2. The remaining assignments were not usually as bad. That being said, I got A's on every single assignment, so if you have the time to put into them, you should be able to do well. The assignments consist of both programming and a report. The reports have little writing, but it's a TON of parameter fitting. In some cases, finding the best parameters is harder than coding the algorithms. \n\nLectures\n\nThe lectures were informative and funny. However, there are so many of them that it is easy to be overwhelmed by them. Most of them are not directly applicable to the assignment, so there is a temptation to skip those. I do not recommend that. \n\nFinal\n\nThe final was weird. 15% of our grade, but it was under 40 questions. Most of the questions were not that hard. The study guide given to us covered most of it (though, no collaboration on the guide was allowed). In my opinion, if you found much of the lecture content going over your head, then it is absolutely necessary to study for the exam. \n\nSuggestions\n\nTo me, the #1 pre-req for this course is strong programming skills. Everything is done with Python, numpy, and OpenCV. If you don't know Python, this course could be a struggle for you. I picked up numpy and OpenCV during this class, but any experience with those tools will help you. #2, brush up on linear algebra. Many of the assignments require it. However, you'll find that the assignments explain much of it for you, and the TAs may help you with it during office hours. \n\nSo far, I have also taken KBAI, ML4T, SDP, and Networks. This class was significantly harder than all of those. I got an A, but it took many hours. The course material hasn't been updated in a while. The current professor is reusing the old professor videos without modification. The current professor also only appeared once or twice the entire semester and when he did he was unprofessional and extremely rude. He openly stated he told TAs not to help students with questions.\n\nWhile you will learn some interesting things, none of it will be state of the art, and you won't know whether you are even doing it the way it should be done due to non-existent teaching staff. Had this been my first class in OMSCS I would have regarded the entire program to be a scam and a joke.\n\nRead a book or watch youtube videos instead of taking this class - it will be less stress and more useful. Incredible class. The material is extremely interesting, and the assignments/project weren't overly difficult and really emphasized lecture material (although they were VERY time consuming). This was my first class in the program, but this course is probably one of the best courses I've ever taken! Including all of my graduate-level classes as well! Very rewarding, but very time-consuming.\n\nThere is a huge amount of material covered. It helps that Dr.Bobick's videos are not only incredibly well laid out and clear, but also quite enjoyable to watch. They're also very thorough, so as long as you can fit enough time to dedicate to lectures (4-6 hours a week) you'll learn quite a bit within each topic. Assignments matched the lecture material fairly well, and were for the most part well-defined and weren't too confusing.\n\nAssignment breakdown with estimated difficulty / time consumption for those that like this sort of thing:\nAssignment 1 -- easy; ~4-8 hours\nAssignment 2 -- hard; 40-60 hours\nAssignment 3 -- mid; ~25-40 hours\nAssignment 4 -- mid; ~30-40 hours\nAssignment 5 -- mid/hard; ~30-40 hours\nAssignment 6 -- mid; ~20-30 hours\n\nWe had 2 weeks to complete each assignment, and they were always back-to-back so there was really no break in between. Previous offerings of the class seem to have had additional assignments, but starting this term we had a final project instead of the last (2?) assignment(s). The final project had a few selection options, to further explore more advanced and state-of-the-art algorithms for methods we used in assignments and/or other material presented in class that we didn't work on in assignments, and we were given 3 weeks to complete it. Many people thought there were too many things required to be completed for the projects, particularly the convolutional neural network project, so it could easily take 70+ hours to complete everything. A lot of the time spent on assignments and even on the final project is parameter tweaking. Be prepared to have fairly well designed algorithms in place, but spend loads of time tweaking parameter values to achieve optimal results.\n\nThe final exam was open-book and the study guide was very representative of what you needed to know for it. It was a fair exam. As long as you can review most, if not all, of the material beforehand, and find answers to all of the practice questions in the study guide, the exam is not difficult at all. Questions tended to be pretty base-level, focusing mainly on overall concepts and important algorithm details discussed in class. \n\nTAs were for the most part responsive, but as others have noted, Matthew Houston's office hours were a huge asset in completing the assignments. The forums were very helpful for finding out where to go when you were stuck and/or for discussing the assignments.\n\nI highly recommend this class, but be prepared to devote a lot of time to it. It would help to review some linear algebra, and numpy if you aren't comfortable with using it yet. If you have some time, you could try and familiarize yourself with openCV 2.4 as well, as you'll be using this package a lot in the class. Don't wait until the last minute to start assignments, start on them early so it doesn't bite you when the deadlines approach! This course never claims to be similar to Stanford CS231n. It mostly teaches traditional (real) computer vision with machine learning element in some topics. (So I was a bit surprised that now it is a course of ML specialization). Personally I like this aspect more. There are a lot of smart ideas which inspire my ways of thinking. \n\nLinear algebra (a rough idea about what's happening) and numpy skills (vectorized operation) will help you with this course. And Be patient.\n\nRegarding the comment below that \"He openly stated he told TAs not to help students with questions\", I think the professor means(and he did say) that he encourages discussions instead of feeding you answers directly. My observation is that if I ask \"will I be punished if I use this function in my assignment\", TA will answer it very fast. But if I ask \"is algorithm A/parameter A better than algorithm B/parameter B for this assignment/project\", usually I will not get an answer from the TAs directly (but usually this issue has been discussed somewhere else in the post). I understand it might be a pain if you are rushing to a deadline but I think it's fair for effective learning. I learnt a lot by discussing problems with other classmates. But of course it would be better if TA/professor can give some conclusion remarks on some of the discussions. \n\nOverall after taking the course I respect computer vision more as a science.  I am glad the course is not designed to be an opencv or tensorflow tutorial. This course is strange. You will fall in love with it and hate it at the same time. The reason that you will love it is because you will employ mathematics like you never did before in real practice. You will hate it because you will see lot of mathematics which requires a very deep understanding of linear algebra. I mean real understanding of what matrices are, not just knowing the definitions or tricks to solve them. You will love professor Bobick and his humor during the lectures. His lectures were very useful to simplify things, and you won't appreciate his excellent explanation unless you try to read a CV book. I must admit, I didn't fully understand all the math behind many topics but I fully understood the intuition behind them. The beauty of this course is that you will have 8 problem sets which will teach the course literally. I enjoyed every problem set from 1 to 8. The only trivial one was PS1, but all subsequent problem sets will require many many hours of hard work. After this course, you will appreciate math and what it can do for you, appreciate ML and will strive to take any course related to it. In my opinion, this reflects the success of this course generally. If anyone want to take this course, then prepare yourself with enough Python knowledge and linear algebra since you will need them. Also, start any problem set as soon as you can and always check Piazza and slack group since you will find great community who will help and encourage you. I'm happy that I've taken this course as my first course since I've learned many great things and it also gave me enough enthusiasm energy to explore more about ML. Take this course and you won't regret it Tough but balanced class. Problem sets are very well designed to reinforce video lecture learning. TA office hours this term were superb. \n\nI think the workload could be smoothed out a bit, a couple problems sets are too much and some too easy. The problem set wording is thorough but a bit annoying at times, would be nice if words like 'easily', 'simply', etc were edited out of grad level problem set documents. They're unlikely to be true for most students and don't promote learning or good feelings after 12 hours into a tough problem. \n\nVideo lectures and class will need updating soon, though the lattter are great and highly watchable, the field is moving fast. Tough class, but interesting content and assignments. I previously took Computational Photography and felt like that was a good boost on some of the work. The material is dense, but the projects were all interesting (and challenging), and the final exam was open book so while very technical, it wasn't too crazy. Very interesting and useful class. I felt like the approaches to problems and techniques we learned translate well to a lot of other areas of machine learning outside of just computer vision and image/video-related domains. I feel like this area is definitely one that helped spawn a lot of the key concepts in classic machine learning. \n\nPython is used extensively, and you will want to learn how to effectively vectorize your code to avoid computationally expensive for-loops. Problem sets every couple weeks were generally challenging but not impossible. I felt like I learned a lot, and the class focused on the right things to get you to also focus on the concepts that matter the most. Good video lectures. I learned a lot from the lecture slides and enjoyed implementing the techniques discussed in the lectures. With a background in engineering and a handful of years in software development, I found the assignments very straight forward. This is a hard course without good Python, linear algebra and computer vision foundations (like the Computational Photography class) knowledge. The video lectures are interesting, funny and clear, they are truly great lectures. However, I found the TA-ing not to be involved enough or maybe the flow of information itself was not enough. \n\nThe workload is quite heavy, there were a few assignments I spent 20+ hours on (just the coding itself). Grading is okay, though the requirements are not always 100% clear. Also the workload distribution is not even so be sure to jump into the assignments very early on, especially the first few. Another downside of the heavy workload that the TAs can't always keep up the pace either, some assignments took quite long to return and we had to submit at least 3 assignments before we got our first feedback. All these result in a lot of noise on Piazza, you have to go through 10K+ posts on piazza during the semester if you want to keep up. \n\nThey dropped MATLAB Fall2015, from now on you can only do your homework in Python. And unless you are good at Python (including advanced things like optimization and parallelization in NumPy), you'll spend a few nights debugging for sneaky bugs or screaming over algorithms that run for 40 minutes. \n\nAll in all: it is a good class but there is a room for some improvement. The material is great, the assignments are hard but rewarding.  This was a very hard course actually. Learned a lot but there was a lot of work. During the course of the class, I ended up spending most of my weekends on projects. The first project was a joke, and the second project was where the real sh*t hit the fan. I think project 2 was the weeder project and after that it seemed like a lot of people dropped out of the class. I would have to say it was interesting read the feedback from peer feedback from this class to something like KBAI. The feedback was always positive and supportive even if the project wasn't super great. I think we students struggle, they tend to try to help each other out.", 
    "CS-6505": " This class was fun! I had a LOT of fun learning things, doing the problems, and reading through the materials. I learnt quite a bit, too. It's a shame that this class is discontinued. This is a really tough course, specially if you don't have a strong background in algorithms and discrete math but if you like that kind of thing, this is for you. I had to put more hours in this course than any other I've taken but I was pretty motivated because I love that kind of stuff. In short if you are not into discrete math and set theory, maybe skip this if you can. Please notice I took it in Spring '15 so maybe things have changed by now. This is CS, not programming, which means it's taught like a math course. If you've ever taken a math class at the undergraduate level (something above calculus/any rigorous, proof-based course past middle-school geometry), you'll be fine. Get familiar with asymptotic notation and pseudocode syntax, and you'll be just fine. \n\nI have no formal CS background. I took one programming class in college, didn't like it, and majored in math. Later, I learned VBA for consulting, picked up some Java, and got myself a Dev position. And this is my first OMSCS class. But because I've taken math courses before, I've averaged 14/15 on the first four exams. \n\nFor those unfamiliar with how math classes are taught in universities, here's how they go:\nClaim: If [conditions], then [result]\nProof: Suppose [blah]. Then [... ]. Therefore, the claim is true. \nMoving on, \nNew Claim: [Stuff]\nProof: [Other stuff]\netc. \nYou'll get few examples per big concept, which means one or two per lecture. Expect to do most of the puzzling through the implications on your own, though the (ungraded) homeworks help put you in the right mindset and give you practice. \n\nIf you've never taken a math class at the university level, you're going to start out at a loss. Prep. Learn the difference between an intuitive argument (It works for these three examples, so I'm pretty sure it should always work. Besides, it just makes sense, you know?) and a rigorous one (For all objects in this category, equipped with these attributes and arrows, the following holds: [Stuff]. Therefore, in all cases, [other stuff]). Learn induction, contradiction, infinite summation, and whatever else strikes your fancy. \n\nYes, the administrative decisions are capricious and inscrutable, the lectures have flaws, and the Piazza will be devoted to commiseration and scarce on productive advice. There are problems here. But with a little preparation, you'll be just fine. You will be on fire and in hell unless you have studied it before. But at the end, it is the most rewarding course of this program, for me. \n\nGrades statistics for spring 2017:\nA: 25%\nB: 60%\nC: 11%\nD: 1%\nF: 3%\n\nDon't know how many dropped before midterm, but might be a lot as before. This class is not like any other class in the program (as of today). Most of the comments already here describe the experience well, so I'll concentrate on advice. \n1) Study the prereqs specified for the course, but don't expect for a moment that will get you by. Read the assigned textbook for the course (Sipser) and try, try, try to understand it before you attempt the course (yes, all of it). If you don't, you will not likely do well in this course. Use the Internet to help your understanding of the material (watch the Harry Porter Theory of Computation video series). \n2) The teaching/videos in the class are terrible. Sadly, most of the stuff I found on the Internet presents the material in the exact same way. Your best bet? Find a group to work with to help you try and understand the material. And really try to understand it, because you will need to turn in homework that is based on your own thoughts. Additionally, your group will not be there to help you on the exams. \n3) Your grade is based on you and you alone. You will not get a good grade just because you did better than a certain percentage of the class. If that what you need to succeed, this class is not for you. \n4) Don't expect to ever know how you truly stand in the class. Grading (under the current grading style) is very vague and inconsistent. If the thought of this drives you crazy, stay far away. \n5) If you feel you are doing poorly in 1st half of the class, don't assume you will do better in the 2nd half. It is possible that you will. It is likely that you won't. Past [student] performance is no indication of your success [or failure]. \n6) Conversely to #5, feeling you are doing great in the 1st half is no indication of how you will do in the 2nd half. Persevere. \n7) Try out the class. It is a good experience. But don't be afraid to drop the class if you are doing poorly. There is no shame in not completing this class or switching to a specialization that doesn't require it.  This class is very hard. The prerequisites are reasonable but you probably haven't used them since you were last in college so you will probably be rusty. Make sure to prepare for this course in advance. You'll want to focus mostly on proof writing, make sure you understand how to prove direct, induction, and by contradiction. \n\nWhen taking the class, make sure to take time to work through the problem sets. The homework is harder than the exams, but you have two weeks for each assignment and have the ability to submit revised answers based on the homework feedback, so don't let the homework take too much time away from working through problem sets as they will help sharpen your intuition. Get the CLRS book, it's not really optional. \n\nThe lectures videos aren't that good, the videos Chris made for select problem set solutions were great and helped a lot before the exam. \n\nOverall it's a good class. Would be better with better videos. You probably won't be able to apply anything here, but I do feel like it will sharpen your mind and improve your problem solving skills. It's a lot of work so either take it alone or take it with an easier class.  By far the most difficult course I've taken in OMSCS. (I also took 6290 computing architecture, 7641 machine learning) Every homework set is challenging, the exams are no joke, compared to other OMSCS exams. You need to write a lot of things on paper and scan them then upload. Most of the course materials, homeworks and exams are about math reasoning. it is satisfying when problems are solved, but the process is challenging. The piazza discussion helped a LOT, I got hints to the homework problems(but still need a lot of effort and thinking) on piazza discussions. those discussions are really helpful, and helped the thinking process. I heard discussions are not allowed in later semesters though. One of the very hard and very useful courses in OMSCS. For those with limited background in Maths or theoretical computer science, this subject might be more than a handful. But at the end you end up learning a lot. The course structure and the grading was bit vague, but heard that this was rectified in further semesters. Sad to see this course go, as a I learnt a whole lot here, though suffered as much for it as well. Theoretical class that gives a good overview of the most important algorithms. However it sometimes goes too far and we end up learning very unusefull things... \nIt was not hard for me as I have a mathematical background I took this course on Fall 2016 where the passing rate was much higher. The class was definitely time consuming but you will be able to get an A or B if you invest sufficient time. Here are some tips:\n- Get a good pencil and practice writing. We had 5 times exams. The exams were to be hand written, scanned and uploaded. There are some suggestions on the slack group. \n- Start working on the problem sets as early as you can. The problem sets were much harder than what showed up on the actual tests. \n- Make sure you are able to solve all the problem sets. Many times, the exam questions tended to be very similar to some of the problem set questions. \n- Don't feel bad if you are not able to solve the pre-requisite questions. I spent a lot of time preparing for the course, but was not able to solve most of the pre-requisite questions. However, I ended up doing quite well in the course. \n- 5 tests actually made it easier as each week, we just had to master 3 different topics. There was no cumulative final. \n- Join the slack group. You don't need to be active, but do keep an eye out on the discussions. You will learn a lot here. \n- Listen to all the office hours (good or bad). \n- There are lot of external resources which are much better than the Udacity videos. Check the slack group for links (e. g. Harry Porter's videos, MIT algo course, Stamford's Roughgarden's etc). You can go through the topics as they come up each week. A rich course. The instructor Chris Prypy cares about the students, which makes all the differences. \nThe best way to prepare the exams is to study the problem sets. Several changes were introduced this semester to address many of the concerns raised by students in previous semesters. \n\n- There were no graded homework assignments. Instead, there were problem sets which students were free to discuss on Piazza. \n\n- The absence of graded homework assignments was compensated by more exams. Instead of 2 exams, there were 5 exams! However, each exam covered only three weeks of material at a time, so it was manageable. \n\n- There were several supplementary YouTube videos that helped clarify concepts that were inadequately addressed in the Udacity lectures. \n\n- There were several office hours and, unlike in the past, these were available for viewing on YouTube at later times. \n\nIn my opinion the above changes were a big improvement over the previous formats and this was clearly manifested in the smaller withdrawal rate and improved overall grade distribution. The final grade distribution was:\n\nA \t101 32. 0% \nB\t115 \t36. 4% \nC\t10 \t3. 2% \nD\t3 \t0. 9% \nF\t0 \t0. 0% \nW\t87 \t27. 5% \n\nThis does not mean that the course has been compromised and watered down. Rather, by streamlining the content and redesigning the grading criteria, the learning process has become less burdensome and unnecessary restrictions and time sinks have been eliminated. The course content is still the same, so students still have to put in several hours of work. \n\nPersonally, for me, this course was a great learning experience. I took this course by itself so I was able to manage without too much stress. Since my undergrad was not in CS (I have a masters and PhD in Aerospace engineering), I prepared for this course by:\n\n1. Reading \"How to Prove it\" by Daniel J. Velleman. \n\n2. Watching the Harry Porter videos series (based on Sipser). \n\n3. Reading up on the basics of graph theory and related algorithms\n\nEventually, despite not having a math or CS undergrad, I was able to score 97. 33% at the end of 5 exams. So with the right kind of preparation, anyone do well in this course. This was my first attempt at 6505. I actually signed up for the new Graduate Algorithm course which did not start. I have passed with a B and feel proud of myself for having made it through. It was by far the toughest course among the 6 courses in my last 4 semesters. I would not say it was Maths heavy but it does require brushing up some basics and keeping them handy for proofs/calculations throughout the course. Prof. Pryby's youtube video lectures helped a lot during the initial part of the course. Video lectures on Udacity were dreadful. As the course progressed, I got a hang of things. Like others have stated, working on problem sets helped prepare for the exams. No matter how hard I prepared for all the 5 exams, I never felt confident before, after and during the exam, infact I always felt like I was going to fail. I somehow maintained 9s and 10s out of 15 throughout, which got me a B towards the end. It took me 4 tests to finally get a 5/5 on a question. I have to say that there were several moments where I felt like giving up, but I held on. I remember looking at the sample problem sets and exam questions before the course started; absolutely nothing made any sense. Just like everyone else, I too have learned a lot but at the same time I feel like there is so much I still don't know :) Fun class. Exams can be a bit tricky. Teaching staff was very involved and helpful. I learned a lot. This class was very challenging, and also my first class in the OMSCS program. In the end, I found it to be very rewarding and I learned a lot that I am currently finding useful in my class this semester. \n\nIt took me some time to find the best strategy to learn and do well in this class, and here are some methods I found to be the most useful:\n\n* Following Piazza discussions about the problem sets\n* Using VisuAlgo to help me understand graph theory: https://visualgo. net\n* Reading outside resources (online) to get another perspective when I didn\u2019t understand something\n* Directly applying similar concepts/routines from the practice problems on the exams, rather than trying to solve the exam questions from scratch You need to have previous experience on mathematical language, how to read and write proofs, discrete math. Trying to learn those skills while taking this course won't work at all. To be honest, the instructor clearly explains that, and gives a fair warning on the first week of class. Trying to do that would be like trying to learn Pre-Calculus and Calculus at the same time (as someone recently mentioned). \n\nThe instructor and TA seem very involved in improving the experience for all students. New for this semester: they returned a first submission of homework with feedback, and we had a resubmission opportunity for 100% of the grade (6 homework assignments - 3 problems each). Also new this semester: the course is now divided in three sections, for each one of them there's a proctored exam (closed book, one sheet of notes - two sided). So it was easier to study than for previous terms, when there were two exams. \n\nThe exam problems were very similar to the problem sets given for each unit. There were no \"official\" solutions for the ungraded problem sets, the philosophy of the instructor is that we should work on them on our own (but collaboration in study groups was encouraged - I know there were study groups on G+ Hangouts, Slack, and locally held meetings). Working on study groups really helped. An informal statistic for a group had: 11 A's, 10 B's, 6 C's. So that really makes a difference. \n\nIt was mentioned that there will be further enhancements to this course next term. Something else: do try to take advantage of every extra credit opportunity (if given). \n\nI definitely can say that I learned A LOT. There where weeks were I spent my weekdays after office 8pm-1am, and weekends all day long reading, working on homework, watching lectures from other universities. Take advantage of the instructor/TA's! Don't be afraid of asking any question about the material, I don't remember a question left unanswered.  This class was one of the most challenging, yet rewarding classes I\u2019ve ever taken. I took an automata & complexity class in undergrad, but taking this class gave me a much greater appreciation for algorithms and the theory of computing. Despite its storied history and monstrous reputation, this class seems to have improved to the point of being one of the best classes in the program (I\u2019ve taken 9 so far), so it\u2019s a shame that it\u2019s being replaced \u2013 hopefully Graduate Algorithms will be just as successful as this has been the past couple of semesters. This class was divided into three sections: algorithms (9 weeks, 3 exams), computability (3 weeks, 1 exam), complexity (3 weeks, 1 exam)\n\nSome of the bad things were still there: the Udacity videos were largely useless; I dreaded having to watch these, and was thankful for the weeks that the instructor posted new videos on YouTube that aligned more with GA. I was also able to understand material much better by just reading Sipser and CLRS and watching MIT\u2019s OpenCourseware and UC Davis\u2019 equivalents of the material. Having problem sets assigned solely as preparation for the five exams (each worth 20%) was great. We could propose solutions on Piazza and have TA\u2019s or the instructor Chris Pryby (who were fantastic, btw) respond and give us hints and feedback. Tests were difficult, but fair, and there were opportunities to make up for some lost points on previous exams. No doubt the material is hard and might take some students a few semesters to get an A or B (particularly ones that have never seen the material before), but this is one class that I would recommend to anyone seeking a Master\u2019s degree in this program. Background: I majored in CS and Math as an undergrad. My undergrad work was heavily theory based. I can't imagine taking this course without that sort of background. I would heavily suggest self teaching some of the material beforehand. \n\nThere was a homework assigned each week, but not collected. Try your best on each problem and then look up the student answer on Piazza. This is probably the best approach to learning how to do these kind of problems. \n\nThere was an exam every 3 weeks (5 exams total) and these exams only covered the past three weeks of material plus we got a \"retry\" question from the previous exam. So each exam had one question for each week of material plus one optional retry question which covered a topic students did poorly on for the previous exam. I never did the retry question so that I could have more time to work on the required 3 problems for the exam. You have 2 hours for the exam, you also were allowed a one page handwritten note sheet for the exams. \n\nYou will need the famous CLRS textbook as well as the Intro to the Theory of Computation book by Sipser. Both books are pretty good. \n\nProfessor Pryby made some very helpful supplemental videos and office hours videos to go with the legacy Udacity videos from the previous course professor (I think his name was Charlie). \n\nOverall I prefer \"code slinging\" over theory, but this class was a good change of pace (6th OMSCS course for me). Yes, this course is hard, but it is just as rewarding. Remember the old adage - no pain, no gain! This course is very helpful in many ways, one of which is that the concepts covered here are used in pretty much every other course (and I've taken 2 others so far). At the end of the day, computer science is a lot about math - not just programming, and understanding the principles behind the programs we write is just as important. I was just as frustrated when taking the course - the countless times I've complained, the near nervous breakdowns and the constant frustration of not being able to solve the assignment problems on my own. However, it's been over a year since I took this course and I am still enjoying the fruits of it. Also, it doesn't matter if you get an A or a B on this course - what matters is how much you learn. To be honest grades don't really dictate success in life anyways. A few things to succeed in this course\n\n1. Be prepared - take some preparatory courses if this is the first time you are taking such a course. There are plenty on Coursera on Design of Algorithms. \n2. Set aside at-least 30 hours a week. If you are working and have a family, ensure that this is the only course you take that term. \n3. Struggle on the assignments - try as hard as you can on each of the problems. But don't be afraid to ask the TAs for hints and to Google for help (don't cheat, but ask for help and cite your references). \n4. The video lectures are not sufficient. Read the textbooks - especially ones recommended for each section. \n5. Solve as many problems as you can - Google for exam papers from other colleges.  Charlie Brubaker worked very hard to help out the students in this class. So far I have taken 5 courses. This was by all means the hardest class that I have taken, however it was also the most rewarding. There are many key areas that this course covers that are critical if you are doing \"computer science\", not just software engineering. What I mean by computer science is algorithms. If you want to work in some of the top companies, this is critical foundational knowledge. \n\nI get a little nervous when I see some of the comments in this thread. Georgia Tech is top program, and top programs should be hard. I hope the professors don't water down the program by making it easier. ", 
    "CS-6601": " Took this course as my 2nd in OMS after DVA. Looking back at the entire semester I feel this course really covers a lot of topics in the fields. Even though some of them are shallow, you do get deeper knowledge on the topics used for assignments, e.g. shortest path, A* search, decision trees/random forests, unsupervised learning (clustering), hidden markov model, etc. Some of them are must-knows for tech interviews. Also some very interesting topics like constraint satisfaction and logic planning, which could help you solve a lot of brain teasers:)\n\nI would say AI is about 2-3 times harder than DVA in terms of time spent, depending on your background. If you were like me, a professional developer in the industry for years, you will find it's easy to pick up python/numpy as part of your 1st assignment. But bayes networks, linear algebra and some other math really gave me hard time, so be prepared. \n\nThere're 6 programming assignments about each every 2 weeks, plus two exams each takes one week to finish. This made the schedule really tight and I didn't have too much down time during the semester even just taking this 1 course. So be prepared for a few busy weekends and stay-up-late nights if you work fulltime or/and have kids to take care of. \n\nOveral I loved this course and I think it was a great first course to AI before taking more ML related courses, as long as you're ready for the challenge. The course content was excellent. Most of the video lectures were great. The highlight of the course was the homework assignments, which gave a practical exercise in implementing AI concepts yourself; I wished there were at least 10 of them (there's only 6 in the class). \nOn the down side - the course pacing wasn't the best. The first half was great at going into depth at each subject, but the second half was definitely rushed, as if we were running out of time faster than the instructors had planned. I'd wished the pace had been quicker towards the beginning, so we'd have more time to look at interesting topics like logic, logic-based planning, and machine learning (though, I understand the last one's covered in another course) - perhaps ML could've been shorter or non-existent, and be deferred entirely to the actual ML course, so we'd have more time for other concepts? - The content is very interesting and we implement ourselves a lot of algorithms\n- Lots of problems with Bonnie and the automatic notation was not always fair. This is probably because the course was quite new at the time\n- The TA and teachers are there to answer your questions and were active\n- Some projects are a LOT of work... I spent weekends on it\n- The material is very well done but not very funny to watch even if they tried their best... \nOverall I learned a lot and even if it was hard and got frustrated often, I liked this class -\tExcellent introduction to AI. \n-\t6 assignments in total, I recommend to start each assignment as soon as you can, as they can be very time consuming. If you leave them for the weekend before its due, they will most likely suck up your entire weekend and you will be hitting your head against the wall for not starting early. \n-\t2 Take home exams, as with the assignments they require a lot of time. Difficulty is ok if you have a good understanding of the assignments and you are up to date with your readings. Take lots of notes as no internet usage is allowed except the notes you have an any links they have in them This was a great class touching on many topics in AI. The videos were fun (corny jokes - 'poor #4'), informative, and did a great job of introducing and reinforcing the concepts being taught. The assignments generally transitioned well from the lectures, but sometimes there was a gap. Usually, you could get most of the points [awarded] for an assignment from the lectures and class materials. To go all the way, you needed to do a bit more work [i. e. research]. All in all, very fair and quite straight forward. \n\nNo group projects required.  The beginning of the class was much harder (or at least more time consuming) than the second half.  There are 6 assignments, and you could easily put as much time into each of Assignments 1 and 2 as the other four combined.  The class is very interesting, challenging but not impossible, and very well organized.  There were some minor issues with miscommunications and disorganization, but the professor and TAs are very responsive and very reasonable about finding solutions.  Overall you will learn a lot in this class, but be prepared to put some work into it.   This class drove me absolutely insane.\n\nFirst: a huge chunk of the material on the exams were never taught through the lectures or the textbook. I took so much time to understand the lectures and readings. I look forward to seeing how much I know by taking exams in classes, but the exams made me feel like I was wasting my time. Almost every question requires the instructor to post a clarification on Piazza. Some of them even required a Wikipedia link in order to solve since it wasn't in the lectures or textbook. There is so much material to cover in this class, there should be no reason for adding material never taught.\n\nSecond: The assignments take a LONG time to complete. There are 6 of them every 2 weeks. You cannot catch your breath. As soon as you submit the previous assignment, the next one is released and back to work you go for hours upon hours. I do want to add that the assignments helped me learn the material the most.\n\nThird: The TAs take an extremely long time to respond to questions. This is horrible when you have less than two weeks to work on the assignments and you need a clarification.\n\nFourth: The lecture videos by professor Starner are awful and uninformative. The professor has two guest lecturers, Peter N and Sebastian T, and their lectures are way more informative and really good at explaining concepts. Professor Starner just reads from a script and is hard to listen to.\n\nI definitely would not take this class as my first AI class. I would take ML or other AI concepts first so that you know the material going in because when it comes to exams, you will not have been taught the material. This was definitely a challenging course, especially to be done during the summer semester. I had taken KBAI the summer before which had given me some good experience in Python and some Numpy. Given that KBAI was my first experience with Python and Numpy, I still did not have a ton of experience going into this class. AI really improved my knowledge of Numpy and pushed me to learn how to write faster code (vectorized) using Numpy. This was something I had never done until this class and was required to meet some of assignment run-time requirements. \n\nAll the projects were fun and interesting. This really helped me learn the topics thoroughly and dive deeper into each of the topics. What wound up working best for me was to just watch the videos, get good enough understanding of the current topic, then start the projects and read the book as needed. If I had more time I would have liked to read all the material but given that the summer class is shorter with the same amount of content covered in the class, and that I was travelling during some of the class I didn't have time to do everything. \n\nOne thing I really appreciated about this class is that it also had a Machine Learning section and project that has now piqued my interest in ML! Before taking this class I had no real exposure to ML and now I'll probably wind up taking the official ML class. \n\nGrading feedback could have been a lot better / faster. There was a grading fiasco at the end of the class where a lot of students, myself included, had the wrong grade submitted to the transcript. The TAs were helpful in sorting out issues like this but it seemed like this problem should have just been avoided to begin with. I am struggling to write this review. I was genuinely excited to take this class, having heard that a lot of people loved it. Now that it is over I have mixed feelings. Here are some thoughts:\n\n1) This course really should be split into 2 courses. There is just so much material that the semester feels way too rushed. I didn't get to fully process each assignment because it was due within two weeks, and then another (really big) assignment was assigned right away. The midterm and final were used to 'teach' us concepts that the assignments and lectures didn't go into any depth on. Having more time would allow for interesting programming assignments on topics such as neural nets, constraint satisfaction problems, etc. It would also allow for the midterm and final to focus on topics that have been fully taught. I have no idea the mechanics of splitting a course up, but I hope the idea is considered for the sake of future students. \n\n2) The midterm and final were rough. They were long (each took me 15-20 hours and I could have spent longer) and each one had some topics that were literally just a mention in the lectures. The student had to research and learn on their own how to solve problems and use certain equations. In addition, the questions themselves were not well vetted. Most questions required multiple clarifications during exam week, which required that you go back and redo questions you thought were done (to make sure your interpretation matched the clarification). The exam questions were excellent for homework problems, but on a high-stakes exam it was not a good experience. \n\n3) The curve is generous, so if your grade is low you still have hope of at least a B. Don't be intimidated by the 100% median on assignments.\n\n4) You get to drop one of the six assignments. This is critical considering how fast the class moves.\n\n5) Do NOT take as a first course. I recommend it be the middle or end of your course progression. I took it halfway through after ML4T, which was great because the Python/numpy came in very handy.\n\n6) Carve out time for this class. I do not recommend pairing it with another course, and find ways to set aside at least 20 hours a week. \n\n7) As far as prep, reviewing Bayes/basic probability and having solid Python skills will help.\n\nOverall I learned SO much from this class. The material was super interesting. I just wish the exams were done differently and the material could be more spread out.  As other reviewers commented, there are lots of bugs and erratas in Fall 2016's assignments and exams. I think with the feedback they got, this will be improved for the next iteration. \n\nThe lectures don't really go into details some of the times, you need to read AI a modern approach 3rd edition. The book is a bit dry to read. Also there are extra readings for the challenge / extra credit part of the assignments which are not covered in the lectures. \n\nFor the logistic/execution this class falls short, 3 stars. \n\nAI covers a lot of interesting topics. They are all very useful techniques to learn. \n\n1. Game Playing\n2. Search\n3. Simulated Annealing\n4. Constraint Satisfaction\n5. Probability\n6. Bayes Nets\n7. Machine Learning\n8. Pattern Recognition through Time\n9. Logic and Planning\n10. Planning under Uncertainty\n\nSo for the subject matters, this course gets a 5 from me. \n\nI wish they would tune the assignments so you don't have to do the superficial boring stuffs (each assignment has 50-60% easy points that you can get by doing the minimal) and add more (shorter) assignments to cover the topics omitted. The assignment and feedback are big part of the learning for me. \n\nOverall I'd give this course a 3. 5 - 4 stars I enjoyed this class - but it has a number of issues.  \n\nPros: I preferred the lectures taught by the professor (vs the ones taught by the guest lecturers).  They kept my interest.  I also thought the projects were sorta fun and helped ingrain what we were learning in lecture.\n\nCons: TAs really slow and/or unhelpful.  The projects could be a breeze if your mental model matched that of the TA that wrote the grader.  But if your implementation runs afoul of the grader (even if it works locally and passes tests), get ready for many hours of hair-pulling trying to figure-out the inner workings of the black box that is the grader.  The tests also bugged me.  They were \"fun\" in the sense that there was some humor to them, but they're basically word problems that include a small amount of AI concepts and a lot of high-stakes arithmetic.  You're literally building spreadsheets and/or writing code to solve problems and if your answer isn't accurate to within the sixth decimal, you get zero points.  Quite tedious if you ask me. Amazing course!  I wish I could go back and take it again.  The assignments take you on a journey through AI.  The first assignment was really tough, but it kind of set the tone for the course and compared to that first assignment the rest didn't seem as bad.  The midterm and final are take home and a great learning opportunity, provided you have enough time to do them.  Make sure you read through the prereqs on the OMSCS site, most of the \"I wish I had learned this before the class started\" complaints I heard were almost verbatim from the prereq list on OMSCS.  Thanks to the TA's and Prof Starner for a great course! Definitely belongs where it is among the top 5 hardest OMSCS classes. The material covered is good but 95% of the learning must be done outside the class to complete the assignments. The assignment/projects are long (~15 hours/week for elite programmers, ~40 for average programmers), cover key AI topics that are often hidden behind black box python packages, and are heavily structured. This is both good and bad as the assignments act more like cookie cutter puzzles cut off of a completed project that you must fill in with your own pieces. Nothing is worse than trying to decipher someone else's code and figure out their intent. This is somewhat solved by an offline testing suite but it is often limited to the most basic things. The class definitely has the feeling of being more interested in making money than teaching students. It's a better class if you prefer independent learning and showing off your superior knowledge and skills to the professor.\n\nGrade Received: B It was not as hard as before. It seems that some assignments and videos were remade for this summer session. As a previous message said, if you have background in machine learning, you will already know a quarter of this course. The grading was friendly. In total, I like this course, because of interesting assignments and enthusiastic instructor. At least, it saves my GPA. I managed to stay sane at the end of this course. Although the concepts are really interesting. The course is extremely hard.  This course requires some pretty strong statistics , conditional probability theory , advanced math and python skills using vectorization with Numpy package. If you plan to take this , please ensure you are really confident about these per-requisites, else dont bother.\nI do NOT recommend this as a first course and also , take this alone in a semester, do not pair it with anything else in your life during the semester Great course: lots of fun and you learn a LOT (broad survey course). The projects can be a bit tough, so start on they as soon as possible! All of the material (lectures, book) is straightforward and practical, which makes the course very accessible.  I really like this class but it was super difficult and I don't think it's suited well for a summer semester. \n\nThing that will make this class easier:\n* Experience with python\n* Extensive experience with numpy\n* Previous experience with machine learning\n* Recent experience with college level mathematics\n\nIf you have none of these this class will be extremely difficult. Personally I only had the python experience, and I haven't taken higher level math classes in nearly a decade. This class was a giant source of anxiety and a massive timesync for my entire summer, and somehow I scraped by with an A. \n\nVery interesting material, but don't take it in the short summer semester. Best class I've taken so far (out of 4). 10/10 would recommend.\n\nTopics are super interesting and important. The assignments are time-consuming but fun and enjoyable overall. Best thing is you can know your score as you submit as the class uses an auto-grading system.\n\nExams are hard! They are 40-50 pages long and with a mix of types of questions (MCQ, short answers, fill in blanks, etc). They cover all topics in great details so you'll know you'll have to know the materials well to do well in this class. Personally, I love this because it forces me to think deeper and learn more from the materials. Very good course. Worth to take. Thanks for the lectures and TAs! Decent course and I learned a considerable amount. I really did not like that some of the assignments' starter code was difficult to understand and sometimes TAs would have to go back and fix bugs after the assignment was released. I spent more time than I should have trying to figure out how the starter code was set up (bad documentation). This got better as the course progressed so I think the TAs were taking our feedback into account and pushing more polished assignments. The assignment medians are also very high. 98 or 99 in many cases. You have to get perfect score on almost everything and hope that some others do not, in order to get an A in this class. This is a survey course in AI and a great one! It covers a lots of AI materials that can be used in other computing disciplines as well. The assignments are hard but lots of fun, just completing those is an accomplishments I think. Exams are open book and I have found it easier than assignments in comparison. Grading is curved and fair. Teacher and TA's are one of the best in the programs. The lectures could be improved to cover more materials required to complete the assignments as well as super important in any AI course (for example, Markov Chain); I have spent considerable amount of time learning concepts from outside source (online academic source, somewhat ironically) to complete assignments. This truly feels like a GT graduate level course where the expectation from students is a bit high. After completing this course I think I can better understand the AI zeitgeist and actually comprehend the technical discussion around AI.  Similar to what a number of other posts have covered. But I would like to comment particularly on the use of Bonnie grading vs. unit tests. In numerous cases, the unit tests provided in the assignment passed only then to find that the same code failed on Bonnie. \n\nSo if you assumed you were good because supplied unit tests passed that would be a dangerous assumption, especially as you get toward the assignment submit date. What then makes matters worse is that when Bonnie fails a test the feedback is virtually useless in terms of knowing what is wrong. This is not to say that students should write additional unit tests - what I'm saying is that the unit tests provided in the assignment were dangerous in that they generated a false sense of confidence. \n\nSo overall a course that covers a lot of interesting content but as others have said there was too many topics covered in the course and it could be split into smaller courses. This would provide the ability for students to learn the material more thoroughly. \n\nThe TA support was mediocre. I realize that TA's have their own projects which take their time but when a student takes time to ask a well thought out question, replies from TA's like 'yes' and 'no' don't really cut it. That is if the overriding goal of OMSCS is to spread learning and knowledge about all these new topics.\n\n\n One of the best classes I've taken so far! The projects were interesting and helped me understand a certain topic very well. The exams were hard but thorough and covered a lot of topics. I really liked the pace of the class and the lectures and textbook were both very good. Wow, what a first class to begin the program with!  There was so much work to be done, and with a full-time job, it was pretty crazy getting the time to do everything.  However, even without an undergraduate degree in programming, I was able to power through the course and get a B.  It isn't impossible, but it isn't easy.  The ideas make sense, it's just putting them together that takes a while.  Also, having had no prior exposure to Bayesian statistics really hurt me.  If at all possible, I'd recommend you study that topic up pretty good before taking since it represents a major cornerstone of the course (and it isn't immediately intuitive).\nJust for those who don't know the difference between AI and Machine Learning (that was me!), Artificial Intelligence is not making computers that think for themselves.  It is much more focused on finding clever hacks to make a computer work faster and more efficiently to arrive at a difficult (to compute, but obvious to humans) answer.  I later realized what I wanted was more under the umbrella of machine learning or reinforcement learning, but alas!  It was still a good class even though it wasn't exactly what I wanted. This course is not for the faint of heart. But it is a very interesting and fun course. Focuses in general on breadth, you will get exposed to the entire AI space. And focuses on depth in the topics of the assignments. \nThe assignments are very hard and take lots of time, and require very good knowledge of Python. But very rewarding. \n2 take home exams that are also very hard. \nThe lectures are shallow though as they try to cover so much, you'll need to do the recommended readings otherwise you will struggle with the assignments and the exams. One of the best courses out there. Loads of learning and very helpful connect. Having good idea about python and ml basics will help a lot. This is a pretty hardcore course with 6 projects (one project can be dropped, only 5 projects count towards grading). Projects are coding based, in python. One of the things I liked the most is Bonnie (autograder) for projects which will make life easier. There are two exams which are week long, open book and takes almost the entire week. The cutoff for grade is curved and for A it was nearly 90%. I'll give a different point of view from most reviews - this could be useful if your background is similar to mine: when I took the class I had already taken: CCA, CV, ML4T, ML, RL - so I had a solid knowledge of python, probability and statistics, and ML. \n\nWe had two weeks to complete most of the assignments. I managed to complete each of them in 3-5 days max (8-12 hours). Notice however I always started working around 5 days after each assignment was posted. In that way, I avoided wasting time with bugs or asking for clarifications on the instructions. It's a good idea to find that sweet spot: not too early, not too late. \n\nSome topics were review for me (Bayes Nets, Decision Trees, SA and EM from ML; HMMs, VI, PI, min-max from RL; Kalman filters from CV). But I got out a lot from the class regardless - for example I got to implement some algorithms which I \"stole\" when I took ML. The projects I enjoyed the most were the Game Playing Agent, and Tri-directional search. \n\nI liked the exams and their \"open book\" format, I think they successfully covered important material, and conducted me to learn and reinforce the theory. \n\nAs others have mentioned, there were some (sometimes many) kinks and bugs in assignments and exams, but instructors were fair with respect to that (we got an extension due to some unclear instruction for some assignment, and we also got free bonus points for a couple of ambiguous exam questions). \n\nI only wish I had taken this class before other classes like ML, RL, but I guess then it would have taken me like 1. 5x the time. However, a nice survey course and I enjoyed it a lot. This class is no joke. I had to rearrange my life to have enough time for assignments. You actually program the AI projects that you learn about in lectures. Note that my Python (and especially numpy) skills are at best average, although my statistics skills are good. Fellow students were very helpful on Piazza. Don't forget about Slack, too.\n\nAssignments: Some of the assignments require really strong math skills, most require a decent understanding of probability theory, and all require good Python scripting skills, including numpy.  There were 6 assignments in the Fall 2017 class; you get to drop the lowest grade. The assignments are auto-graded and you get multiple (from 5 to unlimited) attempts to submit the assignment and you know your grade for that assignment immediately. I really liked that. \nExams: take-home exams that take 10-20 hours to work through. Exams actually promote learning the material that wasn't part of the homework, so I liked that about them. Make sure to ask instructors any and all questions you might have. Don't try to get what the question is getting at, or you'll lose all the points for the question. \nGrading: The class is graded on a curve (median and above is A, one stdev below median is a B) but note that the median for most assignments was 100% (midterm and final were much lower, around 75%). For the online section, A ended up being about 87%, and a B was about 74% . Don't bypass extra credit questions if you have the time to complete them (some are very time consuming and others aren't). As the class progresses, you might not be able to complete an assignment, so extra credit on an assignment might be the difference between A and B, or even passing and failing. \n\nOverall, this was a great class, one of my favorites in the program, along with KBAI. If you actually have the prerequisites outlined, you'll spend much less time on it than I have and probably enjoy it.  This course requires a lot of commitment, the assignments require additional investigation and strong knowledge of Python plus Numpy and Scipy. \n\nPersonally I did not know a lot of Numpy starting the course and was forced to learned as the course progressed, had I known it beforehand the assignments would have been less complicated. \n\nThis is my first course on the program so I cannot compare with other courses in the program, but I had to dedicate a lot of time to this one. \n\nDefinitely get the recommended book... either buy it (you will not regret it as it is a great book) or get the online version. There is a lot of reading based on the book. \n\nThere had been a few bugs in videos and assignments, which I expect to be fixed in the next iterations of the course. \n\nEven with this small issues I have really enjoyed this course. This course is very rewarding, given that you put in the time and effort. I made the mistake of taking this along with one other class, but even then it only got a little overwhelming toward the end of the semester. Before this course I would recommend knowing a little bit of Python, and review your statistics -- probabilities, basic distributions, and Bayes' Rule are all very important throughout the course. \n\nThe one problem I had was with Bonnie, the homework grading system. It seemed like the system wasn't set up and tested well enough before the assignments began coming in, but this seems like more of a \"growing pain\" than an inherent problem. I took this is one of my first classes in this program. While I wasn't prepared for how difficult it was, I managed to do well. The tests and programming assignments are very difficult and will require a lot of time. You will need to know and use a good amount of math as well. The material was very interesting, and overall worth the difficulty. I've taken KBAI, AI for Robotics and ML (among others). I think these three combined will give you some solid understanding in AI/ML algorithms. A great difference from ML is that ML focuses more on bench-marking/ comparing different algorithms, but AI is the opposite, asks you to create algorithm from scratch. A lot of mysteries in ML for me are answered in this class. I tend to disagree with other people about the assignments though... I don't think they are that difficult if you some background in statistics, I finished many of the assignments in 2~3 days, I wouldn't say that's ideal though. \n\nOverall a really great course to survey many of the AI topics, sometimes it felt to me they are rushing through the topics. I do wish them to separate these into two-semester long course so we could go deeper in some of the topics or maybe open a follow-up advanced level course though. \n\nThe piazza is really active, almost too active that I could barely follow, but I guess that's always good.  Great course with interesting projects. The material is relevant and it covers a lot. I think that if I were to take this course I wouldn't do so unless I had studied a decent amount of the material ahead of time as you will be pressed with both knowing the material and demonstrating that knowledge in python. It could be overwhelming for some as you will be pressed for time. The only real negative in the course is Bonnie the autograder. Recommended Interesting subject and nice review of content in-terms of video lectures. Assignments are interesting and exams are ideal.  It is good survey course. I did not found assignment very time consuming but mainly because I have taken ML course before and I am proficient in python (pydata stack). I would recommend taking ML and getting a bit of python exposure in advance (you can do one of ML assignment in Python for that). I liked Thad's approach to designing assignment and exams, particularly the aspect that assignment start with topics covered in lectures but then gradually goes beyond so that you have to research more advanced topic. However, I found videos to be little less engaging compared to ML and can be improved.  Good survey of several types of algorithms and concepts used in AI such as game playing, graph search, Bayesian networks, Markov models, and some machine learning. I don't have a CS undergrad so I was probably slower than the average student in terms of figuring out the assignments. The class needs to get a little better organized in terms of the quizzes (provided to on campus students in class, online students via Piazza). The quizzes were very helpful as study aids for the exams, but when combined with the lectures, readings, and assignments I sometimes felt overwhelmed by the amount of material. I learned a lot though, so it was worth the effort. They use an autograder system called Bonnie. I like Bonnie because it gives students feedback on their progress, so when you send in your final submission you should know what score you're going to get. All code is written in Python. Like many others, I have mixed feelings about this class. This is a dense course that covers almost the entire AI book. It moves very fast with every two weeks. The first 2-3 projects being the hardest of the bunch.\n\nEvery week you are expected to read chapters out of the book. If you don't, boy are you in for a fun time with the midterm and final.\n\nMidterm and Final are take home exams and are given a week to complete them. I spent at least 20 hours on each one. If you work full time, expect your entire night and most of the weekend that week to be spent working on the exam.\nWhile I loathed the exams, I learned a lot from them. They cover all of the topics you read through, unfortunately you have to learn as you go. They release challenge questions throughout the semester that were previous exam questions. These _somewhat_ help, but are not really the full cigar in terms of adequately preparing you for the exam. If you kept up on the readings, you'll at least know where to look to find the relevant topic.\n\nDr. Starner is not very present in this class outside of the lectures. He hosted office hours before each exam and that was it. He rarely posted on Piazza. Some TAs were better than others, but they were overall okay.\n\nI don't recommend taking this class as your first course. Come in understanding python and numpy. A good understanding of probability will also help and will make Bayes Nets much easier. I spent a long time figuring it out but am still weak on Probability Theory. \n\nI also recommend _not_ pairing this course with any others. Each week is pretty demanding and you'll really want to spend time understanding the topics and not feeling rushed with the projects.\n\n\nAll in all I am walking away from this class with a much better, and deeper understanding of AI topics.  Videos and syllabus were the highest quality of any class in OMSCS. Assignment workload was double what I think it should have been and at some point you run out of time to truly understand the underlying material and just grind it out on the assignments. I'd suggest testing on the reading more and less on outright coding. Wow! This class is rough. It is written up as a survey class in AI but I'd say some of the work is probably harder than alot of specialized classes in specific subjects similar. I went in knowing little about AI and came out knowing a bunch of algorithms but not to much on how to put it all together.\n\nThe videos: well done and think it was smart to use others lectures when appropriate to explain concepts. Sometimes someone else explained it quite good, why reinvent the wheel and like this design in the lectures. However, especially when Thad was teaching, there were somewhat of a very light explanation of really complicated subject matter not well explained. Thad is clearly very intelligent and sometimes takes for granted the intelligence or former knowledge of his audience.\n\nThe book: You are expected to read this whole gargantuan book. It is dense and really really hard to follow. The algorithms given in book are in most cases better explained elsewhere, for example in the authors own videos. I learned multiple concepts better by watching videos elsewhere then I ever did this book. My eyes glazed over when I looked at it many times and found watching youtube videos on concepts way more productive.\n\nThe projects: Time consuming and difficult. All the projects came with unit test which many times did a horrible job of actually testing your code. This also led you in a false sense of security especially when Bonnie submissions were limited. Bonnie submissions on some projects were unlimited but limited on others. Also, the feedback from Bonnie was usually unhelpful. Many times you were being forced to write a complicated algorithm from scratch even though the algorithm existed elsewhere. You would write it and it would seem to work with the crappy unit test you had. However, Bonnie wouldn't like it and you would be stuck with WHAT THE HELL IS WRONG HERE? You would spin your wheels for hours and hours trying to find a bug with no idea what was wrong. Again, you are implementing an algorithm you didn't write and purely in math form that was really complicated. If your are unfamiliar with the math symbols, etc, it could get you. And so you would have 8 lines of code where there was a bug but sometimes you just couldn't figure it out. Now here is the other problem. For some reason there were a number of people who did really well on the projects. So, he grades based on median being an A and 1 stddev being a B. However, the median would most times end up being a 100%. So, good luck with that. Note, the median is done at the end of class so the test bring down the medians to a nicer range, but it can be quite frustrating to learn that your 95% or 90% on a project is a B. Dropping the last one is also done in the median calculation so it actually makes the standard deviation get smaller.\n\nThe test: Ridiculous. You are given a week and are take home. They are so much calculation and so easy to make a simple calculation error. The midterm took me around 40 hours and the final around 60 hours. I took three days off work for the final otherwise I wouldn't have been able to complete. It is really dumb too, cause it doesn't test ones ability to understand the concept but rather one's ability to do the math by hand. I ended up purchasing a scientific calculator as you have to have it to do the math. The other dumb thing is the test is open book but the internet is off limits. This means you can't use easier to follow explanations of an algorithm on spots like Wikipedia you had to use the confusing books explanations. This is another reason you had to use a calculator alot to do things like log10(x**(y/t)). And you would lose half credit for rounding incorrectly to the 6 decimal point. Test became about doing complicated calculations rather than understanding concepts and I found to be the most useless part of this class. Note, I got B's on the midterm and final median was 78.65% and 67.8%. \n\nThe TAs: Overall pretty helpful but many times refused to help on certain things I believe as ordered by the Prof. Also, no help during test and had a now work on weekend policy which was super annoying since everything was due on Sunday. Never seen that rule before.\n\nOverall, the class is educational but don't think I could carry it into a good understanding of how to use AI in the world. I wish there was less focus on the math and more on the ideas which is what I thought a survey class would do. Maybe I should have taken ML which is I think more about the ideas and what they mean. I spend way more hours on this class then in any other I have taken previously yet my grade doesn't reflect that. So, take the class but know what you are in for. Be prepared to make sure your job isn't going to have any overnight emergencies or anything. There were many who didn't struggle as much as I did so ymmv but and I did go in very green. However, I have gone into other classes green and didn't struggle like I did in this one.\n\n First of all, I don't think this AI course is a prerequisite to KBAI. I'm fairly certain you'll survive KBAI w/o taking CS6601. \n\nMany people on this site rated the difficulty as at least \"Hard\". Quite frankly for people like me who have ML background, this is probably an easy one. There was nothing I couldn't understand in the lectures. The cutoff of \"A\" grade is >=78% (Summer 2017). This means so long as you got a full mark (not quite hard to achieve) in every assignment (accounts for 60% in Summer 2017) and don't bomb the midterm or final (accounts for 20% each), you're good. \nThe lectures will get you intrigued about major AI topics, but certainly won't make you some AI juggernaut. What on earth is AI anyway?\nOccasionally, you need to write your own unit test for the assignments. The XYZ_test. py files they provide weren't perfect - let's put it this way. \nTAs are trying their best to be helpful with their delightful sense of humor. In most cases I waited for 24-48 hours before a TA addresses a question I posted on Piazza. There were complaints about absence of TAs, so I'd suggest them hold daily mentoring sessions instead of just 3 times a week for summer terms (perhaps less frequent for spring/fall since it's less intense). People got frustrated by unclear expressions in the assignments and exams. \nUnlike other courses I've taken, the instructor was almost absent on Slack or Piazza. I have no idea why - probably he was on summer vacation and handed everything to TAs... This is a great overview of AI. The lectures do a great job of presenting the material with quizzes to reenforce your understanding. A few of the sections use videos from the older intro to AI course but I think those will be updated. This was the first course I've taken that actually felt like a graduate level course. There is a lot of reading (almost the entire book) however the exams are open book/notes.  As much as I learned in this course, I didn't enjoy it because it was just far too stressful and time consuming. Considering I took it in the summer, I highly recommend students save this course for the fall or spring, and take it as their only class. The main challenge in the assignments is that you can get stuck on one part for hours on end not getting anywhere, and that can continue to happen throughout the rest of the assignment! This was my first class in OMSCS and I thought it was fantastic.  It provided an overview of AI concepts and techniques that I found challenging and rewarding.  The TAs and professors were very engaged, responsive, and helpful.  I initially put in way more than 20 hours/week during the first assignment until I figured out how to get help from the TAs using Piazza.  Using Piazza and the student Slack channel made my life much easier.  The material was still very challenging but getting to the resources I needed to solve the problems was much more efficient. This course had 6 assignments in total. 1 midterm and 1 take home exam (for 1 week). I can tell every assignment was challenging and required a significant amount of effort to complete. In many of the assignment you will need to deal with some python subtleties like vectorizing your operations on images using numpy (this can take some time to grasp). This class also requires probabilities but some lectures are completed dedicated to introduce you to what you need. This class had very high quality and great professors like Thad Starner, Peter Norvig and Sebastian Thrun. The textbook is a great book. I learned a lot in this class. I hadn't taken any AI class before and still managed to get good grades but I had to put many hours. \n\nThe TAs and professor were very responsive.  Great course and very similar to my undergrad AI course. All assignments are graded via Bonnie (which I really liked) - instant feedback and easy to use. Exams were fair and open book. Overall great survey of the field and recommend!  This course was fabulously interesting. The assignments are well-designed to force you to implement some important algorithms. The exams were take-home and open-book, which allows you to use the exam as a way to learn additional material you would not have otherwise. (You'll notice other reviewers think this is a bad thing, but I think it's actually a positive that we get to learn things during the exam.) The pace of the six projects and two exams allow for no breathing.\n\nI mostly did not read the textbook and instead relied on the lectures. Many students complained the lectures were high-level, but I appreciated this since they focused on conceptual understanding. There are many online links to get more detailed information for completing assignments.\n\nI found the TA answers to questions mostly unhelpful. Everything you need to complete assignments ultimately comes up on Slack or Piazza though.\n\nI would highly recommend taking this class though I am glad I didn't pair it with another. Great class overall. I got behind and had to focus just on the HW instead of the readings/learning\n\nTAs were fair and quick a responding. NOTE the projects change somewhat frequently :/ Here's the thing about this class: the class is curved, so that's good. Less good is that the median for the homework is often a 100 or close to it. That is because you CAN reach a hundred, but for the first few assignments you have to work for 2 weeks straight and be smart. For the second half of the assignment, it can be done more easily by working 2 weeks straight without the smart part.\n\nYour fellow classmates will reach a 100 in the assignments and drive the median up, so that means you have to as well. Then, since everyone presumably got full credit for the homework, it means the grade is based on the two exams, which are RIDICULOUS. You think you're good reviewing the lectures and book? NOPE. In both exams, there was new information entirely! There were wikipedia links to start learning mathematical concepts MID EXAM. Even if it was briefly covered in the lecture/book, it will be there on the exam. If the lecturer says \"We won't get into this too much but here is a brief explanation\" - don't worry, the exam will get into it in depth! You will get a chance to learn that material mid exam, which last for a week. Yay. The assignments and exams are really well-designed. The format this semester is exactly the same as previous years. The professor does hold youtube live sessions for two midterm exams, which you don't often see in OMSCS. The exams are updated every year and you can actually tell it is constantly improving.\n\nIt is important to try your best to get the extra credits, some of them are actually easier than you think. I got most assignments full grades, plus 70% of the extra credit, but bombed two exams---both are >10 points lower than the median---yet I still got an A. It can be said that the extra credits saved my ass.\n\nContent-wise, the course is basically a survey of some basic AI and ML algorithms, you may actually have heard of implemented some of them in other classes, but still, it gives you an wholistic view of what's in your toolbox, and sometimes they framed it in a way that uses different algorithms to solve the same problem. So it's very useful for anyone who wants to work on AI/ML in the future. Along with ML this has been one of my favourite classes. The TAs and Professor are extremely helpful, the material is difficult, but not overwhelmingly so (there is some expectation that you will seek external resources or spend a lot of time reading the textbook, as lectures videos by themselves are probably too shallow to complete assignments). I felt the midsem was fair assessment of your knowledge. \n\nAs for the assignment, there is a level of satisfaction with \"getting to the end\". This doesn't mean that I'll score 100%, but merely finishing is an achievement in itself. Others in Piazza have noted that the marks gained in each segment of the assignments are not weighed with the amount of time used solving them - I believe this is correct and to be honest I'm totally fine with that. \n\nI think anyone taking this course will learn alot and is well worthwhile. \n\nTop tips:\n\n* Review AI topics beforehand (use google to find the syllabus)\n* Knowledge of Numpy/Python would help\n* Taking ML first would naturally make the ML portions easier... \n\nI don't think there's really any course that I would say should be done as a prerequisite for the AI course, and would work fine as a first course.  This course was very difficult, took a ton of time and was very stressful at times. That being said, I'd take another class like it in a heart-beat! Thad's level of interaction with the class on piazza and in the office hours really made you feel like he cared about your understanding.  This class was one of the most difficult classes I have taken in the program but found it to be one of the most rewarding. It covers a wide variety of topics in great depth so be prepared to put in the time. As others have mentioned, there are 6 assignments (highest 5 count towards your final grade) and 2 take-home exams. Do not underestimate the exams because they are take home - they are no joke. If you fall behind on the readings, the exams will take you some time. I think I spent around 60 hours on the midterm. I felt the exams were a great mechanism for learning the material however. Overall, this class was amazing and one of my favorites. I highly recommend this course! This was an excellent class, but incredibly hard class.  There is a ton of material that's covered and you're expected to know a lot by the end.  There are two exams and six assignments, but you only use your top five assignment scores.  With the pace of the class, you'll be constantly working on something.  By the end of the class I was completely burned out, but I felt like a learned a ton. This course was fun but I really didn't learn much other than how to try enough solutions to get an answer. The exams for this class are a complete joke because it's basically just the TAs getting together to figure out gotcha questions. Each exam question is an extreme deep dive into one of the many subjects this course covers then modifying one small feature of the subject and asking vague questions about it that you must infer a lot of what the TA was thinking when they wrote it. They also give you a week to complete the exam so there's no real studying for it and you should expect to spend 10-15 hours on it. The assignments are fun but don't relate to each other so you will learn a lot about the subject then completely erase your memory for the next subject. I enjoyed this class but the exams didn't really test anything other than how good you are at guessing. The professors doing the lectures are really smart though so the videos are pretty entertaining. Background: No prior experience with AI/ML but had a little idea about what things are\n\nI found the course very useful. The textbook used was \"Artificial Intelligence: A modern approach, 3rd edition\". The course covers almost the entire textbook. This is a great course that gives an overview of all AI/ML techniques. Even though it covers such a wide breadth of topics, the course does fair amount of justice to them. All the topics are covered in a depth that you can get a fairly good idea about the topics. The knowledge you will gain in this course will not be shallow as is usually feared from courses that have a very wide course. \n\nIn terms of difficulty, I found the course to be fairly difficult. That is also given the fact that I did not have prior AI/ML experience. The assignments make us code various AI/ML algos from scratch with helps in a deeper understanding. Assignments will take time if your situation is like I had. Assignments are in python and good understanding of numpy can help. \n\nExams are open book and pretty tough but fun nonetheless. \n\nTA interactions are great. In my time we had at least 2 great TAs who were always active on slack. You might find lectures a bit too shallow but textbook and additional readings make up for that. \n\nIMO this course is a must if you dont have a prior AI/ML experience and want to pursue ML specialization. Overall, this is a quick tour of AI topics. You'll cover game playing, search, machine learning, pattern recognition, and a few other topics. The assignments are intense but overall manageable if you start early and use the resources available (I found the slack community the most helpful followed by piazza). The exams are rough. This semester we were given a week to complete a take home exam for the midterm and final. The exams are more open-ended than the assignments and require a lot of time. I think a few things could help students prior to taking the class:\n\n1. Be comfortable with python and numpy\n2. Take a course or two covering related topics prior to this course (ML4T, AI4R, DVA, ML, etc)\n3. Start everything early and ask questions.\n4. Complete any extra credit you can\n\nI felt like this class was definitely worth it for those interested in ML/AI and is probably better earlier in the program. If you have the time and interest, I would recommend giving it a try! Awesome class. Some highlights:\n\n* Both very hard and and very time consuming\n* the lessons introduce the concepts, the reading fills in the gaps, and the projects and exams are where the reinforcement learning really takes place\n* Do ALL the reading. Try your best to do the readings and lessons before beginning the projects\n* Python experience -- if you don't have it, get some in advance. Anyone familiar with Java or C/C++ should be able to work comfortably in Python. If you have time, get familiar with numpy\n* Brush up on linear algebra, logarithmic math, and Big O notation\n\nTA's were very engaged. Professor Thad had a busy travel schedule this semester, but his passion for the topics came through in the office hours and times he participated on Piazza. \n\nTwo cons:\n\n* the projects come out as a \"work in progress/beta\" -- if you start early, prepare to be frustrated with moving targets, bugs, and changes along the way. If you wait until the \"official release\" expect many sleepless nights to finish the work on time\n\n* it was announced at the beginning that grading would be based on class median -- anyone above the median would get an A. This led to a significant amount of churn over grades in Piazza and Slack and a funny \"if I help you I might hurt myself\" dynamic which prevented collaborative learning. In the end, an overall grade of 69 and above was a B, 85+ an A. Grading was fair, students need to chill. I got my A by pure brute force, but I learned a lot in the process. This class is great because it's a lot of programming. I appreciated the exposure to Numpy. \n\nThis course would be best to take not as a first course, but it's high-level enough that I wouldn't push it off until the end either. \n\nDon't let the first assignment scare you away. I bombed it, but still did fine. \n\nI wish I had a better foundation in probability concepts before taking this course. I had to learn a lot along the way, and I still am uncertain about that area in particular. \n\nThe lectures were meh. The exams did a good job of convincing me that I have no idea what the hell I'm doing. The TAs did a great job.  I'll echo most of the other reviewers in saying that this is an exceedingly challenging course. The first two projects are significantly harder than the others so if you can make it through those you should be good for the remainder. I had taken ML4T and AI4R before this class and those two definitely helped me prepare for the python/numpy needed. At minimum, I would recommend taking ML4T before this.\n\nMy biggest gripe with the course is the exams. They would make excellent homework problems distributed throughout the semester instead of the ~50-page behemoths we were given. The problems were actually really great in terms of fostering learning outside of the projects, but that value greatly is diminished when you're on a 1-week deadline and are restricted in terms of the materials available to you. I did great on the midterm but by the time the final came around, I was already exhausted by the class and it clearly showed in my grade. I took this course during the during my second semester in the program along with CS 6035 IIS. My previous courses were CS 6250 CN and CS 6340 SAT. I had learned the basics of Python in CN but I had not used numpy at all before this course. Additionally, I completed a computer engineering undergraduate degree in 2014 as my only other exposure to computer science before this program. This information is all to compare to your own circumstances.\n\nOverall, this course was by far my favorite while also being the most difficult and most work thus far. Some projects took 10 hours while others took up to 50 hours due to my background. The projects are very diverse so if you've never seen some of these topics until this course, then your learning curve will be longer for each project like mine. The majority of the projects had extra credit that rewards those who know their coding and material. I highly recommend scoring as many points as possible on the projects as the midterm and finals are intense.\n\nBoth exams are take-home exams that are 35-45 pages each with a full week to complete. I spent 40-50 hours on them to achieve a level above the median to make up for my lackluster performance on a project. These exams will thoroughly test your knowledge of each part of the course, which I prefer as you can't fake your knowledge. You are only allowed the class resources and book for these exams. No INTERNET, collaboration and so forth is allowed. The book is a must due to the complexity of the concepts and use for projects and exams.\n\nI highly recommend this course if you have never taken an AI course before as you will learn a ton. However, honestly gauge your knowledge and skills beforehand to see how much of your life you will have to give to be able to succeed. After taking two courses as a full-time student, I do not recommend another course at the same time if you work full-time unless you have expertise in python, numpy, and AI concepts. This is a great course for learning many of the concepts related to AI. However, I won't recommend taking this as a first course. This was my last course in the program having taken: CCA, ML, RL, CV, AI4R, DVA. Maybe this will be helpful for someone with a similar program track. I thought this course was not hard even though it was offered in the summer for the first time. \n\nThe lectures and reading material are not difficult to comprehend. I found the readings easy to understand due to how the amazing job the writers did. I made an effort to read all suggested chapters after watching the lectures. This will definitely help you to succeed in both the assignments and the exam. \n\nAssignments: Start early studying the requirements for these. Identify which part of the material you will need to solve them. However, don't start coding right away, the instructors were still making some modifications after the release date. Always prioritize coding efficiently. All assignments can be completed with runtimes less than 30 seconds. This will help you perform tests and modify your code faster. If your code is taking longer than that go back and try to find where it can be improved. \n\nExams: There were a midterm and a final both take home exams. Make sure you are caught up with the material (or at least most of it) before taking them. The questions are not hard and instructors were always there to clarify any possible ambiguity. They were also lenient with some questions when several students had a different interpretation of the problem statements. NOTE: Submit your pdf with what you did to get to the answer. They will give you partial credit if you got the answer wrong but your thought process was correct. \n\nStaff: In my opinion, the TAs did great. In spite of being the first summer offer, they handled the challenge well and were able to solve most issues. There were some problems with the final grading but my impression is that they eventually got resolved. \n\nI managed to get a 96% before the curve. They use the median to determine your letter grade: A = if you are above min(90%, median(final grades)). I am a professional software developer who had never taken a course like AI so almost all of the concepts were new. I had never coded in Python before this class that by the first two weeks, you better be ready to learn as you will already be coding and completing and application in that period of time. Aside the challenge, which I knew it would be, the course lectures were incredibly engaging and the assignments were incredibly tough and engaging. You will know in the first two-three weeks whether you will enjoy the challenge or be defeated by it; however, I will say that if you stick the course, it will be very rewarding. \n\nMy lessons learned and advice is to complete the lectures right away to let the concepts sink in and start the assignments early. You will not be able to do the assignment the night before (trust me, I tried and got burned once). Also, give a good amount of attention and time to the midterm and final. I failed to think the midterm would be as long as the assignments as I was wrong. Many of the polls stated people spent well over 20 hours on the midterm. Also, be sure to understand the grading structure as I completely missed the ball on that. For my semester, it was a curve where everyone above the mean got an A and the professor separated the class on two curves for on campus vs online (which was a point of contention for most but was explained with good reason as on campus had additional time & resources and the means were statistically different to show for it. )\n\nBest of luck in the class and hope you stick through the pain and relish in the accomplishment when you are done. 6 solo projects, highest 5 are 60% of grade (lowest doesn't count at all).  Midterm and final are 20% apiece.  Median and above Get an A, median to 1 stdev below B.\n\nUnless you've got a 100 on five projects, don't think that you can skip one.  The math won't work in your favor and more than a few students realized this too late.\n\nFinal stats for Spring '18 were not released, but looks like B range was 72+ and A range was 87+.\n\nProjects are frontloaded, with Adverserial Search (Minimax/AB Pruning/Iterative Deepening) and Search (A*, UCS, bi/tridirectional) being the hardest and most time consuming.  If they use the same style projects and you can make it through the first two you'll be fine.\n\nMidterm was tough and the final was a whole different beast.  Both were long take homes and open \"any course materials\" (nothing else allowed).  However clarifications on questions came throughout the week the assignment was open.  My big suggestion here is to take a stab early, then the weekend before the exam is due redo the exam with the clarifications, and figure out why any answers are different.\n\nYou don't need to be a python guru to do well in the class, but you should be comfortable programming in it.  I'd brush up on your statistics and matrix math as well (or at least be able to decode matrix math equations). This was a great course in which you could learn a lot. Of course, it is a little bit difficult, but you would have so much fun in the class and solving the assignment and you would learn so much that it is totally worth it. Professor Starner was fairly involved in the class and answering students questions which made the class more lovely and desirable. The assignments were well designed and TAs are really responsive and wanting to help My first class in the program and I love it. I took this with SDP as my first two courses during my first semester. Thad and the TAs were excellent in every way. They created challenging but rewarding projects and were very responsive to questions on Piazza. I would recommend taking this with a less difficult class as the projects and material are very time consuming and complex. Also, I had never used Python before, but the class would have been much easier if I had. An excellent introductary course to the field of AI. \nProf. Starner and all the TAs are a bunch of extremely passionate & dedicated group of people not only about the subject matter but to teach it. It's not like they demonstrated this passion once in a while but I've noticed the trend consistently through out the term; they've gone out of the way to explain things be-it assignments that each TA handled or holding office hours, answering questions on piazza etc. Not once did I feel a disconnect from the class. One thing that impressed me the most was Thad spending 2. 5 hrs giving a walk through of midterm; something that we don't see too often by any Prof of that class & calibre (such things are generally dealt by the TAs). Almost all the TA's were highly motivated, fun to work with on assignments & were highly responsive on piazza (sometimes even on holidays) & the best part was they are all humble enough to learn from any occasional mistakes that happened in setting up assignments or questions in the exams. \nThe course is pretty loaded (especially if you are working fulltime). There are 6 assignments, 1 midterm & 1 final exam. The assigments were all challenging covering various areas of AI. This is my 4th course & clearly I've spent the most number of sleepless nights(almost) during this term :)\nBoth the midterm & the finals are open book format & we had a full week to submit. This meant the questions were pretty open ended & challenging. Found this format of exam very benefitial. Gives you an opportunity to review the material well before answering. For once, it felt like it was testing what you know and not the 2-3 closed book formats which was testing more of what we don't know/remember. \n\nOverall, I'll recommend the class highly if you wish to explore & know more of what AI, ML etc is all about... One of, if not the hardest class in the program. Assignments are a lot of fun, but require fairly advanced python skills to go the extra mile. Exams are take home, but are extremely hard and time consuming. You are only given a week to complete and they are given concurrently with assignments. \n\nTLDR: very fun class, but come prepared and don't take it lightly. One of the most difficult courses in the degree but also one of the most useful.  It teaches you the advanced concepts of AI ,and be able to apply them. To be able to succeed in this course ,you need to have a good foundation on probability theory and advanced programming skills in python,otherwise,you may struggle alot to keep up with the  class. I personally was weak with probability concepts ,so had to struggle a lot.  Also keep in mind that some  the course  structure may change every semester as the professor considers each semester of AI as a research opportunity by trying out different things to see what works and what doesn't.  One of the hardest, challenging, and time consuming classes I have ever taken and I loved every minute of it.  The course is focused more on projects than theory which I prefer.   The six projects are fascinating and well worth the effort.  The exams are not proctored and you are given a full week to complete them.  They are both hard and extremely educational.  I learned more from these exams than I have ever learned from an exam in the past.  The lectures are excellent and taught by true experts.  Some TA's were difficult to understand when explaining projects, but this was a minor issue to me.  I think I disliked ALMOST everything about this course. The lectures were very understandable (too understandable) but kind of long (for the content), the book is just ok - often a savior though, the quizzes sometimes are unexplainably difficult considering the lectures they are attached to, and the assignments are just something else. \n\nIn very short, my main complaint is the amount of material crammed into this course. This course could have easily been broken into at least 2 parts, one probabilistic (Bayes nets, decision trees, others) and one deterministic (A*, constraint programming, adversarial search etc). Unfortunately, with everything thrown in, some stuff will suffer (and is unfortunate, most of the stuff is worth studying more carefully). \n\nA second complaint would be about the lectures. I had a hard time taking them seriously, most of the time prof. Starner and assistants try to paint a relaxed and jokey/fun atmosphere, in some sort of popularity contest style. Laudable try, but unfortunately it made the lectures lack the rigor they needed, which proved a problem for assignments. It was impossible (IMO) to approach any assignment with the lectures only, which presented a problem in itself - if one puts 3-4h/week in lectures, just to have to read another 3h from the AI book, that makes the lectures kind of useless. And one needs all the time possible for assignments. \n\nDon't want to insist too much, but various other things added to frustration: fighting Bonnie (with its arcane errors) for assignments, fighting with TAs about solutions for mid/end term exams, the grading on the curve (\"is it enough a 90% to get an A, when most assignments have 100% as median???\"), opening the course with \"adversarial search\" instead of with actual \"search algos\", and many other small issues. \n\nMaybe I'm too biased already, I would recommend people buy the AI book and study it at their own pace. A lot cheaper and a lot less frustrating.  Quote: this course is a survey of algorithmic hacks to NP-hard problems. In reality, it was interesting to learn about present-state AI research from prof. Starner and his work in Sign Language recognition, wearable computing, and Dolphin communication. This course was the initial offering of 6601 for the OMSCS program. The professor and the TAs input an enormous amount of effort to pull off this course - my thanks to them. As a note of context, this course was advertised to be offered in Spring '16 and then cancelled late Fall '15 and then surprisingly re-released at the 11th hour. \n\nAs the course advertises in its description, it is intended for those who have some background in AI or are ready to jump into the deep end (true statement) The description asks for 9 hrs per week and it should be modified to reflect the true effort required in this class. Most students, including myself, input 20+ hours per week to stay afloat. Most of the time you spend will be on solving an assignment and researching. It's very easy to forget that you have to watch the lectures as well! \n\nThe professor's assignment methodology was to introduce a concept through lecture, then complete some 'warm-up' problems in the beginning of each assignment to develop intuition. At the end of the warm-up, you solve more difficult problems by implementing solutions that had not been explicitly covered in class. This was certainly the most rewarding and difficult part of the class!\n\nThere were several first-time hiccups in assignments and exams, however the TAs and the professor had open ears and minds and ultimately made it right and I'm sure that the next offering of this course will be even better. \n\nI learned an incredible amount about the material even though I felt overwhelmed during the majority of the course. This is certainly an opportunity to become familiar with the AI field with an intensive, hands-on experience from which you will benefit greatly.  I enjoyed the class a lot. It covers a lot of topics, backed by the ultimate Russell/Norvig AI book. The lectures are a combination of old videos by Norvig/Thrun and new content by Thad Starner and head TA Shelly Baghi. The quality of the new content is amazing, with subtle jokes and animations; the old ones are poorer. Along with the book and lectures there is additional material usually linked to from the week's overview or some assignments, or by other students on Piazza. You might also find more content online; I personally liked lectures from the AI class at UC Berkeley (http://ai. berkeley. edu/course_schedule. html). With practically everyone drawing from the same book, you'll keep running into the same examples over and over again but sometimes having it explained by another person just makes the idea click. \n\nThere were 6 assignments, with best 5 counting towards your grade (worst score is dropped). They require you to understand the algorithms in theory and be comfortable with Python. They usually consist of several parts, starting with basics and progressively diving deeper, offering bonus points for implementing advanced algorithms described in attached papers. The assignments were the best part of the course in terms of learning but at the same time could be very annoying when you're trying to find a bug in a complicated algorithm. It's just not the type of problem you can solve quickly on StackOverflow. \n\nMidterm and final exams starting with our semester were open book. They each took about 10 hours to complete and motivated you to consult the book/lectures to fully understand the topics before committing to an answer. \n\nOn average I spent about 10 hours per week on the class (counted by Toggl) but by no means it's an easy class. Unless you're a skilled programmer and used to watching lectures at 2x speed, you could easily end up needing twice as much.", 
    "CS-6750": "  The subject was fascinating and the lectures did a very good job of covering the materials. If you ever wanted to know about Human Computer Interaction or what makes good design then this is a good course. \n\nThe professor was very good about communicating via Piazza which was a huge plus. The Piazza for this course was the most active and interesting of the courses I've taken. Office hours via Slack weren't as successful but the professor was available and answered questions. \n\nThere are many assignments and they can each take a fair amount of time -- especially the final project. The projects aren't time sync's the way some software projects are but plan ahead or you'll find yourself spending a time at the last minute trying to get the work done. This is a great course but does require you stay current with the assignments and weekly readings. Be prepared to do lots of writing and designing. No coding.\n\nPros:\nHigh quality lectures\nConsistent writing weekly assignments\nGrading is more than fair\n\nCons:\nThere are a lot of weekly readings which are often very dry and easy to fall behind on. If you do then you\u2019ll regret it on the exams.\n\n A great class .. tells you a lot about the interfaces we deal with ... I think its a must class for anyone trying to go the entrepreneurial route of developing any mobile app .. you'll know a lot about what distinguishes a good interface from a bad one. Its a theoretical course, where you'd have to write a lot.\n\nInstructors are extremely responsive .. Effort from them is clearly visible ..\nThere are 10 assignments; each due Sunday of every week, 1 individual project (more like an assignment), and 1 group project ( which you'll do with 2 other people, and spans over a month).\nThere are 3 peer feedbacks required every week for previous weeks assignments of your classmates, which will count for yours participation grade. There is 10% participation grade. You'll have to gather participation tokens by filling out surveys from your classmates, which they'll post for their assignment and projects at piazza. A tip is that at the end of class, people share multiple tokens for their surveys (like i offered to share 6 tokens to get my group project filled in). \nThere are 2 Tests, each valued 15% of your grade. Include the course material you've completed uptil now , and the assigned readings. There are 30 questions in total (1 point each) and 1 extra credit question (10 points), so a total of 31 question. The extra credit question can bump your score to 85% only. which means, if your score is 75 - 84 % for 30 questions, the 31st question can bump it only to 85 % .. If you're beyond 85 already, extra credit question will not be considered. Very interesting course. There was no coding assignment. All about writing each week for 10 weeks and 2 test covering the topics and 2 projects as well. Great course! I highly recommend taking it. It will require writing a lot of papers, but you will learn a lot. This was an excellent course. \n\nThe lectures are more rapid than other courses I have taken, I found myself having to pause and rewind in order to capture information. However, the quality of the lectures is perhaps the best I have ever experienced in OMSCS. (The only thing that bothered me was one of the fonts used - a carbon copy of my former employers' corporate typeface that initially triggered some PTSD. ) The exams are open notes, so the quality of your own notes is very important if you want to do well on the exam. I still had to go back and watch lectures for a few questions, but having structured notes made it easy to quickly find that specific lecture. \n\nEach week had individual assignments which usually take 3-4 hours if you want to do a good job and earn an A. There are word limits, so leave no word unturned and revise, revise, revise to fit that word count! Taking notes for all the coursework can be really helpful in your written work because you will need to refer to the concepts you learn in the lectures. \n\nThere is an individual project that you can complete over time, or within a week if you dedicate a few hours a day to it - I did feel a bit rushed to complete it before the deadline. There's a team project, and of course, YMMV based on the strength of your team. Be ready to learn how to write surveys or perform interviews, which can be challenging if you are lacking in soft skills!\n\nOne of the more interesting experiences you'll have with Dr. Joyner is that this is very much an \"open standard\" (not necessarily \"open source\") course. When students post feedback about the course structure, or something that didn't work quite right, Dr. J is extremely forthright about how he might change or improve the course. Since user-centric design principles focus on receiving feedback to inform iteration and continuous improvement, it's no surprise he does the same for his courses. Liked the class a lot. Instructor is very good and the content is awesome. \n\nThe only thing I dislike about it is the assignments. Really, I think the assignments are graded by keyword and not whether or not you actually understood something. Example, in assignment M2, I think I tried to imply a concept demonstrated in the videos versus flat out mention it by name and I received a deduction for that. Assignments are also graded strictly with content from the videos meaning sometimes if a whole 20% of an assignment can come from 1-2 minutes of video lectures (screwed up in my opinion). If they can fix the assignments, the course would turn from good to awesome in my opinion. This is a very good class. Although it is a very easy class, the material is interesting. Dr. Joyner is an excellent professor and he is very engaged, so were all the TA's. The projects are actually really interesting. I wasn't a big fan of the group project. The assignments are easy, a lot of writing though. I would recommend this class if you are looking to get a good intro to HCI. This is a great class to take over the summer. First, let me say that this class is great.   You will learn a lot if you've never taken a course on HCI.  Dr. Joyner is very active, both on the slack channel and the Piazza forums.  He is very helpful and I will take other courses by him.  There is very little TA involvement though.  \n\nAbout the course:\nThere are 10 assignments that are basically reports.  They require around 1600 words per paper.  These are fine and will help you understand the material well.  They can get a bit boring after awhile though.\n\nThere are two projects.  The individual project isn't difficult at all and I felt it was just like another assignment.  The group project was a repeat of 5 of the assignments you had already done, but now in a group.  If you can choose your own group.  My group was fine, but didn't communicate well.  I felt that I did a majority of the work.  \n\nThere are too many readings.  They start off interesting and get worse as you go.  I quit reading them after the midterm because I needed to spend more time in another class.  By doing so, my midterm grade went down 10 points.  This implies to me that they aren't that important.\n\nThe tests are open book.  I found them to be rough.  We got two hours to take them, but I think in the future they will only be 90 minutes.  Anyways, I didn't do the readings for them and still got a good grade, but I used all two hours and they were open book.  If the tests are not two hours in the future, you may want to make sure you do the readings as I always ran out of time when I searched through the readings for the answers to test.\n\nOverall, great class.  Loved it and Dr. Joyner is fantastic.  I highly recommend this class.  It would make a good pairing with a second course. I found this class to be paced quite well for a summer offering. I tracked the time I spent on this class down to the minute, and spent an average of 9 hours a week watching lectures, doing assignments, or reading Piazza. This is definitely a class where you'll get out of it what you put into it. There are extra reading assignments that you can do (for fun), you can interact on Piazza about questions offered up in the videos, and Dr. Joyner really tries to facilitate student interaction on Piazza. Also, these videos were by far my favorite in the program (out of 10 classes taken). \n\nThe assignments were generally pretty straightforward writeups that were directly correlated with the lectures. We learned and went through the design lifecycle over the course of 5 assignments (1 assignment/week). While parts of this felt a little rushed due to the need to get outside participation in surveys or interviews in a week's span, the assignments themselves were light (~1000 words), yet informative. This class provided a glimpse into what it looks like to iterate through the design lifecycle with a focus on user-centered design, which I felt was informative and necessary for creating high quality solutions to problems. \n\nI would be slightly concerned about a lack of rigor during the fall or spring semesters, when students have 6 extra weeks to move through the material, but I guess there is plenty of room to perform needfinding to a fuller extent or create higher fidelity prototypes. Even so, I would assume this would be a relatively light class, and could pair well with a more time-intensive class. Very good course. Provides lot of very useful information about the principles and methods to be followed while doing human computer interaction design. \n\nCourse is very well structured and organized. The lectures are done quite well with an intention to make students understand the topic under discussion. The Professor, TAs and fellow students are very active and supportive in Piazza. Assignments, Tests and Projects are very thought provoking and highly oriented towards the material's application in contemporary industry and practical life. Grading is exceptional. \n\nAltogether, great experience and have learnt a lot from this course. Highly recommend taking this course. First of all, let me say that Professor Joyner is a great professor and the TA's were great. Very responsive and understanding, and he always seems to be trying to improve the class. The lectures were expertly done and mostly enjoyable, and the content is useful and interesting. \n\nHowever, for some reason I just did not enjoy the class overall. I believe the main reason was the assignments. I had to force myself to do almost every one because I always felt like the assignments did not improve my understanding of the topics from the lectures - they were just \"busy work\" to me. I gained a good understanding of the course material after watching the lectures but I found myself spending hours trying to brainstorm ideas to apply that material to the essay-style questions that make up the assignments. In other words, I spent more time trying to come up with interfaces to write about than time learning the material. My feelings towards this might stem from the fact that I am a coder at heart and there were not any assignments that leveraged that. \n\nIn summary, if you don't mind doing a lot of brainstorming about different interfaces and writing about redesigns for them, then this class is great. If you decide to skip out on this course, at least bookmark the lectures and watch them in your free time - they are definitely worth it. It was my first semester. The course is learning about the design process of software from scratch. The course include great concepts that can be applied to software development process. \nThe course has a lot of writing around 800 word per week. You do not need coding for this course, but you need basic drawing skills to make prototype or design template. I really recommend this course to sw engineers, it help a lot when you create application.    Pros:<br>\nLectures are high-quality<br>\nCourse material is well organized<br>\nInstructors are responsive on Piazza\n\nCons:<br>If you actually do all the required readings you will probably need more than 10 hours per week. I have mixed feelings on the readings. Yes they add value, but to me it was not enough value to justify the time spent reading everything, taking notes, looking up terminology, etc. Fortunately you don't need to memorize the readings (tests are open-notes).\n\nOverall this is a good course. If you are very interested in HCI then the readings will probably be engaging for you. If your perspective on this course is to be more well-rounded through an introductory exposure to HCI, then you don't <em>need</em> the readings but don't totally ignore them because they are included on the tests.\n\nYou don't need to write any code for this course, but you will be writing a lot of English : ) TL;DR: Good class, with an engaged professor, talking about interesting things, but the summer is packed and can cause some panic if you don't adequately balance out your work. \n\nAs all the other reviews say, the subject matter is interesting, and the lectures handle it all very well. Each assignment applies a specific portion of the class which allows for you to solidify the content in the lectures. \n\nThe main negative I have is that the summer class felt rushed, and there was this heightened level of stress throughout the semester as there was something new to do every week. There is no breathing room, which I suppose is common for a summer course. It is possible to front load things early on, which is a HUGE plus to me. \n\nNOTE: a review below says you have to fill out your own application to an IRB, that is not true. There is a class wide umbrella. You DO have to take an online class to understand what an IRB is, how it is applied, etc. That takes a couple of hours, and is MORE than just logistics. It teaches you the importance of the laws that surround research with human subjects. Overall, this was a very informative and enjoyable course. Dr. Joyner does a great job of trying to keep improving the program and he is active in responding to any questions.\n\nThere are two tests (all multiple choice) that is open book and relatively straight forward (not necessarily easy). All assignments and projects are graded relatively fairly. Make sure to synthesize the learning and incorporate lecture notes.\n\nGrading is generous relative to other courses; however, you do need to commit the time and effort to get the A. Great class, taught by Dr Joyner, who keeps the course interesting and fun with his entertaining examples and engaging lectures. Also staying very active on the forum and ensuring that students understand the mechanics of the course and the material. It's a fairly easy class, but I appreciated that because I actually had time to read the books, papers, and spend time going in depth into the area of project interests. Great class! Although this course does not have any programming assignment, it actually has a very heavy workload. Every week there is one assignment due which requires 1,200 words. The instructor David is very passionate about this course and he is very active on Piazza. The grading policy is very generous. The course is not difficult, but in my opinion it's about the effort that you put in. Some others that I spoke to were spending less then 5 hours a week on the course and they did well. I personally spent around 15 - 20 hours during the first few weeks of the course and steadily was able to reduce my time to around 8-12 hours towards the last month or so. The readings are lengthy at times and there are multiple to get through. I found it hard to digest and remember the opinions of each author/researcher, but getting through the readings helped me to better understand the theory behind HCI and the many views around it. Coming from a computer science undergrad and working in industry as a software engineer for several years, this class definitely helps as I have been on the UI/UX side more times then I can count and it's an area that I find doesn't get enough attention in many of the companies I worked with.  Definitely a great course to start the omscs program! Be prepared to turn in an assignment every week for 10 weeks, watch lectures which are engaging and informative and read a few papers each week. The course is doable provided you do what is required of you each week. You also have the ability to work ahead as videos/assignments/readings/projects are all laid out and accessible from the start of the semester! \nThe most challenging part of the course were the tests as they are a little tricky especially when it comes to the structure of questions.  This is an early review based on the first online offering of HCI in Fall '16. As I write this review, we're only 10 weeks in the course. \n\nI have a BS in CS, and this makes me familiar with some topics in HCI, such as Usability. I'd say it is an intro to the broad field of HCI. There is no prerequisite for CS 6750, and you'll be perfectly fine with a different background. \n\nThe workload is very light at 15 h/w, more or less. There is one written assignment each week, which consists of four questions, and each should be answered with up to 300 words. Answering the questions requires watching weekly lectures, and reflecting on their objectives. These assignments are publicly available at: http://omscs6750. gatech. edu/fall-2016/full-course-calendar/\n\nCS6750 is very different from code-intensive courses that have coding assignment (e. g. CS 6300 SDP). In HCI, you will describe and analyze user interfaces. I think everyone that designs computerized products should take this course. It gives you a different perspective to look at your tasks, and the interface you use to achieve your goals. \n\nThe Video Lectures are not publicly available, but you can view the Scripts at: https://drive. google. com/drive/folders/0B1-VjNQe61hsYi1YanNYYzdkd3c\n\nIn addition to weekly assignments, there are two exams that should be taken via Proctortrack. These exams are open-note; which means you may watch the lectures as you answer the exams, or review your notes. \n\nFacts:\nNo required textbook or readings. \nNo coding assignments. \nGrades are not curved ( B >= 80, A >= 90 ). \nInstructor is very active in Piazza. \n\nHCI should be perfect for Summer. It can also be combined with another course with Low-to-Medium workload. I really enjoy the way Dr. Joyner teaches a class. Everyone seems to be generally interested in the subject which you can tell by the overall activity in Piazza. \n\nI think this is one of those classes where you get out of it what you put in. It's easy to get an A. But Dr. Joyner gives you all of the tools to really learn about the subject and explore the concept of HCI. You will get weekly papers where you have the opportunity to expand on previous designs. It makes for an interesting class. If you work as a software developer and are responsible for building interfaces, this is a fabulous course to take. It's also a must-take if you work (or would like to work) in a software startup and will have product development responsibility. \n\nThe first half of the class focuses on heuristics - what are characteristics of great design. The second half focuses on the design lifecycle. It gives you a process for designing and refining interfaces. It's a very practical approach that I think maps very well to industry. It reminds me a lot of Lean Startup and how to arrive at a great interface using qualitative and quantitative data, and minimizing risk and time. \n\nIf you've taken a course from Dr. Joyner before, you know that he turns out a quality product and works continuously to improve it. This course is well-run. The lectures are to-the-point. He also has lots of \"5 Tips for X\" videos that help boil down the content to practical, actionable steps. \n\nI found the grading somewhere between fair and generous. On your research projects, it's also ok to have ideas that don't work out, as long as you explore them properly. \n\nAll in all, a great course. Best class I've ever taken.  Perfect balance of fun, new skills, applicability to real world and unlikely to have seen material before.\n\nAssignments are very manageable.  There is always a week to do them and most take 2 hours at the most.  It's pretty easy to work ahead and build up some buffer.  Exams are very representative of the material and, if you watch all the lectures and take good notes, you'll likely get an A.\n\nThere is a group assignment but it's way better than in most classes.  It's easy enough that, even if your team isn't helping, you could do it by yourself and still ace it.\n\nLectures are perfect and the materials is something you can use for the rest of your life. The professor is fantastic! The class logistics are awesome-- all assignments are graded within a week. The Piazza forum is attended to promptly. The assignments are more essay oriented than I was expecting. Also plan to spend time on getting the word count right. Check out http://omscs6750.gatech.edu/spring-2018/ for more information.\n\nLecture material is fantastic. The examples and explanations are well-chosen and clear.\n\nThe individual assignments are good, but I think there's too many of them. All assignments are writing assignments with ~1200 words. I felt like I was jumping through a lot of hoops each week to complete all the assignments. I like the P Assignments on design (P)rinciples better than the M Assignments on (M)ethods. It's a fun course overall, and it gets you thinking about how people interact with technology in the real world.\n\nLots of required readings. Questions on the exam cover lectures and readings. I recommend taking notes on the lectures and the readings since exams are open-note.\n\nLike all of Dr. Joyner's classes, the communication on Piazza is well-organized and constant. The course hums along smoothly. The grading was a bit slow this semester, but many TAs fell ill or dropped off which is understandable.\n\nDefinitely recommend this course! [This review was completed mid-term]\n\nThis is an excellent course. The content is interesting, it is very well organized, and the assessments and exercises are great. The work load is light. This course would be a good candidate for a two-course semester. The course has no programming, completely theory based. For the final project, if you want you can build a working prototype. \nIn summary, this course is writing, writing and more writing.\nThere are 10 assignments and 2 projects. There are two types of assignments P-type and M-type, P is based on principles and M is based on methods.\nLectures are very engaging and drive home the concepts very well. If you have already working in UX and/or designing great apps, then this course will be a cake walk and you just need to spend only 5 to 6 hours per week. However, I come from an embedded background with no UX experience, so all the concepts were new and I needed more time. \nThe strategy that works best is to choose a domain and a problem in that domain that you want to solve and a few apps that you can review. You watch the lecture on a Monday, read the questions to be answered for the assignment, internalize the concept and apply them on everything you do in the next three days, then just reflect on your experience for the questions asked in the assignment.\nWe have two proctored exams and they are a bit tough. Take proper notes while watching the lectures and diligently read all the weekly readings. The readings were made compulsory from Fall 2017 and 1/3 of the questions in the test come from those. As I didn't do the readings, my test scores are not great. \nThis can be easily taken along with another intermediate course, if the other one is full of programming like CV or AI then this writing will complement the heavy programming. The lecture materials were excellent. Communication with the professor is great. The assignments were thought provoking and interesting. One of the best courses in the program. An easy-going class with interesting but not technical material. The instructor is very good, always engaging and supportive. I really enjoyed the class at the beginning but towards the end I favored my AI class more because I found it more interesting. There is a fair amount of writing you have to do for this class, and a good amount of thinking and choosing different interfaces to analyze - which wasn't always easy. Favorite OMSCS class so far. I learned a ton, enjoyed the material, the lectures were awesome, the assignments are interesting, and the tests are fair. The only thing I would ask to change is for their to be some variation in the assignments. They get kind of repetitive after awhile. 90% of the time you are asked to write 1200 words to answer 4 questions. The instructor and TAs are very active on piazza and they grade assignments quickly! I thoroughly enjoyed this course, and it really changed my perspective on how to design interfaces.  Dr. Joyner is a fantastic instructor, and this course was one of the best I've taken in the OMSCS program.  \n\nBefore I took this course, I had a vague sense of what made a poor user interface, and this course teaches you the underlying principles of usability and user-centered design.  After the course, I can now analyze and articulate how an interface could be improved based on user-centered design principles.\n\nThe course has two main lesson tracks that were taught in parallel: **Methods** and **Principles**. \n\n **Methods** focuses on the process of conducting HCI research such as understanding regulations about testing with human subjects, performing needfinding (understanding needs of the user), brainstorming approaches, prototyping, and evaluating designs.  All of this is comprises the design lifecycle.  \n\n**Principles** focuses on the design principles in HCI, such as the *Gulf of Execution* (how the user figures out what they want to do and how to do it) and the *Gulf of Evaluation* (did the interface respond how the user expected?).  You also will learn about concepts that improve usability and the limitations of users (human abilities).  This was my favorite portion of the course.\n\n**Assignments:** Weekly assignments were due that usually required 1200-1500 words of writing based on that week's lecture content.  I found these assignments to be easy but useful.  I usually spent 3-4 hours writing each assignment, but the **Methods** assignments required outside work that took a few hours to perform (conducting needfinding with others, developing prototypes, etc). \n\n**Tests:** There are two tests that cover the first half of the course and the second half of the course.  The two tests are open-book and open-note (including Udacity and papers) extremely straightforward (not necessarily easy), but there's no trickery involved or gotcha questions.  Dr. Joyner provided a terrific analysis after the exams to identify problematic questions and other potential test issues.  \n\n**Projects:**\nThere is an individual project and a group project where you go through a round of the design lifecycle by yourself (individual project) and then as a group (group project).  These projects primarily reinforce the material in the **Methods** lectures as you practice what you've learned in them.\n\n**tl;dr:** Excellent course.  Not super difficult.  Very enjoyable.  Great if you want to learn more about designing good UI/UX. My biggest mistake was taking this class along with another one. It should be noted that when I took this class, I had already satisfied all other requirements for graduation outside of 3 electives, so needless to say I am very burnt out. \n\nDr. Joyer is great, and probably one of the best OMSCS professors. He is very active in Piazza and slack and gives you meaningful feedback, and detail on why he does what. During this semester they tried a new grading scale, where for projects A's were all 100%, B's were 80%, C's were 70% and so on, meaning that there is no way to get a 90% or a 85%. I didn't really like this because it seemed to penalize borderline work IMO. \n\nOverall this class was a lot of work. It wasn't technical but there was always something due. I felt pretty overwhelmed after a few weeks of trying to balance two classes. I am not sure if this was always the case, but I felt that the previous reviews were sort of a lie.\n\nGreat class but lots of writing and work.  This was an excellent class.  The videos were some of the best int he OMSCS program.  They were very clear and built on previous information in an interesting and coherent manner.  Prof Joyner is very involved in the class and actively improving the content.  He is very open about why he makes changes and answers questions very quickly.\n\nI have had several UI design classes before, but this was the most comprehensive with key areas highlighted clearly in ways that will stick with me for a long time.\n\nI took this course at the same time as Intro to Health Informatics and was able to combine group projects for both courses, making the group projects more manageable.  It didn't reduce the workload significantly, but allowed us to focus on one project and go into it in more depth than we would otherwise have been able to.\n\nAll assignments were posted at the beginning of the semester making it easier to fit schedules where you need to front load work or where you'll be unavailable in the middle of the semester (though you still need to coordinate with your team for the final project). \n\n\n\n** AS OF SPRING '18 THIS IS BOTH AN II ELECTIVE AND A FOUNDATIONAL COURSE **\n\nA fine class from Dr. Joyner, who stayed involved throughout and should be a model for the profs in other courses who basically let their TAs run the asylum.  10 weekly assignments,  one individual and one group project, two totally open book tests, and a 'class participation' grade (point for Piazza posts, peer reviews, and participating in surveys by other class students).  You are assigned three student papers at random weekly to review; these peer reviews are likely the least effective thing in the course with many of your fellow students offering a whole sentence or two as 'feedback'.   You also have 3-5 required readings each week which reinforce the Udacity lectures (well done by Dr. Joyner, updated frequently).  There is no programming required.\n\nThe basic course structure entails learning the principals and methods of HCI, with weekly assignments being split between the two tracks.  Assignments are used to demonstrate a grasp of concepts prior to the projects which put you through re-designing an interface of your choice.  Workload is manageable, allow a couple of hours for the readings, 1-2 more for the lectures, anywhere from 2-6 for the assignment/projects.  You do have to allot 4-6 more hours early in the semester to take mandatory Collaborative Institutional Training Initiative (CITI) training.\n\nThe grading system is a work in progress; this semester, assignments and projects were graded on hard A-B-C-D-F basis with an equal number of points for each grade (e.g. for a project worth 150 points, each grade gets you 37.5 points).   Tests were multiple choice with you receiving 1 point for each answer you correctly selected or did not select.  For some reason the grade scheme allowed basically anyone to get a B because the total number of points to get a B was 626 of the available 1000 points (63%).  An 88% overall grade gets you an A.  There was a TA shortage as the semester progressed (several had to drop for one reason or another), so grading slowed substantially the second half of the semester.  The TAs were basically invisible other than grading and the very occasional answer on Piazza, but their absence was not felt because Dr. Joyner was so engaged.   NOTE:  Dr Joyner today (6May18) said that this will be the last semester of the letter grade experiment, so expect a return to traditional point-based grading.   \n\nThis was a very enjoyable course thanks to the energy and enthusiasm Dr. Joyner displays for the material *and* online learning. The material was interesting and the concepts are certainly something you can use in real life.  This course was just added as an II elective and I would recommended it for those seeking that specialization. Very easy class, but it does involve a lot of writing and doing peer feedback that nobody reads. Take this class if you want to boost your GPA. I think 70+% of the people who took the class ended up with an A in the class. Don't get me wrong though, it's a lot of work, but not difficult work, just a lot of busy work. HCI course is one of my favs in this program. You have the opportunities to explore a whole different world of Computer Science area. I personally learnt a lot from this course. This is an essay-based course. You would expect many readings and writings. But it was fun. This is also a great course to take with some other heavy coding course in one semester.", 
    "CS-7637": " This is a very well run class.  The material was interesting for a bit, but it soon felt extremely dated.  The main project was to to write an AI to take a visual IQ test.  Some students took part in an alternate NLP QA project.  If you have the chance, definitely get into that alternate project.  The IQ test was interesting at first, but quickly grew tiresome.  The NLP project was very open ended, but a lot of fun to work on.  Overall, solid class, reasonable difficulty and pace, the alternate project really made it. It is a time consuming course due to its emphasis on writing and expectations in terms of diagrams, flow charts/ Pseudocode etc. Both mid term and final are take home exams of answering 6 questions. The project is incremental which is solving raven's progressive matrices. It feels overwhelming initially. Project 1 and 2 can choose verbal/visual approach and project 3 is just visual. I felt it is better to start with just visual from beginning which will make life easier as it progresses. Projects require coding in Python. I had not much prior experience but going through the required pillow library once helped a lot. Overall, a normal yet time consuming course to start the program with. The grading is liberal, answering the rubric questions with appropriate headings will do the trick. I took this course along with ML which caused a lot of trouble as both being time consuming. The Professor and TAs are very active and the course is planned very well. Overall, a good course with fixed expectations. I really loved this class. Professor Goel is amazing!! He is very active on piazza and sometimes I wondered whether he slept at all :) Piazza threads are super organized, so if when there were close to 10, 000 posts, you could read what was relevant to you. I have no ML or AI background, given that I found the lectures very informative, some students in the class who had taken ML didn't like the contents much! The lectures make the concepts look very easy because they use very simple daily life example but when you want to write the assignment on a useful AI problem, it is very very tough!! The projects are solving RPM puzzles; while it was enjoyable and rewarding to write python programs that solve complex visual analogy puzzles, I felt let down that I couldn't use any of the AI concepts that we learnt in them. At the end of each video David Joyner does gives tips on how the techniques could be used in RPM puzzle but even then it was difficult applying them. Videos talk a lot about learning and reasoning but we were given no guidance on how to write such a program. From Spring 2016, the course work is cut down a bit, we only had 3 assignments, 3 projects, 1 midterm and 1 final. We get 3 weeks for doing the project and 1 week for assignments. Midterm and final are both open ended and open book and are given 1 week each. I have given 15 hours/week but I think you can do with 10 hours/week if you are very goal oriented and super focused unlike me. Whatever be your specialization, I think you should take this course to get the most professional OMSCS experience!! A lot of reviewers talk about the practicality of it, however I thought the syllabus was really clear. The lectures were meant to be at a 1000 foot level, but there was enough follow up resources in T-square (resource section) to continue learning about each area. I also rented the recommended book from Amazon, and this enhanced the class for me as well. You get as much as you put in with this class. A really great course with fun lectures and fantastic projects. The exams did a great job of making us synthesize what we'd learned. I actually enjoyed them. :) This is a decent course. The workload is decent, you have to write assignment papers and reflections. Programming wise you can use Java or Python. I have a CS background and it started out a bit difficult, but after learning more and being able to see examples after the fact really makes the process much easier and fun. If you are into AI or agents or even the cognitive process then you'll enjoy this class. The lectures gave great examples and were easy to follow. You really didn't have to read much outside of watching the lectures. \n\nI struggled a bit with their system for turning in projects, but once I got it solved it was a non-issue. Overall I'd say it is a decent class to take for the summer - if you don't have a strong CS background I wouldn't recommend taking the class as an \"easy\" secondary class.  I really liked this course. The course lectures were pretty interesting and were supplemented by some optional readings. Definitely do the optional readings to get a better understanding of the material. This course has an iterative project that has you solving Ravens Progressive Matrices. Starting out can be fairly overwhelming, but I found the project to be incredibly interesting and enjoyable to work on. My only issue with the course is the amount of writing involved. You have to write papers of varying length for 3 Assignments, Two Exams, and Each of your Projects. It can be a lot and towards the end I was definitely feeling a little writers fatigue from it. Great class. Professors Goel and Joyner are obviously extremely interested in the topic matter and it shines through in the incredibly well constructed lecture videos. The class is rigorous enough to make you feel like you're really learning, but not so challenging or time consuming that you have to give up other aspects of your life. I loved the class initially, which waned over time to just a friendly affection. What I loved initially was the content, the lecture quality, and the quizzes. The project seemed fun at first blush, but I struggled with the vagueness of it. If your personality is to overdo things, then there's really no limit to the time you can dump into the project because there aren't any guardrails, so to speak. I also loved the writing assignments. Those, however, became tedious towards the end of the class. It was more of the same and you don't really get any feedback from TAs on your designs. You mostly get student feedback, which I thought was often polarized and rarely educational. (I do like the student feedback aspect though - very unique. ) Going back to the project, I felt that getting a high score by any means necessary was the way to get points, then you rationalize your approach with AI language. I tried to use lesson concepts initially and got mediocre results, but I felt that I learned a lot. Then I realized I wasn't playing the same game everyone else was and adopted more productive methods, but less AI-ish, so to speak. So, in the end, I liked the class, but did not love it. KBAI is an awesome course, very well organized, the instructors and TAs are really good and supportive. The course work is challenging and pleasant to follow. \nAlthough the course is not very difficult, the workload is high due to the large number of assignments and projects. Be ready to write a lot, I\u2019ve written more than a hundred pages of reports for the projects and assignments. \nI would add that the videos contents are a little detached from the projects, you\u2019ll have to do some effort to connect them. I would like to have more intimately connected projects to work with the subjects given in the videos, but that\u2019s not a big problem. \nFinally, there is an alternative project which is a great way of learning more, but be ready to work much more than those in the regular path. Also, keep in mind that the alternative project is much more open ended and unstructured, meaning that you will have less guidance from instructors and TAs. <b>Projects: </b>This was my first class in the program, so I chose to stick with the regular Raven's Progressive Matrices (RPM) projects. Prior to this class, I had no experience in Python or visual processing so I chose to implement the verbal method for Project 1. However, I regret going this route and wish I would've jumped into the visual method right away. I found that when I switched to the visual method, I was able to finish coding my project in < 10 hours whereas I spent well over 3x that amount of time trying to account for all the edge cases in the verbal method. \n<br>\n<b> Lectures: </b> The lectures were very interesting in the beginning! However, towards the end, the topics seemed to overlap quite a bit so I started to lose interest in them. \n<br>\n<b> Assignments: </b> The writing assignments were definitely interesting and allowed you to be creative in developing solutions for real-world AI problems. However, a common complaint among the class is that there was a larger focus on well-made diagrams as opposed to technical writing ability. \n<br>\n<b> Exams: </b> The exams also required a large amount of writing (2k words for midterm, 3k words for final) and had ambiguous rubrics, which was frustrating because our responses were largely up to our interpretation of the problems presented. <br>\n<b> Teaching Staff: </b> The teaching staff was great! Professor Goel is pretty active on Piazza, and the head TA (Yan) was generally quick to respond to any questions we had. Grades were consistently returned 2 weeks after submission, with the exception of Project 2 and 3. This was because they included opportunities for \"recovery credit\" in the regular project and also normalized the grades for alternate project with the regular project to keep the class average fair.  As my first class in the program, this was a great way to get started. I coded in java and had decent time with the three projects. The written assignments sometimes felt like they were graded arbitrarily so make sure to stick the grading rubrics and use the keywords to ensure you get credit. It was hard to keep up with the videos especially if you were trying to do the project at the same time. I would recommend this class to others as a first course especially if it is in a normal semester and not summer. If you are comfortable with coding java or python this course will likely be easy for you. If you a beginner in python or java like I was, you will need to take some prep classes or you will be stressed. Great class - fun topic! I took KBAI as my first course in OMSCS and was very impressed with the organization and quality of the course. The interaction with TAs, Professor and fellow students on Piazza was one of the highlights. Much of the course centers around 3 projects that implement an AI agent to solve Raven's Progressive Matrices. This semester there was an alternate project offered for projects 2 and 3 for a select number of students that implemented a chatbot. In hindsight I wish I had taken the opportunity. I believe the chatbot project will be offered to more students in future semesters. My only gripe is that we didn't have more project based work that allowed us to implement techniques learned later in the course. The Raven's projects really only implemented techniques learned in the first few weeks. Be prepared for a lot of writing. Also, you can put as much time as you want into this course so it is a little dangerous. The homeworks and projects are very open ended. I personally learned a lot in the class as I was new to the field. The TAs and instructors are very supportive. However, I felt opinions about the class depends on expectation from students. Unlike other classes, the structure is a bit different and focusing more on conceptual aspect of AI. For those students expecting to do more hands-on exercises to learn technical aspects of AI then, I can see how people may not be happy with the class. The project is interesting and has great flexibilities to try out many different things. If you decided to implement a few killer solutions, it's also easy to get by and get good grades. Although the class encourages you to try new interesting ideas, I felt the project itself a bit constrained as it doesn't allow much interactions with outside world so much to try a concept we learned in the class. That could be an improvement area. This was my first semester, first course so I can't really compare KBAI to any other OMSCS class. That being said it felt like a well-run class. Professor and TAs are active on Piazza. Good, well-known and communicated structure. Good lectures. Interesting projects. Generous grading. Medium workload, not very difficult. I could not have wished for a better start into the program.\nI will say, however, that there is a lot of writing (in total we had to write 8 essays for a total of about 15.000 words) and reading for peer feedback (24 peer feedbacks in total, 3 for each essay) which means you will read and critique another 120.000 words.\n\nFor me it was perfect to get my writing in shape, get familiar with python which I didn't know before, get familiar with Piazza, T-Square and Peer Feedback in a class that was busy at times but not too bad in total. I recommend taking it. I loved it, but it wasn't perfect. For one, the lectures covered a lot of high-level concepts that weren't even relevant to the projects. The projects, I felt, were certainly interesting, but in most cases you're just reaching for the hacky solution that will get the best score. This isn't necessarily great if the objective is learning about the concepts, and it isn't necessarily fair for those less hacky of us, either. However, Joyner is a champion, and he made this course a joy. TA's are very involved on Piazza and there were a lot of interesting discussions going on. My favorite of OMSCS so far, but like I said, I might give this 5 stars but it isn't perfect. I felt the course was overly slanted towards projects in grading, to be honest. Overall I thought this was a good course and I learned ALOT. \n\nProgramming - This courses didn't necessarily require you to have a superb background in programming. I did pretty well despite my lack of programming experience. \n\nProjects/Lectures - The projects were both doable and enjoyable, and although the lectures were somewhat entertaining, I did not think that they were too helpful to complete the projects. \n\nAssignments/Project Reflections/Tests - The assignments were a lot more time-consuming than expected. There is going to be lots of writing for assignments, project reflections, and tests. I personally thought that the grading was very generous overall for all writing assignments. \n\nGrading - Grading was very generous. You basically get an 'A' above mean. IMO, your grade highly correlates with the time you spend on this course. This was my first class in OMSCS, so my review is also affected by how difficult I found balancing full-time work and personal life with this course. I found the class to be difficult. I thought the lectures in the first half of the semester were fantastic. I started liking them less later in the semester, but there were still some that I really enjoyed. I really like how Professor Goel made the classes interactive. <br>\nWhat I found difficult about the course was the projects. The projects build on each other, which is cool if you feel you have a good grasp on the project and a good way to solve it, but if you don't have a good approach at first, you could potentially need to do a lot of refactoring. I have no experience with visual processing and am overwhelmed by the third project as a result. </br>There are a lot of writing assignments, but personally I did not find them so difficult. However, you have a word limit and I think a lot of detail is expected. KBAI was my first course and i must say it is very well prepared, all TA's and professor was very helpful throughout the course. Classes were organized in proper way along with active discussion among your peers. Initially everyone was suppose to do same project but later on students provide an option to work on other project based on their performance in first project. With this class there is lot of writing which consume a lot of time but there is an opportunity to get your writing published if it is unique and innovative. Though there are many concepts taught in the class about AI, but it was very hard to implement the same in practical life. To start with your program its a good course and one can easily learn python which is highly recommended to finish your project, Good Luck!!! I love this course, well-constructed.\nPeer feedback is useful.\nA lot of writing like other reviewers said.\nAll 3 assignments, midterm and final are writings but need to have good understanding of the course materials.\nprojects are not quite related to course materials, requires some work. This is a hard one to rate. If you're looking to learn about AI, this is probably not the class you expect it to be and almost feels more like a psychology class at times. You'll be doing a ton of writing. We had three 1500-word project reflections, three 1000-word assignments, a take-home 2000-word midterm, a take-home 3000-word final, and three Peer Feedbacks to complete for each of those. Coding is limited to your 3 projects, which for most will be focused on writing a program that can solve Raven's Progressive Matrices (Java or Python with Pillow/NumPy). A small group of students was allowed to pursue Alternative Projects 2 and 3 which focused on writing a FAQ-based chatbot (Python/NLTK). The lectures were well-made, but cover very high level topics. There really isn't anything that helps you synthesize the course concepts. The RPM project only vaguely relates, depending on your approach, and the assignments and exams make it easy to cherry-pick through the lectures to get your answers, which are often somewhat subjective anyway. The course is very generously curved with anything over the class mean being an A, so it's an easy course overall. The instructor/TA interaction on Piazza is great and I was glad to see Dr Goel engaging with students at least a few times each week, even while traveling. We had a nice community going on Slack, too, which helped build camaraderie and made it fun to participate. Peer Feedbacks were very hit and miss and probably should have been scrapped entirely for the Final Exam. Peer grading didn't affect anything, but led to morale drops when getting overly-negative feedback and a lot of confusion when asked to grade another student without knowing the correct answer. Overall, it's a fine class. It's front-loaded, smoothly-run, and generally fun, but you're not likely to come out of it with many new skills that can be directly applied to anything. As with most courses, though, it's what you make of it. This is one of the best courses in this program. It is very well organized, and the professors are probably two of the best in the program. Throughout the course, you will build an AI agent which can solve puzzles used in measuring IQ. You are given the option of using either Python or Java; I advise that you stick with Python, and this is coming from someone who has expert knowledge in Java. You will be writing a ton of reports in this course, with diagrams and all, and you will spend lots of hours coding. Grades are curved at the end, and the professor reiterates that he wants you to learn and not worry about what grade you are going to get. The midterm and final are both take home, but be prepared to put about 20 hours into completing each. Think about this course - where are you going to apply this learning. The entire course runs around solving Raven's progressive matrices using one software program. What practical insight does it give you besides learning Python Pillow library to scan images and using your own software development approach to do math and compare the images, find similarity and differences. I did find any value from AI or ML perspective in this course. TA's are okay, sometimes their responses are vague, sometimes okay. They like lots of writing on out of the world scenarios. More diagrams, more flow charts and spend lot of time writing and making nice drawings. \n\nThere is a big disconnect between theory being taught and what you are expected to do in assignments. Videos are nowhere connected to assignments. overall not a very useful course if you want to utilize the knowledge in any of the practical scenario. This was my third course in the program. Overall, KBAI is well run compared to my previous two courses and the TAs were second to none in terms of responsiveness, interaction and timely grading. The good of this course is that the professor is passionate, the TAs are active, and the course is well organized with pace and material being just challenging enough without completely pushing students over the ledge. The grading is fair and peer feedback proved to be very helpful.\n\nThe bad of this course is that the projects build upon each other with minimal help when initially trying to implement a solution. Only a half of the lecture videos are relevant to the course. There is a ton of writing and research involved in this course. \n\nNote that all of the negatives I spoke about above could also be seen as positives. This is purely dependent on the student. I had never programmed with python before this course, so perhaps this would have improved my overall experience since I was hamstrung at times learning Python and the NumPy and PIL library. Overall, a challenging course and the best I've taken in the program so far. This course is good in general, but definitely they have to change the main project, which is solving RPMs. You can hack it with 2 or 3 out of 20 methods that you learn in class. Even without watching the lectures, you can get a good score on the project. You only need to watch the videos to do the essays (exams were essays too btw). I want to start with the positives. Some of the lectures in the course really *are* interesting. I especially liked the topics of incremental concept learning, common-sense reasoning, diagnosis, and some of the videos on biology-inspired design. I also think that while writing all of those papers does get a bit old, it lets you think creatively and try to apply the topics which were learned in lectures. The experience ends up being a bit shallow since you are writing a single paper on something and then moving on, but I guess it is hard to expect more from a course that covers so many topics. The do provide a ton of extra material for you to go read on your own, and some people do that extra work and seem like they get much more out of the class if you are willing to put in the effort. \n\nA lot of the negative comments others make about this course are definitely valid. Some of the lecture material is just not deep enough, and I find myself tuning it out. This is my 6th course in the program, and I haven't had that problem very often. In addition, the three-part Ravens Matrices project gets old. I also feel like the \"no image processing experience is required\" is technically true, but I feel it would be awfully useful to have that experience. But the biggest problem with the projects is that it is hard to apply what was learned in the lectures beyond the first couple of lessons. I don't think this is specific to the problem being solved, but it is the nature of the requirements and the amount of time you have. \n\nOn a final optimistic note, I think that the alternative project 3 that was proposed is much more suitable for the course and its content. I hope they continue to have a Ravens Matrices project in the beginning of the course, but move on to the conversation agent for the second two projects. I think this would line up nicely with the ordering of lectures. \n\nIn the end I'd say I liked this class, but it was far from my favorite. This has been a very rewarding class, and I highly recommend it. I agree with other posters that the time commitment varies quite a bit with ~25 hours on project weeks and 5-10 hours on weeks with papers due. \n\nAlthough you don't need any advanced image processing techniques, it would definitely help if you are already familiar with NumPy/Python and what you can achieve with it. I think taking CV and CP last semester really helped me. \n\nThe Piazza forum is very active, and there is constantly a good sharing of ideas and approaches. Make sure you make good use of this resource. \n\n I paired this class with ML4T, and that has turned out very manageable. KBAI is very front-loaded if you take the visual only approach immediately in the projects, and ML4T is very back-loaded so I've been able to mostly focus on one class or the other without many conflicts. My favorite course in OMSCS. On the surface it's very easy, and if you wanted to you could get through it with an A with minimal work. But it's like a great puzzle - you don't want to quit at 80% just because 80% = A (as an example). You want to solve the whole thing. If you love puzzles and challenges, this class will make you progressively strive for inventive new ways to solve problems.  This course is tons of fun. Can't say I have ever had a final/midterm that I enjoyed as much as this class. The assignments/tests are written in such a way to encourage creativity. The projects are challenging like a puzzle. It is not too hard/time consuming. I could finish the normal assignments easily/effectively in an afternoon. The projects took more time, but were not too bad, and there was a lot of reuse between the three projects. However I can see how the projects could get bad if you get overly ambitious (unless you're into to that). \n\nOnly down side is the course is mostly theory. I do not think I learned too many applicable skills. Even so I highly recommend it.  Best class ever!! Everyone in OMSCS should take this course. This is a very well-structured class. The material is very interesting and presented very clearly, and all course material is available at the outset of the course. There are *3 assignments*, *a 3-stage class project*, and *peer-reviews* for all assignments and project stages.\n\n**Assignments**:The 3 assignments are essentially essays that ask you to leverage class material to either a specific topic or a topic of your choosing (depending on the assignment). You often have a choice between which material you wish to discuss, so as long as you illustrate you understood those topics and provide a reasonable answer to solve the posed problem it's not too difficult. I would recommend using lots of figures, since the word limit can sometimes be tight, so flowcharts, pseudocode and illustrations in general are very helpful. Make sure to answer all rubric questions provided for each assignment.\n\n**Projects**:The class project is broken into 3 stages. The main overall class project is to develop an AI agent that can solve Ravens Progressive Matrices, a standardized test of intelligence. I say main project since they also allow you the option to complete an alternate project for projects 2 and 3, which involves developing an AI agent chatbot that can answer questions based on answers from an FAQ. At each stage, you deal with progressively harder requirements / problem sets, and you will need to also write a project reflection describing your approach, what you learned and how it connects to KBAI topics. Start projects early, so you don't feel overwhelmed trying to rush things last minute. Don't neglect the written reflection too, as it's normally 40-50% of each project, and make sure to again follow the project rubric to make sure you answer all questions on each rubric.\n\n**Exams**:There are 2 take-home examinations, which aren't too difficult. They are essay-based, much like the rest of the course aside from project implementations, and you  have a week to complete each exam.\n\n**Peer Review**:You will also need to complete peer review for all assignments, all 3 project reflections, and the mid-term and final exams. They don't want single sentence sort of peer reviews, so you will have to put a bit of effort into leaving some good feedback here.\n\n**TAs**: TAs and the prof were all very active on Piazza. There were a few grading hiccups towards the end of this semester, but they were rapid in addressing these issues and correcting mistakes where necessary. I believe the prof, Dr. Goel, is stepping down and there will be a new prof so I'm not so sure if the exact structure of the course will be as described above, so take these notes with a grain of salt.\n\n**Prep**: This is a good first class, but if you aren't comfortable with Python or Java then you should get brush up on one of these prior to starting the class. Most people use Python, and if you want to complete the alternate Chatbot project, it is **only Python**.  Prepare for a lot of writing, as in total I wrote about 11-13k words across all assignments, project reflections, and exams. The course is really interesting. The assignments I liked a lot, how they were related to the classes. But the projects it seemed to me that lacked the applicability of the concepts learned in class. It is not complicated but the worload is big. This course requires a lot of theory and lots of essay writing. Dr. Goel is amazing as he really does a great job trying to always improve the class. I did not get the pleasure of having David as the TA but I hear he is equally amazing. Dr. Goel makes this an extraordinary class and really keeps one engaged. The head TA we had, Lallith, did a great job as well. There are numerous positives and I want list them all here other than to say that the positives way out weight the negatives. But will here are my two negatives. \nOne, the third project emphasizes the use of visual viewing of the images which you end up focusing on solving the problem visually instead of utilizing any AI techniques you learned in the class. People with a visual programming background have an advantage on project 3 I think. Note it shouldn't affect your grade to much just feel I spent way more time trying to understand visual programming then I did learning to apply AI techniques on project 3. \nTwo, there is alot of writing and essays. Some of the essay questions become fairly hard to apply using the items you learned in class. Alot of the AI techniques overlap and are fairly theoretical. On top of this, it is graded by a random TA. There is no secondary grader and your scores are left to the arbitrary TA who reviews it. On top of this I had in some cases great detail about why I was scored a certain way and then in others it was a single sentence. There is alot of writing and it spreads the TAs pretty thin but would be nice if a second pair of TA eyes could review a paper. Note, I am not complaining of my score they did a pretty good job but just seems a bit arbitrary. \nThe work load is pretty high and can be made higher depending how much detail you want to give. The instructor is down right amazing and enjoys challenging the students and himself. Overall I highly recommend the class and most will do fine as long as real effort is made. Grade is curved.  This was my first OMSCS class and I enjoyed it. I never did AI during undergrad and felt this was a good intro to AI. This class is well organized and the professor, TA and student participation on Piazza and slack was very good. Lectures were interesting, expect to spend more time on projects and write-ups. This is a fun class with a very active professor (Ashok Goel). However, some of the material is covered at a superficial level only (no implementable algorithms) and the project can be very demanding. But overall, it was a nice course.  Workload varied between project time (3-4 weeks) and the writing weeks (1 week). \nBe prepared to dedicate ~2 hours a week to watching lectures. \n\nThere is a ton of writing in this course. You have to write a paper for everything. 3 assignments, 3 projects, midterm, and a final. All include writing a paper, so be prepared to write. Seriously. You will write ~13, 000 words throughout this course. \n\nThe projects all revolve around solving the Raven's Progressive Matrices. It was pretty repetitive, but I learned a lot while doing it (by reading papers and trying out different theories. ) I don't recommend doing the verbal approach and just starting with the visual. There are plenty of resources out there on getting up to speed with it. It's worth overcoming that burden sooner rather than later. \n\nThe lectures are pretty high level and they only apply for the writing assignments. \nOverall this is a theoretical course so there aren't a lot of hard lines for anything. It leaves a lot in the open for you to think and go your own way. This can be frustrating for some people as students in general like hard lines as it gives us something to measure against. \n\nThere were parts of this class I didn't like, but overall it was a solid class. The rubric is very structured and they are timely with releasing grades. This was a truly exceptional class! The professor is absolutely in love with the material and very engaging. TAs kept Piazza tidy and helpful and were reasonably available. The material is interesting by itself and the course project (which, at time of writing, occurs over three installments which build on each other) is very fun and challenging. The midterm and final exam were remarkably creative and enjoyable. The smaller writing assignments were also fun and engaging. If you want to get a lot from this class (and there's a ton to get), take it by itself or with a light class so that you can spend a lot of time delving into and working with the material. Also, don't get hung up on the word-count suggestions in the writing - just write a cohesive answer to the given question(s) and you'll be fine. \n\nIf you don't have a strong (if any) background in code, this is probably not a terrific course to start with (look into SDP as a refresher/starter course), though some classmates reported little-to-no prior experience and came out fine in the end - just be prepared to dedicate several hours outside of class to developing your software skills and get into a study group with other students who can mentor you.  This is one of those classes that seems to have a very divided opinion.  I\u2019m in the class-is-a-gigantic-waste-of-time camp. I appreciate the enthusiasm of the professor.  That\u2019s nice.  But everything about the class felt like a joke to me.  The content of the class is super hand-wavy and not really tied to anything useful (as far as I can tell).  The projects were a little fun at first, but they only use the course content in a superficial way.  For me, the writing was a terrible use of time and energy.  The only thing I learned while writing for this class is how to write against the given rubric.  If you enjoy learning interesting ideas/concepts/techniques and demonstrating your newfound knowledge by building cool things, I would look elsewhere. The content of the course is quite interesting and the video lectures deliver the content well. The written assignments were thought-provoking and the coding projects were challenging at times but doable. Knowing Python definitely gives an advantage. What I liked most about the course was the instructor's and TAs' passion for the content and interest in student learning. There were regular requests for student feedback on the course, and previous feedback seems to have been integrated fairly quickly (giving students the chance to do an alternate project for both projects 2 and 3). This course is very much what you put into it. You can get a B with minimal effort, assuming you are a good programmer, or you can spend 20+ hours a week diving deeper and reviewing the optional readings. I took the course for the enjoyment of it and got a lot out of it. The final exam topic alone was so interesting that I spent several hours researching after my paper was already submitted. The \"Time\" box doesn't let me put in a range, but this course varied for me. Weeks when I wasn't working on the project, ~5-10 hours was enough to keep up. Weeks when I was working on the project, more like 20-25 was required. \n\nThis was a really interesting course. I would rate the lectures and papers A+, moderately challenging while extremely interesting and informative, ie. the perfect class in my opinion. \n\nThe only thing I didn't love about the class is the project. You're given a single challenge and then three attempts to build an AI agent that can handle it. It's the same problem (taking a visual IQ test) each time, but the difficulty is increased as time goes on. \n\nThe first version of the project was interesting and pretty fun. But by the second time I was getting a little tired of it, and now I'm working on v3 and I'm not so excited about it. \n\nThe reason is, I feel the project has devolved into a test of my image processing skills rather than an test of knowledge-based AI programming. I didn't mind that on a single project, but I wish we'd gotten to try something different for p2 and p3 instead of the same thing just harder. \n\nHowever, in the scheme of things, the project isn't too bad and the class remains really fun. The Piazza forum is extremely active, and Dr. Goel is highly responsive and engaging with the students. \n\nThis was my first class in OMSCS and I thoroughly enjoyed it. The first few weeks confirmed all my excitement for this program. I'd highly recommend this course for anyone with an interest in the subject, and also for first-semester students (but take it by itself!). KBAI was my first course in OMSCS, and it was awesome. Until you do KBAI, AI seems magic. After you do KBAI, AI seems algorithmic :). You will know how Watson nailed Jeopardy. \n\nIt is also one of the most time consuming courses with assignments (in plural) literally every week. Then there are 3 projects, which you will do better if you start early. \n\nKBAI is an amazingly organized class - with Instructor and TAs very active in Piazza. Rubric for assignments, projects and exams (they are open book) are well defined, and the feedback (from peers and Instructors) are very qualitative.  The class has 3 assignments, 3 projects, and a midterm and final.\n\nThe assignments, midterm and final have no coding at all.\n\nIt's good to know going into it that this class is heavy on writing. In total I wrote _48 pages_ for this class across 8 papers.\n\nThe projects have two parts: coding and writing a reflection paper. The code is focused on creating an agent that can solve the Raven's Progressive Matrices IQ test. Don't be afraid if your agent can't solve all the problems, getting 50-75% of the problems right is usually good enough to get an A. The reflections are about the agent's problem solving process, performance, and relation to human cognition.\n\nGrading is competitive. If you stay above the mean, you get an A. In my semester the mean was ~81%, so 84% was an A. I feel KBAI is a great course to begin OMSCS.  My background is in electrical engineering so my software development skills are limited compared to others working through their OMSCS degree.  This course provides the option to utilize either Python or Java to work through the three projects that build on each other throughout the semester in order to develop an AI agent that is able to solve Raven's Progressive Matrices problems.  I found the material extremely interesting.  It is a bit of a jump for those with limited software development experience translating the theoretical course material and applying it to the projects, but extremely manageable after dedicating the expected amount of time.  Three assignments must also be completed throughout the semester that are 1000-1500 word essays on various topics taught throughout the course.   The midterm and final exams are both take home essays that must be completed within one week and the expected word counts are 2000 and 3000 words respectively.  It is a very well run course and the TA's and professor are extremely active within Piazza. This course, even after adjustment, has a heavy workload of both writing (a surprising amount of that, actually) and coding. As someone without a formal CS background, I found the coding extremely challenging, especially because the push is always to be perfect - and in this course, that's very difficult to do. That said, my Pythonic prowess is significantly higher after having taken this course, and I was incredibly proud of the progress I made both in knowledge of course material and coding over the duration of the term. This class was wonderful; the lecture material and written assignments dovetailed perfectly, the core concepts were really interesting, and the instructor/TAs were very engaged. I do highly recommend learning some basic image processing (even how to use Pillow functions would help) before coming into the class. This was an incredibly well-structured class, and I enjoyed it tremendously, despite all the hard work.  1. Be prepared to write. (Images/Charts and obviously making sense gets you good grades)\n2. Python (numpy/pillow) libraries are your lifeline. If you have used them life can become easy. \n3. RPM problem's can be daunting and you may eventually get overwhelmed. Nonetheless, a really interesting course. \n4. Professor Ashok and TA's are really active in Piazza. \n\nReally enjoyed it. I liked the class. I felt a little bit tired at the end of been working on the same problem (i. e. Ravens Progressive Matrices RPM) for the projects. \n\n* Writing\nThere is substantial amount of writing as for every project you write a reflection. Assignments are also writing. \n* Projects\nAll projects were solving RPMs with increasing complexity. Very little could be used from the class material to solve the project. The biggest challenge in the projects is the computer vision part of it where you need to interpret images to detect analogies between them. \n* Exams\nAll writing as well. This is where you can put to practice the material learned in class. But of course, it's all theoretical. I took this class already expecting lots of writing assignment based on the review. And that is exactly what I got. You will have 3 assignment write-ups, 3 project reflections and 2 exam essays. Each assignment will have 3 peer feedback so 24 peer feedback in total. That is a lot of writings but dont get me wrong, you will learn much of the concept through all of these. \n\nLectures are good and well prepared but mostly only concepts. You need to take extra steps to convert it into working code. I chose RPM project since it had more guidance and stable grading criteria. But if the chatbot assignment is improved in the future, YOU SHOULD TAKE IT! It is more valuable, used in the industry, and looks impressive in your portfolio (compared to RPM solver..). Piazza and Slack were active and really helpful.\n\nOverall a good survey course to KBAI concepts but expect to spend 20-30 hours a week for the assignments. This is a very well run course. The TAs and the prof are always active on Piazza ready to help. We had regular office hours meet twice a week up until the last project. Even though there was a disconnect between the RPM projects and the course contents, the 3 RPM projects itself was very interesting and thought provoking. There is a Alt project after the first mandatory RPM project that deals with chat bot which I believe is more relevant than RPMs. Expect lots of writing in this class. I struggled with the writing assignments in the beginning but managed through later as I adjusted to the rhythm. In all there are 3 writing assignments, 3 projects with the project reflection associated with them, a mid term and a final exam. If you hate writing, this class may not be for you. Projects can use Python or Java. I would recommend brushing up your Python skills, especially Pillow and numpy for RPMs and NLTK for chat bot. This is a great first course to take and will set you up for the rest of your OMSCS journey. Good Luck!!! Pedagogically, this is one of the finest courses I've ever taken. The professor and TA's (real and robotic) are fabulous, the organization and tooling is first rate. But the overall experience is a mixed bag. There's an awful lot of high-level hand-wavy abstract AI concepts that I am certain I will never use again. On the other hand, there very challenging projects solving these Raven's Progressive Matrices that you may, barely, use one hundredth of one of the course concepts but probably will just use math. It's a great course, but I wish it were more filling. \n\nLots of essays. If you can write well, you will dominate this course. New for Fall 2016 is an optional alternative final project based on the Alexa challenge -- the kind of innovations the professor brings to the course. I just wish the level of the course were more relevant to... life? One of the courses with the most genuinely involved instructors. They are actually around all the time and are still experimenting with and improving the course even though this is one of the oldest courses in the program. Professor Goel is going to stop teaching this course starting next semester, but it will still be taught by Professor Joyner (and Bobbie Eicher), so you can still expect a lot of instructor involvement. The course does open book exams without proctortrack, which is personally my favorite mode of doing exams since proctortrack is so constraining. Decent amount of freedom to explore and experiment in the assignments if that's what you want to do.\n\nMy main issue (and it is a big one) is that the material itself feels pretty dated: knowledge-based AI isn't really in fashion in our age of ML and deep learning, so I took this course to see if there was still interesting techniques in that domain, and frankly I don't think I've been convinced: there is *a lot* of material in this course, but much of it seems obvious, brittle, or excessively vague. Also there seems to be a lot of repetition in the material, where techniques that are extremely similar get presented separately due to what I think are very minor differences.\n\nIn summary: this is a well-taught course. It does require you to write a lot but you don't need to be a genius to get an A, just do your work consistently. However, don't expect your mind to be blown by the material, and be aware that you are learning about an area of AI that is now fairly outdated. Pros:\n- course are well organised and contents are understandable\n- TAs and Profs are very responsive\n\nCons:\n- The concepts taught here might be too generic, it feels like the same contents are being repeated again and again in different terms\n- Tons of writing involved in this class, think about taking this class twice if you are not good at writing essays\n- The grading of writing assignments are largely based on the diagrams you draw. Yes, we do agree diagrams will help illustrate the ideas, but it shouldn't play such a large part in grading\n- The Projects are about solving RPM problems by building an AI Agent, it sounds like a real AI project, however from my personal experience, it feels like a normal programming assignment, the `Intelligence` part is not that much...\n\nFinal Exam Drama:\n- So the prof posted final exam paper, which is a writing assignment. After three days when many people have finished the paper, they found out that the solution to one question (Q3) is available online. They took that question done and posted another version of final exam paper, many people's efforts in that question are now in void.\n- The worst part occurred in grading Q2, Q2 is a perfect example to be solved using version space as per discussed in lecture videos, it could be solved using Incremental learning concept as well, they are largely interchangeable and there is no absolutely right or wrong. Students who use version spaces concept didn't get much credit, when being questioned, the prof's response is like below\n\n```\nBriefly, the original final examination contained a specific question on version spaces using the same data as for Q1 and Q2 in the current final exam. Given that we had a question on version spaces in the original final exam, it was clear that Q2 referred to Winston's method of incremental concept learning (and not version spaces).\n```\n- So the grading principle is, because the original problem Q3 is using version spaces, thus Q2 cannot use version spaces concept. That is indeed ridiculous as Q2 and Q3 are not related, and students taking the exam shouldn't guess which concept to use based on a question that has been deleted from the paper! *Disappointed and cannot understand what they are thinking.* This was my first class in the OMSCS program. I thought that the lectures were fleshed out really well in a way that was easy for me to understand. Taking this by itself is pretty manageable and mainly only gets busy around the the due dates of projects and exams. Take note that you will be doing a lot of writing and self-reflection for this class. Every single assignment, project, and exam will consist of a decent amount of writing. I would recommend this class for any new OMSCS student. The course is quite interesting - it approaches AI from the point of view of minimal training data. It covers a number of approaches on how to create AI knowledge, largely from rule based systems. \n\nI enjoyed the course and received accolades for my work. The course is extremely well organized, enjoyable and fun. \n\nHowever, I think the course is a little heavy on the paper writing side. \n\nThe project doesn't map entirely well to the material taught, especially in the second half. I really enjoyed the challenge of the project, which is done in 3 phases. \n\nI would recommend this class, its a great contrast to machine learning. First, you will get stressed because of the project and writings especially if you are not familiar to coding. But at the end, you will learn a lot and discover yourself as a very creative human being. \nLot of fun if you are ready to enjoy and love challenges! This is a fun class to take. The lectures were an interesting overview and jived well with what you might read in the news about AI (like self-driving cars, etc. ). \n\nThe programming projects were a little time-consuming for me (as someone with minimal programming background) but doable, and very interesting. I ended up solving some Raven's matrices with \"artificial intelligence\" that I couldn't solve myself. \n\nAs for lessons learned: I postponed using visual representation in projects as long as I could (it is optional in Projects 1 and 2 but you must use it in Project 3) but it turned out it was far easier than using the verbal description.  Like many have said, this course is a very high-level view of a broad set of AI concepts. Good writing skills (with diagrams) are key to achieving high scores, as all assignments, projects, and exams are in writing. The project is very interesting and challenging, and all assignments and projects are released at the beginning of the semester so it is possible to front-load the project and finish it early. Good survey course on the relationship between knowledge and intelligence. The strength of the class is it's thoughtful structure -- lessons are well laid out, supplemental reading material allows you to dig as deeply as you'd like. This is not an overly technical class, mostly theory (some of it of the hand-waving-magic type). Pizza very active with students, TAs and Professor. \n\nOther posts have covered the amount of writing (3 assignments, 3 project reflections, mid-term, final) -- you can either dread these or look at them as a chance to explore and refine your understanding of the material. There was an alternate project - chatbot - offered after the mid-term which I worked on -- very rewarding but double the workload of what it replaced. \n\nIf you are specializing in Interactive Intelligence this is a must-take. If you are new to OMSCS you may love or hate this class based on your interest in the material and willingness to write prose vs code. This was easily one of the best courses I've ever taken! The concepts in the lectures are explained very well, the time requirement for the lectures isn't insane, and David Joyner and the TAs were extremely helpful. The writing assignments are thought provoking and not at all overwhelming. The Ravens Matrices project is definitely hard, but you have all semester to work on it, and after you get the basics of it set up it's actually a lot of fun. I think this was the most enjoyable course so far.  It's an interesting class, but the difficulty of the course is subjective. It's a balanced class where you will write alot of papers as well code alot. The exams are open book, open notes, essay based, and that reduced a lot of stress of not having to cram everything. During the semester, we worked on a project to solve a visual analogy test known as ravens progressive matrix. The project was only hard in the beginning during the first phase, afterwards, it was fairly simple. If you're enthusiastic and figure out some of the tricks in the beginning of the project, then this class might actually be pretty easy for you.", 
    "CS-7641": " There has been so much said already about the course that I don't feel the need to go into details, but I'll just say that this was my favorite course so far in my OMSCS journey.  The material is vast, but the goal is to give you high level understanding of a broad set of tools.  Specifically, the professors focus on what certain algorithms do, what specific algorithms are good and bad at, intuition behind how they work, and how they are similar and different from other algorithms.  The focus is NOT on how to implement each individual algorithm or how to use specific ML tools and frameworks.  I heard or read at some point (maybe even during a lecture?) that one of the goals of the class is to provide students the tools to become ML researchers.  I think this course does a great job at that, while also giving students the opportunity to pick up specific tools as they desire.\n\nIn my opinion, it helps to take DVA before this class if you are not coming from an ML background.  Even if you don't use the R language for the assignments in this course, that class can get you in the right mindset for what kinds of plots and plot-layouts to put into a report to make the best use of your limited space.  Also, that course goes into some detail on logistic and linear regression.  While those topics are not covered in detail in this course, that discussion is still a good primer for topics in this course, including things like brushing up on rusty linear algebra skills and learning to do write vectorized code. Ok... \n- The assignements are so hard... I got 50% at each even I spent so much time on that\n- A big problem : they don't say how they grade you so I had no clue how I could improve!!\n- The class material is very good and the teachers sooooo cool\n- You learn a lot in this class very usefull, general things about ML\nOverall that's a must taken, even if it is really hard This was my final class of the program and I am now officially finished with grad school (yay!) and this is without a doubt the most time consuming/challenging class I took in the whole program.  To compare it against even the 2nd most challenging class is a huge difference and to be honest this is probably the difficulty level all classes should be for this program.\n\nIf you are taking this class you really need to mentally prepare yourself for the time consuming workload that lays ahead of you.   The class gives you no time to breathe.  Even from day one you need to watch all of the lectures and get started on the first assignment which is due in 3 weeks.  After that you have 3 weeks until the next one is due, then you have 2 weeks until the midterm.  This pattern repeats all the way to the end.  You will never have a week off.\n\nThe assignments are not difficult to code, but very time consuming.  This is because the lectures go over the theory and math behind the algorithms and its up to you to figure out how to actually code them (using libraries.)  One positive is that you can actually steal code.  Yes, you heard that right.  You can Google someone else's code and use it if you want.  I know many people just used the code some previous students created for the class and this is perfectly fine.  I actually coded all 4 assignments myself and learned a lot.\n\nThe biggest problem with this class as others on here have mentioned is you have no idea how well you are doing or if you are even going to pass the class.  Until final grades came out I thought I was going to get a C and was prepared to take the class over again.  I did well on all four assignments (82, 79, 92, 90) which were all above the class mean, but completely bombed the midterm and final (34, 49) and somehow managed to get an A with the huge curve.\n\nIf you are going to take this class, get as much knowledge about ML as you can by pre-watching the class lectures on Udacity, or take one of the many ML courses such as the Andrew NG ML class from Stanford.\n\nOverall this class was great.  It was a ton of work but I learned a lot and will be continuing to study ML and will possibly be thinking about a career change to go into this field. This was the hardest class I've ever taken. I also learned more than in any other class I've ever taken. Projects were very open ended. You could pick any technology you wanted though most gravitated to one or two obvious choices. There is almost no starter code for anything. The midterm is insanely hard and designed to be almost impossible to complete. Solid, difficult but not unsurmountable class that covers a large chunk of machine learning. Sadly, although neural nets are quickly covered, this class hasn't really been updated to the new deep learning age, but it will still give you strong basics on ML. \n\nThe professor encourages students to \"steal\" code, which is kind of interesting and I think makes this class much closer to actual ML practice in your professional life (where you are very unlikely to implement an ML algorithm from scratch, but need to understand how they work). This was my first class in OMSCS and I found it very difficult but also very educational. The difficulty for me mostly came from the fact that this class is very theoretical and uses relatively esoteric tools for the projects (WEKA). Even though I got a B in the course (which is considered bottom 50%) I found this class to be excellent prep for CS7646 (Machine Learning for Trading). This class rocks. It teaches you how to be a wizard who can find patterns in seemingly random data!!! I found the lectures to be extremely engaging and did not require that much supplementary material outside of the text book. The banter between Professor Isbell and Professor Littman is money. The assignments are relatively tough (especially the first one due to its length), but unless you try to be superman and implement the algorithms yourself (to quote Professor Isbell \"steal\"), they are very manageable. The midterm is hard in large part due to the time limit (90 minutes), but the final was more straight forward (with 180 minutes). \n\nSeriously though this course taught me several skills that I am already applying at my workplace. Don't take it lightly, but don't be intimidated by it either.  A very rewarding course. It is pretty fast paced - a lot of ML algorithms are covered and there is a lot of reading to do. However, you learn to use ML tools in the market (I had to program in Java and Python - many others used R) and to not reinvent the wheel. There are a couple of things I struggled with\n1. Picking the right datasets. You have to use the same dataset in 3 assignments, so ensure that you pick datasets \n- running a bunch of classifiers on them to ensure that they don't all predict in the same or similar range, nor are they too easy (>95% accuracy) or too difficult (<50% accuracy)\n- ensuring you understand the underlying data - you'll have to really care about the data else you'll have a hard time explaining your results\n2. Switching from Java to Python and back\n\nI'd recommend sticking with the following libraries/packages for the various assignments \n1. Weka for Assignment 1 (many also used Python and R)\n2. ABAGAIL for Assignment 2 (This has a lot of starter code to help you)\n3. Scikit Learn for Assignment 3 (Weka has ICA missing)\n4. BURLAP for Assignment 4 If you take this course, the professor will tell you.. \"When you'll look back at this course, you'll have tears in your eyes, but they'll be tears of joy\".. that's very true. \n\nThe course doesn't require skilled programming. You can get through the subject without much programming, but it does require extensive reading and really understanding the concepts of Machine learning, which are very dry initially (You have been warned), but once you start to get hang of them, they are pretty astonishing. \n\nThe subject matter is pretty dry but the professors are really witty and jolly and you'll love them. They have made every effort to keep discussion light and intuitive and I think they succeeded. \n\nBe ready to give a VERY lengthy midterm exam in 1. 5 hours, which is almost impossible to complete (I completed mine in 1 hour 29 minutes and I had prepared it for over a month). The final exam is the same length but you get 3 hours to complete, so there is no rush. \n\nTake this course if you're willing to dedicate time for it. The assignments will consume a lot of your time, there are 4 of them. Expect at least a week for each assignment. This is a compulsory course for ML specialization and I loved it. The professors make the class very interesting. It strongly emphasizes on the analysis part of different algorithms rather the coding part. We are free to steal/use any code as we like for the projects. The workload is quite heavy, exams are ProctorTracked. Overall, a wonderful course. This class didn't work for me. I didn't like the setup. If I had more background it would have been good but for a beginner I didn't get much from it. Your mileage may vary.\n\nMy biggest issue is that you do an open ended assignment but never get anything that tells you what you should have seen. I didn't know UL and I still don't. Very hard course to complete due primarily to the effort (many hours running simulations and drafting reports) and the ambiguity in grading.   Four assignments are open-ended research with hidden rubrics.   Two exams are quite difficult, and the mid-term is intentionally oversized such that completing it in the 90 minute window is quite challenging.\n\nThere's a lot of great foundational content but it can get lost in the lectures, which tend toward abstract math and two smart guys proving how clever they are.   You often feel like you're overhearing a bar conversation you don't quite understand, and wondering why everyone else is laughing.\n\nDuring the semester Professor Isbell was active in Piazza, but did not offer much by way of clarifying content or projects.   TAs were mostly radio silence.   Significant delays in grading led to lots of stress and churn within the forums.\n\nIf you specialty is not ML and you're merely curious about the topic take either AI (as much rigor but significantly better run) or ML4T (softer introduction to the concepts).   If you are in the ML specialization take AI & ML4T before this class, it will give you a leg up. This course was very challenging and time-consuming. The projects are fairly open-ended and require a lot of analysis. I found the lectures interesting and the tests fair. The professor is active on Piazza and the TA's office hours were crucial to completing the projects. I would highly recommend this as a survey course in Machine Learning! The class starts off slowly and about a month time for the first assignment. Even after reading all the reviews and professor's push, delayed to start the assignment and the price was paid in the assignment marks. I finished running all the experiments but didn't have time to write the analysis for which the assignment is graded. Write up is the key. Do not stress much on interesting data sets. Choose two data sets with different type of attributes, <30 in number and with <5000 instances. This will help in running the experiments faster and saving up time for analysis. Later I could score really well in rest of the assignments. Assignments constitute 50% of the grade. Midterm and final constitute rest 50% with equal proportion. Mid term was 1.5 hrs long and final was 3 hrs. Mid term is made purposefully lengthy. It had all T/F questions with 2 points each in the beginning for which a small explanation is required. Later there were 12-20 points questions. So time management is crucial for Midterm. Final had the similar pattern with double amount of time and it was fine. The exams do not require to memorize the proofs or complex equations but basic ones. I have used the following tools/libraries for assignments. 1. WEKA (Java IDE) 2. ABAGAIL (Java) 3. SCIKIT-LEARN (Python) 4. BURLAP (Java). It is better to start the assignment early and to get familiarized with the libraries. Its better to decide on the type of graphs to be produced and stick to them. I always got tempted to include more graphs but ended up not using them due to 10 pages space constraint. It is better to focus on important graphs and good analysis. Guidelines or sample analysis won't be available. It is better to read some papers and follow the format. I could only go through the videos after a point but not the readings, still managed to get an A and felt able to synthesize the content is good enough. Overall, a great course for which we feel accomplished after completing.  Life changing course! Lectures are sometimes hard to comprehend and almost always need to refer to thorough readings outside the lecture content. But it is made clear from beginning that lectures only a survey of various techniques. Atleast I learned what I need to learn more, which is precious. Assignments are pseudo open ended, meaning different parts of learning goal would be described but how, what data you would use, what software etc are left to us. Analysis is the key even though results may not be accurate. If focus was on experiment results, many students could concoct those as well. Hence focus on analysis. \nThis course gave me directions to explore, made some good friends, learned from many other students. What more can one ask!! This is definitely a survey course. Very broad, without a lot of time to cement knowledge.\n\nThe good:\n+ Exposure to a broad range of topics\n+ jontay's publicly available code significantly cut down on required time\n+ Generous curve\n\nThe bad:\n- Limited feedback on assignments. I wish TAs had an office hours after each assignment where they pointed out what things we could/should have learned, interesting things we might have seen, etc.\n- Lectures are too math heavy for me without adequate insight tying everything together. I'd like to see more professor driven synthesis of knowledge. The class is structured such that it's on the student to figure it out (or not)\n- Depressing grades. I got something like a 60% which somehow translates to an A. \u00af \\_(\u30c4)_/\u00af\n- Due to the limited feedback, your experience depends heavily on what datasets you choose at the beginning. Of course you don't know what datasets would be good until you're done with the class... Overall, the course content is well structured and covers the base of machine learning. Assignments are time consuming and require running many experiments so they are not something you can complete within a few days. The midterm is very hard with limited time frame and you also need to be working on the second assignment at the same time. Once you pass this point, the workload stabilizes. It is by no means that you have time for slack. It still requires continuous effort to study and complete the remaining projects by due date. \n\nInteraction with TAs and instructor is bare minimum. For most parts, you are on your own and officer hours is chat base in Q&A format. Having more interactive office hours with different time frames could improve course experience further. As mentioned by others, this is one of the hardest course and unless you are specializing in ML or has a deep passion for ML, this course is not recommended. The class was overall good in terms of learning through some of the concepts were superficial and hard to grasp the concepts. As Prof. mentions you will smile once the course is done and will have happy tears. Overall I liked the course and probably teaching style would have little better in terms of clarifying content. The content isn't too difficult. The lectures go into more math than you need for the tests and projects, but it's good to understand. My favorite lectures so far in this program (edit: CV, which I took later, ties or is better for lectures). \n\nThere are 4 projects that take a ton of time. Each project is open to how you want to implement it and with what libraries you like. Every time I spent several hours writing code before I could even begin the results papers, and then much more time running tests and rewriting code once I started and understood what each paper really required. It was stressful knowing another paper was due just another 3 or 4 weeks away and I had to begin immediately. Do begin immediately. \n\nAs my first introduction to machine learning algorithms I learned a so much in one semester and the class was very worthwhile. I loved this course. This class is hard. But I think that's what the professor wants to convey to the students. For me I was introduced to these concepts the first time, and hence it was very time consuming to learn to think in terms of ML concepts. Projects are hard only because its vague interms of grading and open-ended-ness. This is not a bad thing, I actually liked this approach, but since its my first time, a lot of time spent is to learn to think in terms of ML. I read all the papers and most of Tom Mitchell's book - prescribed by the TAs. They are very useful to understand these concepts. One thing is assured - all this effort will not go to waste. Its rewarding because now I am able to appreciate what ML is all about. The only draw back is the course focus is not on implementing algorithms. But ofcourse if time is spent implementing them, then less time would have to be spent talking/discussing about them. In the past I have taken Andrew Ngs Cousera course on ML, ML4T and DVA. While all those courses are good in their own way, CS7641 really dives inside the different ML algorithms. For those interested in pursuing ML this is must take. The Good:\nThe instruction style of the videos are fantastic. The dialogue between the two professors really help in learning the material.\nThe ability to use any software available for the assignments was awesome. It meant I could try new software being used in the field (like TensorFlow).\n\nThe Bad:\nHave you ever put on a blindfold spun around 10 times and then try to throw darts at a dartboard? That is what the grading is like. There is another review that states \"... we need to develop the ability to do independent research ...\". This doesn't do anything in that regard. Assignments are meant to hone your understanding of the material and a rubric helps students focus that effort to ensure it's not a futile endeavor. From the instructors comments there clearly is a rubric they use to grade. You as a student are not privy to this rubric unless you took the course before or received it from former students. \n\nI wanted to really like this course. The setup was there for it to be one of the best courses available for OMSCS. However, it is not. The enjoyment of this course was far overshadowed by the bad. This was a cool class. Dr. Isbell was very involved on Piazza. The lecture videos were informative and very funny. I liked the super open-ended nature of the projects, but I wish they tied in with the videos more. I struggled with them (like 50% total project grade struggled), but aced the final and somehow managed to get an A. It seems like most people had less trouble with the projects though. \n\nSometimes the lectures would get really into the math underlying one small facet of ML, but you don't need to know how to implement things on the exams (this is a survey course). Focus on having a general understanding of everything and how topics relate (when to use decision trees vs kNN, how clustering algorithms compare to each other) and you'll be fine. Profs Isbell and Littman are possibly two of the best teachers of material I've encountered, and I've taken a Loooot of classes at a lot of places. The course is challenging, but the challenge comes from the material itself, and not from, say, a terrible lack of clarity in expectations and instruction. \n\nI really had very little interest in ML prior to taking this class, and I ended up really enjoying the course because of the professors. Great class with interesting subject material. Good introduction to machine learning. Definitely tough and needed many hours per week. This is a type of course that you feel smarter after the semester is over. You really learn what ML is. The class makes you synthesize the algorithms very well. Dr. Isbell and Littman are great professors. They are funny, witty and smart. There are 4 assignments in the class, each of which takes weeks to finish. So do not postpone the assignments until the very last moment. The exams are hard. If you study well, you can get an A. Overall this is a pretty decent course. The material is interesting, but the lack of clarity makes this class a little more challenging than it needs to be. There is no set rubric for assignments, and the feedback varies based on the person grading your paper. You have to pay attention to office hours to fully understand what is needed in the assignments. The midterm is too long for the time given, but you know this going in. The Final is much more manageable in terms of time/question but is about the same as the midterm in terms of difficulty.  This course is a fair amount of work, but oh so worth it. The lectures were fantastic and the projects really help you learn subtle things about the topics you learn about in the class. I've also taken the Reinforcement Learning class and would take any course offered by Charles Isbel and Michael Littman. They are just tops in my book. As I studied the course longer, as I realized the two professors Charles and Micheal are so smart and good, I learned other ML courses from other universities, some of them are very hard to follow due to amount of math and equations, however, Charles and Micheal are very smart and experienced that they can extract the essence of this huge field and summarized into easily understood examples to guide you think and think. Study the course lectures and notes many times to understand otherwise the midterm and final are hard.  Loved the lectures, but the course could be done a bit better over-all. \nThe assignments are very open-ended. This might be good for some, but it was annoying when I spent more time trying to find a good dataset to work with the algorithm than I did actually working with the algorithm. \nThe office hours could have been done a bit better as well. I'm sure this changes semester to semester, but they seemed a little unprepared for some questions and spend half the time responding to questions via text while the recorded video was silent. This wouldn't be so bad if they hadn't used hipchat, which doesn't keep track of separate threads, so at any given point in the office hours there were 1-4 conversations going on at once. \nI learn a lot from test feedback, which we received little to none of. The midterm we got to watch a series of videos (for a few days) that went over the answers, but were never given back our answers with the scores for each. The final we received no feedback whatsoever. \nThis brings me to my final point... Until grades were released, I had no idea if I was going to get an A or an F... Seriously. The instructors were so vague on how grading worked that I had no idea if I was going to pass or not. I really enjoyed this class and learned a lot. I am writing this review a semester after finishing the class, so I am even more confident in being able to say this. A lot of the material has really stuck and I have been able to apply these principles to subsequent classes. \n\nI felt this class was more time consuming than hard. It takes a more hands-on approach rather than a theoretical one. There is a lot of time spent tinkering with data-sets and runing different algorithms. But, I never felt like I did not know how to do stuff or that the material was difficult to grasp, projects just took some time to iron out and decide how you wanted to procede with them. \n\nPersonally, I would have preferred a little more of a theoretical approach and deeper dive and increased focus on the underlying math, which was extremely light. But at the same time, this is a survey course that aims to cover a lot of topics, so perhaps it is not realistic to increase the depth too much without sacrificing breadth. \n\nOverall, I would highly recommend this course! First off, the GT course surveys site currently reports this as almost as difficult as 6505. This wasn't true, at least for me. This class is tedious and time consuming, while 6505 is just plain difficult and time consuming. \n\nLectures:\nThe lectures did a good job of explaining the various machine learning algorithms. Most lectures described things relatively informally (no rigorous math or proofs). For some of the concepts, I kind of wish they had explained the math behind the algorithm a bit better, but for the most part they were very good\n\nHomework:\nThe homework is structured as four projects. There were two big issues with the homework. First, there was a sizable gulf between the material presented in the lectures and what you actually had to do for the projects. There was lots of outside reading required to understand how exactly to use the ML algorithms in an analysis setting. In other words, the lectures explained how the algorithms worked but you were on your own with the homeworks in terms of comparing them and determining which performed best and why. Second, you were kind of on your own when it came to picking tools to perform your analysis. As a beginner to these concepts, I spent lots of time evaluating machine learning frameworks to determine which best suited the assignment. This meant I was spending less time actually working with the algorithms and more time experimenting with machine learning libraries. The TAs and professor occasionally made suggestions, but it would have been nice to get a list of vetted frameworks for each project. \n\nAssembling the reports for the homework was tedious. It involves running multiple (hopefully repeatable), possibly long running experiments and usually plotting the right things for each algorithm. This was by no means _hard_, but it was time consuming. \n\nGrading/Administration\nI thought grading was generous. The homeworks were graded fairly, but it would have been nice to have a more explicit rubric.  This course requires a lot of hard work if you aren't very familiar with Machine Learning. The lectures are very well created and help understand the topics, they can be standalone but the additional readings help expand on the topics (although they can be extremely long, more than the lectures). The assignments are not so hard once you get a hang of what the TA's are looking for in the grading.\n\n\nAssignment 1 and the Midterm are pretty brutal, but low grades are not the end of the world. For reference I had 50's in both and got an A. Prof Isbell wants you to understand the topics, not regurgigate reports or pay too much attention to coding.\n\nRegarding coding, you can use whichever programming language you want, but there are some recommended languages for some assignments. Code is not graded, so if you focus on delivering high quality reports you're set. Data visualization comes in very handy in all of the assignments to convey insights effectively in the least amount of time. One of the best courses in OMSCS, this course provides a good overview and introduction to the world of machine learning. The videos are good and lots of information to grasp, especially if you are new to this area. The expectations from assignments are pretty open ended. Overall a must take course This was one of the best courses I have taken so far in the program. The lectures are highly engaging, fun, and you very informative. The assignments are time consuming, but you will learn a lot. The tests are not easy either, but they curve the grades. If you don't procrastinate on the assignments then the course is very manageable. Definitely do yourself a favor and take this class if you want to learn ML. I don't think this is a good class. I would like to learn more about machine learning, but didn\u2019t learn much and don\u2019t like the setup of this class.\n\u2022\tYou get minimal feedback on projects and not know what to do to get the good grade on project. Doesn\u2019t understand what need to improve.\n\u2022\t You won't receive your tests back and won't know what you missed. \n\u2022\tLectures are heavy math for me without adequate insight tying everything together, and not able to understand. I don\u2019t like the lectures.\n\u2022\tDue to the limited feedback, and can\u2019t learn much without know what you do wrong.\n It is a tough but fun class. As others mentioned, this class covers a lot of ML topics and also provides a good depth, so be prepared to spend time watching/re-watching videos to understand the concepts, specially if this is your first ML class.\nFor projects, you are expected to do research on your own but as long as you meet the rubric you'll do fine. Exams on the other hand are very difficult. The grade is curved so most people end up with an A or at least a B. This was one of the hardest classes I've ever taken. Even to gain a cursory understanding of the material required many hours of reading supplementary material along with watching the video lectures. The projects were also fairly difficult and usually took anywhere from 30 to 50 hours to complete. You're allowed to use any language you want, which is nice, but make sure you find data that you're actually interested in analyzing! That will go a long way in keeping you interested and motivated in the class. \n\nThe TAs and Dr. Isbell were great on Piazza, and I felt were fair in grading. The class is very difficult, and is graded harshly, but there is a curve at the end, so don't lose hope if you feel you aren't doing well! Despite its difficulty, I found the lectures and the material to be very engaging. Topics were explained very well, and were supplemented by the readings. I very much enjoyed this class!\n\nI took this class along with Computer Networking. Overall, it was a good balance, as Networking was pretty easy, and this class was pretty difficult.  I had zero ML experience, its been 14 years since I last thought about linear algebra, and I wasn't comfortable with any of the ML libraries(like sci-kit) before this course. Its a good course, lot more theory than I liked, but it helps you learn. Assignments are basically experiments and documenting the same with no clear instructions on how to conduct those and what kind of experiments to run; I think the idea is to encourage students to explore and learn as much as possible, so that we get learn to decide what is important and what is not. Assignment grading seems unfair at times, and exams are very tough(At least for me). Advice from me; refresh your linear Algebra, and be comfortable with Python/Java so that you can work with ML libraries. At least be in \"listen only\" mode in piazza, office hours, slack channel to get hints on what experiments to run, what curves to draw in the report (I didn't do it, and that was a mistake)\nYou will learn a lot. Do not stress yourself with assignment and mid term grades. I found that individual grading may seem brutal, but the overall grading is pretty lenient. Just hang in there, do your best, and try to enjoy while you are at it. Getting a 'B' (or above) isn't that difficult IMO. \n\nProfessor Isbel is really really really good and very active in Piazza. They have an army of hardworking TA's, and piazza is very active with discussions. Overall, a very good course.  Tough class!! Few tips:\n\n1. You can steal the code - prof. really mean it.. \n2. Don't loose heart on low scores.. its war of attrition keep going... You will be fine... if you give up - u r a goner\n3. Follow slack - they share good tips\n4. Its a long class with lots going on - prepare up front - watch the videos when you can.. \n\nOverall, you will learn a ton. Prof are funny - videos are awesome - you will love it.. Great survey of machine learning. Well-written exams, great discussion-style lectures, and projects that facilitate learning extremely well. The discussion style of the videos in this course made it a lot more engaging than the straight forward lecture style of another course I took this semester. Both Littman and Isbell have insightful questions, clear explanations, and puns. The readings are tough, but help to understand the meaning and math behind the algorithms. \n\nThere seemed to be a trend in grading where the supervised and unsupervised assignments received lower scores than the randomized optimization and markov decision process assignments. I was around the mean for most assignments, did a few points above the mean for the midterm, did better on my final, and somehow ended up with an A for the course grade. Strangely enough, I don't feel like I deserve an A because theres still so much to understand and it was clear from the piazza forum that others had a solid grasp of the material. That being said, I do want to go on and learn more about ML!\n\nMy advice for this course would be to get started on assignments early. I tend to procrastinate and the grade on my first assignment showed that. As you work through the assignments, you'll find more and more questions that you'll try to answer. In order to have an interesting paper that fits the page limits, you must be able to explain why your experimenting showed the results that it did concisely yet comprehensively. Advice bit number two would be to just go with whatever everyone else in the class is using for the assignments. Weka for assignment 1 and 3, abagail for assignment 2, Burlap for assignment 4. Keep a close eye on the piazza forums for technical help.  I wish all my classes were like this. It was very enjoyable. I felt that the two person teaching format worked really well for the course, to the point where I started to question why all courses didn't do this. It sort of reminded me of the back and forth in a RadioLab podcast. This was one of the best classes I've ever taken, and even though I have some background in Machine Learning, I felt I took away a lot of new insights from this course. \n\nIs it hard? I guess. I don't feel that it's hard to get a \"B\", but you have to work at it. I think the professor recognizes your efforts and as long as you are committed to learning the material (proving it by doing all the assignments and problem sets), then you should get at least a B. Another way to put it is that if you didn't get a B in this class, you probably weren't that surprised about it. \n\nIn terms of criticisms, this was my first course in OMSCS, so I didn't have anything to compare it to. Certainly there seems to be a fair amount of growing pains in the program itself when it comes to addressing student concerns or giving out grades on time. But it also seems that the administrators recognize this and actively try to improve the environment for everyone. Over time I think some of these hiccups will iron itself out. A second criticism is that the book they recommend is a bit antiquated, given the level to which this field has evolved. It would have been nice if they upgraded to ESL or something similar. \n\nOverall though, I'm very happy that I took this course.  I have very mixed reviews on this course. I think this course should be renamed as \"Applied Machine Learning\". To be honest, I really liked the instructors and their teaching style. In fact, that is the only reason why I liked this class. I used to keep listening to their lectures again and again until the concepts got deeply embedded in my brain. The instructors provide the students with a good overview of the theory and derivations both through lectures and piazza materials, but the students are not tested on those in any of the assignments. The midterms and finals were not that difficult, provided the students get accustomed to the structure of the questions beforehand. One way to do that is to solve all assignments of the past Machine Learning courses taught at CMU as well as the exercise problems from Tom Mitchell's book that do not require any derivation or proofs. I did all my assignments in JAVA using Weka Library and BURLAP, although Python would have been a better option. Assignments were easy yet time-consuming. In most universities, Machine Learning courses offered by the CS department turn out to be a blend of theory, derivations, analysis and quality code execution, where most students are tested on those. Here students are graded ONLY on analysis. In fact, students are provided with the code or the software for all assignments. I did not enjoy the assignments, as I did not find those challenging enough. If the students are serious about understanding the lectures, then they need to ensure to have a basic grasp on Big O Analysis, Differential Calculus and Probability Theory before taking this course. This was a great survey course that tends towards the theory side without heavy math (but there is a lot of math, so define 'heavy' as being relative), but it took a whole lot of work. It's very easy to spend 20-30 hours on each project assignment. Study hard for each exam, and definitely reach Mitchell's textbook in addition to the supplemental material (you can skim papers, but make sure you understand them). If you have pre-canned code to run, this can greatly reduce your assignment time. I found myself writing a lot of my own code, so perhaps I could have saved countless hours if I knew which experiment to run beforehand.\n\nML is a very fair course, and they grade harshly per assignment and exam but do curve up. If you do better than the mean, you'll probably get an A. I screwed up the first assignment because I underestimated the time it took and sent it half complete (no extensions). I did at mean or better afterwards on everything, and it all worked out. They will be reasonable if you do poorly on the first assignment, but demonstrate an upward trajectory afterward.\n\nI took ML and ML4T at the same time, which had some overlap, but I found myself spending every weekend alternating between the two classes. I'd recommend taking ML alone if you're also working full time on a demanding job. I did get A's in both, but I also lost nearly every weekend for 3+ months. **Overall: **  It's a hard course even with a strong math background.  I did not find the assignments to be very helpful (they sapped my enthusiasm), and the tests are hard.  TAs were not very responsive in Piazza this semester (Spring 2018).  This class is too laissez-faire (in my opinion) and fails to provide effective feedback on assignments.\n\nI had a fair amount of ML experience from previous learning (I had watched the Supervised Learning lectures a year earlier, and taken other AI classes in the past) coming into this course, but this course was still challenging.  \n\nThe lecture quality is pretty good; the professors Isbell and Littman are very knowledgable and their humorous banter in the videos is funny.  I liked the conversational style they used in the videos - it's a dialogue between the teacher (alternates between Charles and Michael) and the other plays an inquisitive student who asks questions.\n\nThe assignments were super open-ended and I felt graded quite harshly given the lack of concrete direction.  There seemed to be a hidden rubric used to grade submissions that was not shared with students in the assignment descriptions.  I felt frustrated with the assignments because I felt like I wasn't really learning much but simply twiddling hyperparameter knobs in order to generate plots for the report.  Further, the feedback that I received from the TAs was usually  weak and non-specific after they'd take off 30 points.  I spent probably 30ish hours on average for the problem sets.\n\nI wish the course offered more structure (\"Students have successfully used this GitHub repo <some_url> for Assignment #1.  Train the model, plot learning curves (accuracy vs. time and accuracy vs. iterations), do tasks X, Y, Z\") rather than giving vague instructions (\"pick some interesting problems and fiddle with the hyperparameters for algorithms A, B, and C.  Plot some stuff and tell us your observations\").  I'd also have appreciated a more specific rubric for what's expected on the assignments - I'd love to go on the intellectual journey, but please tell me the waypoints!\n\nThe exams were hard but fair.\n\nI'm happy to have this course behind me.  There were high points (lecture content is good), but the assignments were simply not helpful for my learning. This is a perfect introduction of Machine Learning. I begun watching videos and reading the textbook in summer vacation, review of both videos and the textbook again in the fall. I do not have any other experience in machine learning, just took 7646 last semester. The journey is awesome, especially the first half. Learning how to learn under pressure itself is very meaningful for me. The first assignment and midterm are warning signs to tell you that you need to really dedicate. The grading curve is friendly. \nTake it and enjoy it! Even casual observers would love it! This is my favorite class in OMSCS so far. It is time consuming but very rewarding class. I found video lectures to be very interesting. Assignments are open-ended which makes them more interesting as well as time-consuming. I started with recommended tools in first couple of assignments (Weka and Abagail) but later I felt that I should move on to tools which I am more likely to use if I have to use ML techniques at my work. So being a python programmer, I moved on to sk-learn, and mdp toolbox which also worked very well for the assignments and within couple of months after course I started using the algorithms at work. Piazza was very active and everyone was helpful. Only thing I didn't like was that mid-term exam was way too long, which I don't think really serves the purpose.  This is a survey course covering pretty much all essential topics in Machine Learning. The course does not dive deep into the implementation aspect of machine learning algorithms. So set your expectation straight! The two professors are really entertaining, they did a great job in adding colors to the materials which are dry in nature. I love most of the lectures except the one on Markov Decision Process. To me, it would be more intuitive to walk through an example of value iteration before throwing tons of equations at the audience. The course did exactly the opposite which gave me a hard time. Outside the lectures, the course itself is depressing. There are four assignments in the course. They are asking serious a lot for each. I would expect to spend 100 hours for each assignment to get to the place where they expect you to be. Unfortunately it is not realistic since i am juggling between job, family and study as most of us here. The grading criteria should be better communicated, my overall impression is that the grading lacks consistency. TAs give grade based on their personal tastes.  The feedback should be more constructive and to motivate students to explore more. To me, the feedback is only a list of missing tests which are only implied in the assignment specification. I was discouraged each time after reading the TA's feedback. Overall, this is a reasonably well organized course. The materials are quite dry and TAs are expecting a lot from your assignment without telling exactly what they want you to do. Strongly recommend this course, it's a great overview of the topic.  Be prepared to work your butt off.  Not much to add beyond the other reviews.  You can probably make this work as a first course (I did), but be sure to be ready for some theoretical presentations and do the work getting the abstract down to the concrete. Excellent introduction to machine learning. I don't really recommend taking this as the first class to the program though, unless you have a background in machine learning. Even then, it wasn't so much the content that makes the class difficult, rather the amount of pages you will be writing over the semester (I think I wrote somewhere between 30 and 40 pages for the semester) on top of everything else you have to do. Definitely recommend it. The instructors are awesome as well. The course is a broad survey of ML & is a nice introduction to the topic. It covers to a decent depth all the 3 learning techniques (Supervised, Unsupervised & Reinforcement Learning). The video lectures are very informal & at times highly entertaining. But one needs to be very attentive (& make good notes) since a lot of the questions from midterm & finals are based on the conversations between Prof. Isbell & Prof. Littman. The TA's are engaged and hold regular office hours. Prof Isbell is very active on Piazza & show tremendous patience to the almost repetitive & very annoying questions (some of them seem to simply not use the search feature before posting questions - this can be really painful for a large class like ML). The 4 assignments are meant to let the students do a detailed analysis based on the application of learning techniques, tuning hyper parameters etc on different datasets (of our choosing) & provide right justifications for all our choices. The feedback can be at times very detailed & some times not so thorough(depends on individual grading TA). It can be subjective but most of the time based on well defined rubric. Your analysis can be as independent & informal but cover what's expected. I managed to score pretty high on these (overall above 90%) with a couple of centuries. And this saved me some grace from what was nothing but disaster of a midterm...\nProf. Isbell makes it very clear(repeatedly) that he cares the least when it comes to code for all the analysis & the only thing that matters is good analysis. You can re-use existing code (cite references).\nThe exams are closed book, without any pen/paper etc and expects short concise answers. The idea is to test the understanding of the concepts on many of the topics covered in lectures.\nOverall a fantastic class & personally didn't find it as hard as advertised in discussion forums.  This was my favorite class that I have taken so far in the program, the professors were very knowledgeable and entertaining in the lectures. The projects were a good mix of theory and practice and gave me a very good understanding of the concepts. Jesus, Mary, and Joseph, this was one tough course and semester in general.  First, I have to state that Dr. Isbell, and the TAs: Amir, Sasha, and Pushkar, were extremely helpful throughout this rough journey.  This was a crazy semester for me, and I am sure for others as well, with the hurricanes that affected us: Irma and Maria.  I actually had to complete one of the assignments while running on a portable gas-powered generator, because the electricity was out at my house due to hurricane Irma; where there's a will there's a way.  With a wife, kids, full-time job, putting up hurricane shutters at my house and my parents, being without electricity for a few days, driving all over Miami to find gasoline and propane, and taking Machine Learning for Trading along with this course, this was one hectic semester.  In the end, I miraculously earned an A in both courses.  I must say that I learned a lot in this Machine Learning course, I came into it clueless about Machine Learning, and can say that I acquired a plethora of information in the end.  Dr. Isbell and Dr. Littman cover Supervised Learning, Unsupervised Learning, and Reinforcement Learning throughout this course, at a somewhat deep level, which was great.  Grading is harsh, but don't let this discourage you, just give it all you've got and do not give up.  Complete all assignments and the problem sets, and study hard for the midterm and final.  Most importantly, follow this guide: http://omscs.wikidot.com/courses:cs7641 I agree that \"applied ML\" would be a better suiting title for this class. The Udacity videos are fun to watch and sufficient to introduce students into the topics discussed. My only concern about this class was the responsiveness of the prof or TAs on Piazza. I happened to get seriously ill at the start of the semester (almost 1 month of hospital treatment and reconvalescence). I approached the Office of the Dean of Students, they checked the supporting medical docs and forwarded my absence request to the prof. SImulataneouslY I made a private post on Piazza, asking for an extension (2 wks) of a P1 (a deadline had passed before). A TA asked me to fwd a message from the Office of the Dean of Students with a statement that after I do this, they would approve my extension. I did what I was asked for and nobody replied anymore. Tried to remind them, tried to escalate to the prof., no reply. I ended up withdrawing from the course (1st time in the OMSCS, after 7 courses passed with As). One of the best class on OMSCS that I've had. Something to keep in mind is that this class is a survey class. It goes over on a high level the various major topics pertaining to Machine Learning but if you want to dive in deep there are other classes like Reinforcement Learning itself. The projects are a great way to learn more about how things really work and I do highly recommend that you steal code for this class rather than writing it from scratch (yes this is allowed and encouraged for this class). It'll save you a lot of time and gives you more time to play around and write your actual analysis (which is basically the entire score for your projects).\n\nThe lectures are great for me at least, but I do know of a few people who did not like the banter between the two professors. The extra readings, while not necessary, I believe is a great supplement to the lectures. Do read them to expand your understanding but is not really needed for the tests. All in all, a great class! Machine Learning is a vast discipline. This course surveys techniques in Supervised Learning, Unsupervised Learning, and Reinforcement Learning. There are only 4 assignments so you have several weeks to do each, but each one covers broad regions of the ML landscape. Part of the difficulty of each assignment is figuring out what is most important to include in your writeup. This seems to be deliberate. Guidelines are given regarding grading, but they don't tell you exactly what you need to do to get a high score. This frustrates some people, but I think it's reasonable because this is grad school, not undergrad, and we need to develop the ability to do independent research and determine on our own what is important, what questions to ask, how to get answers to those questions, etc. If we can't do those things we'll never be able to discover or invent something new. \n\nYou are free to write your code in whatever language you choose. Mostly you'll choose a library with the ML algorithms you need instead of writing everything from scratch (which would require a superhuman effort). Python and scikit-learn are popular as is Weka and other Java libraries. \n\nThis course isn't about becoming an expert in ML (that would be impossible in 1 semester). This course offers a broad view of the ML landscape and helps you learn how to approach ML topics so you can identify areas of interest and continue to build your skills beyond this course. 7641 is a rewarding and difficult class. The lectures, tests and projects all demand your attention. The projects IMO were a mixed-bag: it\u2019s an opportunity to apply what you learn in class but they\u2019re quite tedious to write. I wish I appreciated the thoroughness the graders were expecting ahead of time. My first project answered all of the questions that were asked of us but because I didn\u2019t check-off enough boxes on some hidden grading rubric, I got one of the worst grades I\u2019ve ever gotten and spent the rest of the semester trying to get back into a good state. When the prof says that the code doesn\u2019t matter and it\u2019s all about the write-up, he really means it. Challenging and rewarding course. The lectures are engaging and Prof Isbell is active on piazza. I came in with experience using python for supervised learning problems at work, and for some unsupervised problems as well, but the optimization and reinforcement learning sections were completely new to me. I learned so much through the readings and lectures, but the assignments really solidified my knowledge. Workload varied for me depending on whether it was a week where the assignment was due or not -- the weeks where an assignment was due on the weekend, I would spend at least 2 hours on it per day during the week, and then all of saturday and most (if not all) of sunday on it too. Very challenging class but incredibly rewarding. One of my favourite classes ever, you will be exposed to roughly a dozen machine learning algorithms. \n\nThe first half of the class is the most difficult. Understanding the math, ideas, requirements for papers and midterm can be a little discouraging. The second half proved to be much easier and even more interesting. I was ready to drop the class at the midpoint but ended up finishing with a top mark. \n\nAt the start of the course you have choose 2 datasets which is the basis of all your work and papers. The problem is that course does not explain what qualifies as a good dataset to study. Its a tradeoff between the training time, sample size and the number of dimensions. To little data and there is no difference between the various algorithms. Too much data and it will take a long time to run your programs. My first dataset was too simple and the second didn't have enough data to train - given the number of inputs (dimensions). I would seek clarification before finalizing the dataset choice as the idea is to compare all the algorithms on the same dataset. \n\nThe instructors are highly entertaining and seasoned experts in their field. The class was overall very fun and programming is not too bad (even for a non-CS student). Projects are difficult and time consuming. Professor Isbell does not care about using other people's codes as long as they are cited.. take advantage of this and take the extra time on your research and writeup. Both midterm and final exams are difficult. The midterm exam in particular is designed not to be finished so don't worry if you didn't do well. Professor Isbell really cares about \"synthesising\" the learned material. Make sure to review the lectures. I did above average on both exams and managed an A by reviewing the lectures two to three times (despite not reading any reading material). Also, do not procrastinate... class starts off slow, but quickly accelerates and reaches a work-load peak during assignment 2, midterm, and assignment 3. You should be fine as long as you put in the time. In summary, PUT IN THE TIME AND DO NOT GIVE UP. Fighting for an A in this class is extremely stressful but I did earn one in the end. I had heard great things about learning from Dr. Isbell and I was not disappointed in the least. It was an honor to learn from him and Dr. Littman. These professors genuinely care about how well and deeply their students learn. If you take this course you will learn a lot and if you want good grades on the assignments, you will work very hard. Each of the 4 project assignments took me 35-40 hours. My advice is to start on every assignment early and truly learn from the feedback the TAs give you on them. The assignments are pretty open-ended and they want you to do more than the listed requirements but also do it concisely, so a lot of your time on the assignments will be editing and making sure you cut out fluff and use your words wisely. Also do all the problem sets they make available. You'll want to get started on these early too so after discussing solutions on Piazza, you can fully understand the answers before the midterm and final exams. Also, don't use this class to learn an obscure tool. Use the tool most of the class uses because the instructors don't care about which tool you use and you won't earn extra points for using something unusual or poorly documented. The benefit of using what most students use for each assignment is that you can spend less time implementing the work and more time writing your analysis which is almost all they care about. Tools more common among your fellow classmates will have more troubleshooting solutions on Piazza. This was my 5th course in the program and it was probably the hardest I've ever worked for an A in a class but now my brain is packed full of knowledge about Machine Learning and I look forward to taking Reinforcement Learning, especially because it's taught by the same professors.  This is the stalwart of the Curly/Smoov two-fer in the ML specialization. Many people are initially turned off by the open-ended nature of the class, but that's really the genius of it - to encourage intellectual exploration that would otherwise not happen if a clear and concise rubric was given to be followed.\n\nI had completed ML4T and RL previously, and those really helped with the course - particularly in understanding the grading style of the projects and with the RL parts of the course. Though having done only ML4T would have been more than sufficient in a successful experience in ML.\n\nStart on the projects on the day that they are assigned, and attending office hours, are key to succeeding in the projects. The exams are difficult and require a depth and breadth of understanding the material - there's no getting cute around that.\n\nOverall, an excellent class that is well designed and the student definitely gets as much as he puts into the class.\n This class is well done. The lectures are done well and provide good explanation. My one suggestion for improvement would be for the teachers to talk about methods that are successful for solving ML problems in the real world. Midterm was extremely difficult. Make sure to study basic equations on both midterm and final. This is a challenging course. The first few lectures on Supervised learning may be easy but the it gets tougher as the course progresses. Don't make a mistake of taking it lightly after watching a few lectures. Try to watch the lectures early and review the reading materials. Assignments are key to this course. Start them very early. Spend at least a week in writing report. I made a mistake of focusing more on code instead of the reports and inferences. While writing reports, read the instructions, read the piazza posts and watch the office hours to know what type of graphs and inferences are needed. You may feel that you have done very bad in the course but you are more likely to get an A at the end.  In short, I echo the comments of many reviews here that the content was excellent and the course is challenging.\n\nThe longer version ...\nThere are three components I'll comment on individually: lectures, exams, and assignments. \n* Lectures - Most people agree that these are excellent. Watch a few of them and you'll see the dynamic between professors Isbell and Littman. The order of material, the quizzes, and the examples are all generally good as well.\n\n* Exams - A midterm and a final, which only addressed material since the midterm. The exams were straightforward, covered a nice breadth of material, and were appropriately difficult. My only criticism is that the midterm had way more content than time to answer it. The final did not have that problem. \n\n* Assignments - Bittersweet (for me at least). Each of the four was relevant, rewarding, and quite time-consuming. My two main criticisms are 1) you are asked to think deeply on a topic you are presently learning, which, for me, is tough; and 2) the assignments are broadly and loosely scoped. Personally, I finished every assignment feeling as though I learned a ton, but each grade reflected just the opposite. More structure in the assignments would have helped me focus on what I needed to learn rather than waste time trying to figure out what the TA wants me to address.\n\nOverall: Excellent material that I've been wanting to learn the foundations of for a while. The instruction was great. I just wish the assignments were more structured.", 
    "CS-7642": " RL is tough but fun. The lecture videos were produced a couple of year ago. thanks to the efforts of DeepMind and OpenAI folks, quite a few foundational theories / assumptions in our lectures are no longer sufficient nor accurate enough. They have just added a new assignment with OpenAI and will be updating the readings to reflect the fast changing industry. Lectures are math heavy but you do learn a lot. Taking this in summer might be a bad idea, unless weekly assignment and cramming an exam within a week is your ideal summer. TAs office hours are not really helpful (except the hands-on sessions) and profs are no-shows; you will need discipline and motivation to finish the course and be active in reaching out to TA and Piazza for help. This was a extremely difficult class when I took it. The fact that they did not truncate it for summer makes it even more difficult, but I am glad they chose to do it that way. \n\nNow, project two was a real killer. There was very minimal guidance and connection to class material. It was drop dead hard. Though the TA stepped in and helped a week before it's due, it was too late for many of us. \n\nProject 3 was hard too, but more manageable. \n\nThe only saving grace was that grading was somewhat lenient. I ended up overkill the class, but I was so stressed out most of the time mainly because of project 2. But at the end I learned a lot, so it was worth it. Excellent course with interesting topics. The TA's were amazing; highly responsive and genuinely trying to improve the class. There was very little interaction with the professor but the ta's made up for it in my opinion. The lectures were interesting and well-done. Grade based on both homeworks and projects, as well as a final; the homeworks and projects were interesting and effective teaching tools, but didn't always correspond to well to the lectures. Time commitment was fairly high especially for a summer class, but I'd highly recommend it to anyone who is interested in the field. Very deceptive course. Most of the materials for the course is from academic papers. The lectures do no justice in explaining the papers or setting the students up for success. The poor jokes of the professors make it even worse. The 3 projects in this course are mostly based on academic papers, which you have to read and replicated without much help. The TAs were kind enough to help on few of the homeworks and projects. Extremely hard final. I did take this course after taking ML (scoring an A in it). Personally I learned more from ML4T than ML and RL combined. Though the content taught in this course is interesting, there is not much practical applications possible (not a popular field at the moment). It would be better to take BD4H instead of RL as it will give you some hands-on experience for working in the industry. Great course. TA group is the best I've had after 3 semesters. \nLectures average 1-2 hours a week. 2 weeks were high at 3. 5ish\nPapers are ~25 in total. Most are 6-7 pages. Some are more. None are less. It's a lot, but not that bad compared to some other courses (looking at you AOS... ). They connect very well to the lectures. \n\n3 projects (15% each). 6 home works (5% each). 1 final (25%). \n\nIt's a ton of work for the summer. It's a grind with something due every week. Even if you're ahead you'll get behind with the projects. You should definitely take ML before this. If not, you're in for a party. Highly recommend folks getting familiar with Barto and Sutton's book (it's free on Sutton's website), David Silver's RL lectures (YouTube), and numpy (vectorization for the win). \n\nHW 1-4, Project 1-2, and the final are fair and very related to the content (project 2 is awesome). HW 5-6 and Project 3 need to be reworked. HWs 5-6 are relatively easy, but are 'eh. ' Project 3 is a massive step up in complexity with little resources available if you don't 'get it. ' They were such an adrenaline kill after how great project 2 was. It sounds like the TAs are going to review and revamp. \n\nIsbell was absent, which was not a surprise due to past reviews. He was on piazza day 1, and that's essentially it. He missed the one office hour he was going to attend due to a storm. \n\nTAs were able to get Michael Littman on a special office hours, which was awesome. Last semester they got Richard Sutton. Littman is a genius, and it was an awesome experience. \n\nOne note, after reading some negative reviews, Michael Littman is a professor at Brown. He doesn't have access to GA Tech systems (Piazza). Fine to down vote the course for Isbell not showing up, but it's ignorant to down vote for a Browns prof not being active at GA Tech. \n\nTAs are knowledgeable. They will answer your questions. They sometimes need to review specifics (if referencing a paper). You will not find a better group of TAs. This was a fantastic class; a great follow-up to Machine Learning (7641). Dr. Isbell and Dr. Littman return to dive into the details of the field of reinforcement learning in a fun and engaging way. Fall 2016 upgraded the difficulty level of this class both homework-wise and project-wise, in addition to adding a final exam. There was a homework every week or two that usually took under an hour to complete, and three projects throughout the semester that took 40+ hours to complete. Two of those projects were replicating paper results, and the other project was actually implementing a RL algorithm to play a video game to land a spaceship. This was a pretty cool class and definitely worth taking, but don't expect it to be any easier than ML. I earned my first B in this course but I can rightly kick myself for it. When I recommend starting every project ASAP, please listen to avoid my mistakes. You might ace all the homeworks like me but they mean little (only 30% of your grade). The projects are worth the most (45%) and they take a LOOONG time to get right. First, it takes a long time to understand how to implement them. Then you have to test them, which being machine learning, also takes a long time. Then once you know they work, you need to run them for long periods of time to get the results you need for the analysis. Please don't wait. The analysis isn't bad for each project (only 5 pages each) but obviously you want your code to work properly first. I hate the fact that they didn't release them all at once. I really would have liked working ahead. They only give you 2 weeks for each project and that's a shame. Overall, the course was incredibly interesting and well taught. The TA's were very responsive and helpful. This was a great class but of the 6 courses I've taken so far, this one penalizes you the most for waiting on projects. Just don't do it. I loved this course. The lectures were great - informative and engaging and the projects, which were rarely super hard, helped give you some subtle insights into the course content that I don't think you could have gotten any other way. I wish there were more courses on this... I'd take them in a heartbeat. The content was very interesting and the TAs were very accommodating. \nThe weekly projects we very light compared to the final project, but overall, the course is great. There were a lot of reading materials, but I learned a lot about Reinforcement learning! I did my undergrad in Computer Science. I never experienced a course as rigor as RL. TA's were great and assignments, Home Works were really challenging. For Projects we are expected to understand research Papers and implement some sections. In that process you will learn a lot and get good understanding of the Subject. \nFor Project -1 we implemented a Sutton Paper on TD(lamdba). Taught in TD and friends\nProject -2 A paper published by Google Brain on DQN (We solved a problem in openAI using this paper. ). Taught in Function Approximation Lectures \nProject -3 - Markov Games (Q-learning, friend and foe Q-learning, Correlated Equilibrium ). Taught in last part of Markov Games and Game Theory. \n\nI disagree with some of the post that says there is no link between course content and projects. \n\nIsbell and Michel did a great job in making the course content simpler to understand. \n\nKudos to TA's for guest lecture with Richard Sutton (Father of Modern RL). This was a great class - the return of pair lecturing with Smoov & Curly, an interesting subject, and a far lower workload than ML (as advertised). The big thing to keep in mind is that there is an easy way and a hard way to complete the assignments. If you find yourself spending more than a few hours on a problem, you're doing it the hard way. Go back to the lectures & the assigned readings, and think about how you would solve the problem without any RL tools. This class is deceptive.  The homeworks (6) are disproportionately easy, but the projects (at least two of them) require some advanced skills -- dissecting research papers by academic leaders in the field.  Probably best to be taken in second year after you've developed some organizational discipline and should definitely be taken with a lighter-workload partner class or as a solo class.  The final is extremely challenging.  Be prepared to do a LOT of outside reading, be involved in Slack and on Piazza, and you will learn a lot. This course is a survey on Reinforcement Learning and Decision Making techniques. There are weekly assigned lectures and readings (papers provided by the instructor). \n\nOn Summer, an assignment was due every week, I'd say their goal was assessing that the students understood concepts explained on the lectures. You do not submit code, only results, so you could solve them with Java, Python, Excel, pencil and paper. There's an auto grader available! Some assignments were more interesting than others. \n\nIn Summer we only had one final exam (25 true/false questions, and you had to explain your answer). It was hard to cram all that information in one week (assuming you started to study once you submitted the final project). It seems that in full semesters, a midterm was also part of the evaluation, that would have made the load more manageable. \n\nFor both projects assigned (midterm and final project) we had to replicate the results of published RL papers. We had to explain about our implementation, the assumptions we made, the difficulties we had, etc. You can use any language/library since code was not submitted, only the report and a 3-minute video presentation. You learn a LOT doing that. Start working as soon as you can in the projects! \n\nAt the end, the grading was generous, since people who were on the C (70-80%) or B (80-90%) brackets, ended up earning the upper grade (B, A, respectively)\n\nI highly recommend this course if you are interested on the topic. You can go as deep as you want in the material. The resources shared by the instructor are gold, and will give you many ideas for future work or research.  Loved this course! Miguel (head TA) was awesome and held additional hands on sessions to help us with the projects and assignments. Fellow students were also very engaged and willing to walk each other through examples to better understand the concepts. The course was condensed for the summer and we only had a week to do the projects. I had to take days off from work for the last two projects and pulled an all-nighter to get the second one done. For the second project, you pretty much have to learn and apply DQN (not covered in the lectures or the readings at all) in order to get it to work. It was worth it though. This class prepares you to follow recent developments in reinforcement learning and is by far the most interesting class I have ever taken. I loved the subject matter more than anything else. It's a really fascinating field. Very little participation by Prof Isbell, but the TAs were incredibly enthusiastic, involved, and had considerable knowledge of the subject. \n\nThe videos are well done. They're a bit chatty though as I learned going back through them for the final trying to take notes. I liked the blend of theoretical and practical, but if math isn't your think, the theoretical part is pretty dense. \n\nThe workload is quite high in the summer. After the first week, there's a homework (6 of them), project (3), or test (the final) due every Monday. I. e., [hw, hw, project]*3 + final. There are probably 20+ hours of lectures and 20+ papers. I don't think anyone really read all the papers in depth and most fell behind on the videos. We were always struggling to keep up with graded assignments. The second project (lunar lander) also required reading unassigned material (almost everyone who was successful used DQN, which wasn't explicitly covered). You should aim to get the two homeworks done in a week and leave yourself two weeks for the project, if you're taking it in the summer. The extra weeks in a regular semester would make a very big difference in the pace. You could do one hw per week and have two weeks for the project. \n\nPersonally, I'd prefer to see the course a little less project-oriented and split the final into a mid-term plus a final. That would force folks to stay up with the material and keep it up from being a semester of projects followed by a week of cramming. You could remove a project or make them a little easier. For instance, I would provide the soccer environment for project 3 and maybe give hints on some hyperparameters for the lunar lander project -- aspects of the projects that don't really have pedagogical value. \n\nIt's a lot of work, but you'll learn a lot and feel like you accomplished something. The course is very good, however the hw/assignments are not good at all. The hw/assignments did not relate to what we learned. \n\nOn the other hand, the lectures were amazing. I learn a lot ( theoretically ). If there were more application related hw/assignments it would have been perfect.  In continuation to my below post..... \n\nMiguel and Tim rocked throughout undoubtedly!! Apart from that.... \n\nThings that I did not like about TAs is that they did not play any role in guiding the folks into the right direction or helping them out in understanding the concepts better. \nOffice Hours were not help at all and, I gained nothing from those, they laughed at queries asked by people and what not, did not discuss the prior submitted assignments as if the folks who did not get those right, will get to know about their mistakes eventually (didn't allow us to share anything on piazza regarding submitted assignments post deadlines as well). At one point I really thought, if you know it then you got it else drop the class and that was the worst feeling ever. \n\nNote: I have seen TAs doing better and great job in order to help folks and in making understand assignments better in other courses e. g. CV (King Pedro rocks!!). \nFelt like Miguel, Tim and Chris were the only TAs who were proactively participating and other TAs were nothing more than project graders. \n\nI read somewhere in below comments that TAs were as busy as we were but I don't understand what made TAs busier than us as Hws were autograded and only thing that TAs were busy with Project grades (as well finals and HW5) and just one office hour per week (ignoring the 2-3 hands on session given by Miguel/Chris). Moreover, that was part of their job to support all these activities. \n\n6 TAs joining same Office hour per week, could not understand that thing. I think that was waste of time for most of them as mostly Miguel and Tim drove those oHs and they could have divided the hands on and query sessions among themselves and could have provided more value to the folks like me. \n\nIn the end, I am satisfied with what I learned from this course but if it were not for my peers, I would not have made it this far in this course. \n\nHappy Reinforcement Learning!! For me, this was neither an \"easy\" nor a CCA-like (see the reviews if you don't know) class. It was somewhat challenging, but managable. I took it over the summer and was disappointed that Dr. Isbell was not very interactive in the class... the TAs ran the show daily/weekly. They were extremely helpful and responsive (above average). As always, start everything early. There were two projects and a single (final) exam over the summer, but I understand the 'regular' semesters have had a 3rd project and an extra exam. New developments for the summer: The class was language agnostic and you didn't have to submit code... just auto-graded for the weekly assignments. No code submission for the projects... just a report and video presentation. Some of my grades on the projects and exam were definitely not that great, but overall grading was fair given the class changes and compressed summer schedule. I'd say it's a must-take if you're interested in RL. There's a ton of reading, though, and the lectures are fairly dense... not a class you can run the videos on 2x the first time through! This was my first course, hence, I don't have any reference to compare with. I really liked the course and has definitely given me knowledge required to do further research in application of RL. The most difficult part was learning Game theory. The lectures are really informative. I liked the conversational style of teaching. You may also have to listen David Silver's lecture to get a better understanding of certain topics. Piazza and Slack were really active. If it was not for slack and piazza, I don't know if I would have completed the last project. The final exam was really difficult. Overall i really enjoyed the course and I am all eager to apply RL at work. Professor Isbell and Littman did another excellent job with this course. The lectures were extremely engaging and the material was very interesting. In my opinion this course is a good bit easier than Machine Learning. The projects were very effective (the second one is quite challenging). For the summer semester there was only a final (25 T/F) which was not too difficult. \n\nThe reason I only \"Liked\" this course is because some of the assignments are fairly weak. While I appreciated not having to spend excessive amounts of time on them (a few took approximately 30 minutes), they did not always relate back clearly to the course material. However even with that, I would highly recommend this course.  Great course with interesting and cutting edge material. Professors are passionate about material in the lectures and it shows, but the lectures can be hard to follow as the are very math and theory heavy. Too many readings, which do not necessarily support the lectures of hw/projects at the time. As others have said, HW assignments are not that useful to understanding the material. 2 of the 3 projects are reproducing published research results, while the other is applying what you've learned to an OpenAI environment, which to me was much more interesting and useful. I would like to see more applied assignments like project 2. \n\nA little too much material to cover in a summer semester. Projects 2 and 3 take several weeks at the least, but in summer something is due every week. HWs seem like an annoyance to get past to get started on the projects (start early!) \n\nTAs this semester were great, very active on piazza and recommended or provided extra materials for help. Great course. Cutting edge concepts. Literally piazza and TA's were godsend. \n\nWhile I liked the conversational video lectures, they were really hard to correlate them to the home works and projects. Once I reached project 2, I literally stopped watching lecture videos and started youtube-ing Peter Norvig classes on Reinforcement learning. \n\nFinals were brutal. Honestly I was clueless about at least 5 questions, like literally no idea what they were talking about. I found the workload to be pretty high in Reinforcement Learning @ summer. I took ML last semester. and I had one Master of Mathematics. I took 30+ and almost 40 hours for project 2 and project 3. You need run some jobs. and it may take a one day, sometimes two days. Also, you need better computer with GPU. Please buy a computer with GPU. It really helps a lots. \n\nAlso there are lots of papers need read. Some video I did not understand, I watched David Silver (youtube version RL Course by David Silver) or Andrew Ng (youtube version from lesson 16 to lesson 20) first. then watch video again. it helps a lot. But for summer, it was short time. and if you had full time job. I think you need sleep at 2:00 or 3:00 AM for paper and video. and get up at 7:00 AM for job from Monday to Friday. and no weekends, because you need finish your HWs or Projects every weeks. So i think no life if you plan to take this course at summer. BTW, TA is best. helpful and very great. This is a great course with a lot of good theory, but is still very abstract. A few more practical projects/HW could be beneficial for the course. It's language agnostic, which is great (Java and Python most common - but beware of buggy RL packages!). Some assignments can even be done with pen & paper - it's pure math and probability. \n\nThe two course projects were the places where you actually learn a ton! You read academic papers thoroughly and try to reproduce results from them. So, you're reading the cutting edge research that is being published. I wish there were more such courses. But some people may not like this overly academic scenario. It is likely that subsequent semesters will have more paper-reproduction projects and less MS-style homework assignments. \n\nFinally, this course doesn't have as much instructor involvement as ML does. But our TAs Miguel and Tim were very responsive.  Good course, that delves into one part from 7641 deep. Many fun assignments, especially the one that uses Open AI gym. Lots of paper to read that gives a pretty good insight into the workings are reinforcement learning. Overall a fun, medium difficulty level course For context, this was my second class after ML4T, so I had not taken ML.\n\nThe instruction format is Udacity lectures plus many many research papers to read. The lecturers (Isbell and Littman) are very engaging but the material itself can be quite dense. And the research papers are tough to get through if you are not used to reading academic CS papers. There are also weekly office hours with the TAs which were very helpful. The TAs were very accessible, hosting office hours and appearing in the Slack group.\n\nThe structure of the class is 2 homework assignments with a week to complete, then a project with 2 weeks to complete, for a total of 6 HW and 3 projects. There was an opportunity for an extra 10 points on one HW assignment. The assignments are released in 3 batches, so you can work ahead to some degree but couldn't finish the semester all at once.\n\nThe homework was challenging conceptually at times but usually did not require much code. I thought all of the homeworks did a good job of reinforcing concepts from the lectures. All 6 assignments were submitted through a web app that gave immediate feedback on your results. Each question on the assignments had a 10 submission limit to prevent brute-forcing solutions.\n\nTwo projects involved reproducing results from research papers, and one involved training an agent for an OpenAI Gym environment, using an algorithm from a research paper(s) of your choice. The deliverable was the code on Github and a 5-page report on your results. \n\nI did not enjoy the projects based on reproducing papers and didn't find the topics very interesting. The OpenAI project was quite interesting but very time-consuming. Training time for the agent could take many hours so iterating on a concept was difficult.\n\nOverall I thought the course was very well done even though I didn't enjoy it as much as I thought I would. It was more theory and less practice than I would have liked, but that's a matter of personal preference. I found the workload to be pretty high in RL, not unexpected for this much graduate-level content in a summer session, but I did find it to be enjoyable. That said, I haven't taken the final yet, and I'm in the period that I dreaded all summer knowing that I didn't have enough time to watch many lectures or read papers outside of what was required for the homeworks and projects. Unfortunately, right now, I'm cramming facts for the exam (25 T/F with \"twitter style\" answer justifications). During the summer session you have something due every week, with 2 homeworks and 1 project released simultaneously every 3 weeks and I found myself not having much time to spend on anything else other than getting those done. I did the best I could to get the homework done as early as possible to maximize time spent on the projects. \n\nI disagree with criticisms of the TAs this summer. These guys were great, worked hard, and likely felt the pressure of the compressed schedule more than we did, especially since the profs were absent - the TAs completely ran the course (and did a pretty good job IMO). \n\nThe only ML background I had coming in was ML4T and I didn't feel that I needed any more than that as preparation. Its a good class, if you take it in the summer, know that it will be a lot of work. I spent a lot of late nights/early mornings and missed a couple of family events as a result of taking it, but have no regrets Great course overall. \n\nLectures: Not bad, but get seriously math intensive by the middle and they don't really tie back to the projects that well. I skipped the last few to prioritize other things. There are also ~30 readings you should cover, and the textbook that you'll definitely need to refer to. \n\nAssignments: There are a bunch of assignments plus 3 big projects. The assignments are generally very easy, and only sometimes require programming. The projects are huge time sinks. I really enjoyed the OpenAI Gym assignment as I used it as an opportunity to learn deep Q networks (not covered in the class) and thus had fun with the project. I still burned at least 60 hours on it though. The other projects involved implementing old RL papers, and I didn't enjoy these very much. \n\nExams: Just the final. Pretty hard to study for as there's a lot of material covered in the course. \n\nTeaching staff: Professors are completely AFK, but TAs do a pretty good job keeping the class on track. Office hours are fun though of questionable value beyond entertainment. You'll have to figure out most things on your own. \n\nGrading: Fair. I put in a lot of effort, learned more than I have in any class before, and came out with an A. I could have spent much less time and still gotten at least a B. Positive:\nGreat material\nGreat TAs\nGreat \"extra\" videos to help explain parts of the projects\nThe autograder site\n\nNegatives:\nWAY too much workload for summer. \n\n\nThis was by far the heaviest class I have taken so far. Starting from week 4 through the end of the semester I didn't have a single night off from either reading papers, watching lectures, doing the homework, or completing a project. \nThe class tried to cram the entire semester (16 weeks) into the shortened summer semester (12) weeks. We had our assignments released in sets of 3 with 2 homeworks and 1 project. The projects were longer and required a write up. The homeworks were typically turned in online and we would get instant feedback. That was awesome. The course is pretty challenging but doable with good amount of effort. Through the semester, I had to constantly work on projects/hws and on top of reading papers but it's definitely worth the effort and you realized how much you learned after finishing the course and there is a lot more. I personally felt project and hw had enough time but it was too short to prepare for final for summer. You will be very busy completing the project and had only 1 week to cover all the materials covered through the semester. The projects were the crown jewels of the course. They were most of all fun, exciting, lengthy, full of pitfalls, horrifying, and on top of that you do learn quite a lot about the subject matter (as well as a lot of other subject matters outside of the purview of the course). Paraphrasing another classmate in the course - \"I've only cried a handful of times in my adult life, Project 2 is one of those times.\"\n\nTAs were a great team and put together a lot of excellent supplemental discussions and materials for the course.\n\nStick with Python, Linux, and get a start on projects and homeworks the very moment that they are assigned. The homeworks and projects are interweaved with each other in some sensible way. If you print out all the required paper readings, you'll find they are almost 2\" thick. \n\nThe final exam required a very large breadth and depth of knowledge of everything presented in the semester.\n\nI've previously taken only ML4T before taking RL, and I thought it was sufficient. The class concept is very cool. Don't kid yourself though, this is a tough course. Extremely fast-paced with heavy reading of 20-50 pages of technical journal articles or the instructor's PhD Thesis chapters every week. In addition, there is a project or homework due almost every week. Sometimes you get two weeks to complete something and in that case, you really need it. Many of the applications are reproducing journal articles' suggested methods and comparing results. Better know RLPY or the Java Burlap before you take the class or you'll start out behind. Best if you have had some form of linear programming before. This is not an easy course unless you work in the field. I do not. I ended up dropping it. A fascinating class. You get to dive deep into reinforcement learning and actually reproduce important research papers in that domain. In particular, one of the projects involves deep reinforcement learning! I actually went on to reproduce some of DeepMind's recent papers on deep learning for Atari games, something which I would never have guessed I could do before this class.\n\nThe video material is quite engaging, but I found that it left some things fairly vague (for instance, I don't think it presents Q-Learning in a very clear way, though you definitely get to understand it through the assignments). Still, it covers a lot of advanced RL which is very exciting. This course covered a lot of information, and I thought the lectures were excellent at inspiring curiosity and giving a high-level overview. The readings lined up very well with the lectures (it's wonderful to be able to read in more detail exactly what was presented at a high level), and it gave good exposure to research in this area. I thought the two projects were meaningful too - they left the implementation up to us, but required that we intimately understood the details of particular papers. \n\nHowever, I thought the assignments were sometimes a bit lacking in relevance and rigor, and the feedback and involvement left a bit to be desired. It's difficult to have such a breadth of abstract information presented without much concrete practice to back it up.  The material is great (very interesting and challenging) and the professors are excellent. Taking this in the summer can be a bit overwhelming; be prepared for a significant time commitment. I always managed to get the work done on time but I usually finish assignments early and noted many students struggled to keep up. \n\nThe good: I learned a lot and was challenged. Professor Littman made an appearance at the end, which was wonderful and appreciated. Project 2 was a big hit with the students. \n\nThe bad: The Professor wasn't (visibly to the students) involved in the class. It would have been good to have had some interactive sessions with him or even some piazza participation. \n\nThe mixed: The TAs ran weekly office hours. I felt those started off well and 2 of the TAs did some hands on sessions, which were great. However, they lacked consistency and did not engage in depth with the students about theoretical concepts, which would have been very useful. Questions were often ignored or not completely answered. It's great to have so many papers and resources to absorb but to have a discussion about it and how the student/TA interpreted the material would have facilitated learning even further. The interaction with fellow students in the class on slack helped fill in the gaps but it would have been good to have had the TAs (or the Professor) helping to drive discussion/learning a little more. I haven't taken machine learning course, but directly this RL course. I have taken HPC, HPCA and database course and the declared as computer system specialization. To be honest, for me the homework and projects are not very hard, the most time-consuming part and most unexpected part is the report part. No matter how many efforts you put on the report, the score seems just a random number from 80-90 for me. It pretty frustrated me sometimes as in most computer system courses, if you got the code right, you can almost get 100% score.  Overall, not a bad course, RL is very interesting although the lecture is elusive. The grade is generous. I got overall 84.5% but still an A.  I found the workload to be pretty high in Reinforcement Learning and one of the reason could be the summer semester, but I did love this course and could not have asked anything better than this. I specially loved the Lunar Lander Open AI gym project, it was great to watch code to land the lander. \n\nHWs: I did find HWs easy but were quite tricky at the same time, and the submission & instant grades for the home works made it super awesome. \n\nProjects: As mentioned by TA's before hand, I did also find P1<P2<P3 in increasing difficulty level. Recreating the results of the research papers was quite difficult for me as missing any point in the paper or making wrong assumption made it really difficult to replicate the results. Apart from that I loved the projects and now, after this course, I got bit comfortable reading the research papers. \n\nTo be continued.... (see above comment - ran out of space) Weekly assignments were easily accomplished with a few lines of code in Python without having to think too much in terms of MDPs. The final project required many more hours of reading and coding than the first.  Good course overall !!! \nProjects are interesting... you get to know about latest research - hard work but you learn a ton.. Get grip over some algebra - it will only help.. \nOne pro tip - focus on the report you submit - even if you are not able to accomplish end goal - just put in arguments about the subject matter and what all you tried.. you will be rewarded for your efforts and reports and not about the actual result - makes total sense - but something I was not aware of.. The RL problem: How does an autonomous system learn from experience to achieve approximately optimal behavior without necessarily having any knowledge of its world dynamics or even what its goal is? You start with very small toy problems that can be solved directly using dynamic programming. From there, you gradually introduce the complications of the real world - infinite state spaces, stochastic reward functions, the inclusion of other agents that may be cooperative, adversarial, or indifferent, all the while learning of research from the past few decades resulting in tractable ways to induce human-or-better levels of performance in domains such as game play, autonomous drone flight, logistics scheduling, teaching robots to walk. \n\nThe idea is absurdly simple. Start with effectively random prediction of how well particular primitive actions might work and successively refine those predictions from whatever feedback you eventually receive, which may or may not be accurate feedback. Somehow this works, and this course gives you a mix of the mathematics to prove when and why it works, why it might work in practice even if you can't prove it works, and some of the practical research leading to hacks and tricks that make it work faster, better, or both. \n\nThe pros are the lectures and readings are engaging, insightful, among the best you'll get in this program. The projects, reproducing published research, give you the valuable real-world experience of just hacking away and making educated guesses until success magically happens. Then you have to figure out how it happened and be able to explain it. \n\nThe con is the weekly homeworks are too easy, simple algebra problems that might take a few lines of code but sometimes you can just do in your head, none of which take more than a couple minutes, basically free points. That time could be devoted to more projects. Function approximation (deep RL) especially is critical and hot and in the headlines and we barely covered it.  This was my first course in OMSCS (along with CSE6242) so I don't have much to compare it to.  The course was nicely structured, with coursework relatively spread out. 1 week HW due, 1 week HW due, 2 weeks for completion of a project. Homework assignments were relatively easy, projects should be started well in advance.  Reading external material helps a lot, and David Silver's lectures felt more detailed for the intro to the course. Recommendation: be intimate with Python; the later projects are much easier to complete in it. All around, the TAs were very helpful in office hours, and Slack becomes your best friend. I learned a ton, but definitely had to put the man hours in. Also, the final was rough... average was in the 50s. Overall, I really enjoyed the material, but completing the class (at least for the summer) was exhausting. The course requires a fast and consistent pace to keep up with the homework assignments and projects; I would not advise having any vacation or work responsibilities that take you away from the course for more than 2-3 days at a time. It definitely seems like this course has gotten quite a bit harder over time, as the workload indicated by the early reviews were quite lower than what I experienced. I would put this one and ML (7641) at roughly the same required time commitment, though RL is more focused on implementation and achieving a certain result, while ML is more focused on analysis and writing. \n\nPros:\n--Interesting material that really covers the seminal developments of the field\n--TAs do a strong job managing the class\n--The fastest grading I've experienced in the OMSCS program (tied with ML)\n--The autograder for the homework assignments was helpful. (You'll want to max out the points on homework to offset the inevitable point losses on the projects and final exam. )\n--The projects are interesting and challenging, with the second one being the best. \n\nCons:\n--No interaction at all with the professor\n--The style of the lectures isn't concise and sometimes sacrifices the content for entertainment. Tighter scripting would be helpful. (Many others, though, love the style. )\n--The oral presentations for the projects seem pointless. I never received any feedback on them, and they seemed to have no impact on my grades. \n--At least for the summer, there is a short window (less than a week) after finishing the last project to study for the final, which covers the whole semester. \n--Feedback isn't very detailed, and the specific point deductions for the projects and final exam are not revealed. \n--Just keeping up with the homework and projects can leave little time for reading the assigned papers This was my first OMSCS class. \nOverall, I think it's a good class. I learned a lot and certainly think I have a foundation for reinforcement learning now.  I had to do all sorts of outside research, but I think that is expected.  The T.A's did a great job, shoutout to all of them (especially Chris Serrano for his slack help during P2) they were very supportive and active on piazza and slack.\n\nI have a background in ML so that was helpful (especially for P2, where you need to basically use DL).  The videos are mostly good, but I highly recommend people to watch David Silver series.  It seriously helps for the first 4 HW's and 2 projects.  I would actually watch him first, then Charles and Michael.  They are very deep and abstract, while he is really concrete and practical.  I think it's better to have the \"normal\" stuff first before you get blasted into space and time.\n\nMy main issue was with the lectures actually, it's just very theoretical material and I could not always follow.  Watching at 1.3x speed is a good idea to get broad strokes, especially if you don't love proofs.\n\nThe final is pretty hard -  make sure to study for it.\n\nFinally, I did well on the projects, but I somehow unlocked what the T.A's did not spell out. Which is that you need to write your report about what the project means, not what you did. Which may not be obvious, because doing the actual work involved a lot of head-banging and late nights, so by the time you are done with the work you may forget to think about why you did it at all.\n\n\n If you liked ML, then I highly recommend this course. Isbell and Littman are a great team and produce excellent lectures. A good breadth of material is covered, and it leaves you with enough leads and a strong enough foundation to do your own exploration after the course is over. It left me wishing that there was a more advanced offering for RL in this program. \n\nThe work portion of this course consisted of eight assignments and two projects (for the summer semester; there are three in the normal offering, I think). The assignments were kind of hit-or-miss. There were a few that were excellent and engaging, and there were a few that were a bit too easy or disconnected from the material. Additionally, there were a few problems with the autograder site, either in terms of what it would accept or where there was a marked disconnect between what the assignment description on the site said versus what was actually expected. Just be sure to check the descriptions on Piazza and attempt submission early. \n\nThe projects were reproductions of academic papers accompanied by a short written report and a brief video. The projects were interesting, but not as open-ended or as tough as ML. Make sure that you have some ability to create a video (e. g. slides and voice-over) and don't leave it for the last day.  The class was interesting and delved into reinforcement learning much more than the Machine Learning class. The video lectures were engaging and explained concepts well. Reproducing results from papers was a new exercise for me and helped increase my understanding of the difficulties of doing that when the paper publisher doesn't provide enough detail. I was a bit disappointed that Prof. Isbell wasn't as active during the class as he had been in Machine Learning. This was an interesting course where you get to learn about how machines/agents can learn about their environments and learn to interact with the environment using different learning techniques. The course was very challenging, but part of the challenge is tied into taking the course in the summer. With 6 homeworks, 3 projects and a final added on top of 20+ hours of lecture and 25+ papers to read, it's a lot of content for an 11 week (really, nothing much is available the first week, so 10-week) semester. \n\nThe TA group was top-notch - the best group of TA's I've encountered. \n\nThe projects were challenging, but fulfilling to get them done, similar to ML in that respect, but definitely a lot more hands-on. Also, you are expected to both write a short (3-page) paper and complete a short (5 minute) video presentation for each project. \n\nThe homeworks can be hit or miss. Of the 6, 3 were somewhat time consuming, and 1 of the 3 was extremely time consuming, however that may change in future semesters as they have been adjusting the HW to move towards a more auto-graded style. 5/6 were auto-graded and the one that was not was the extremely time consuming one. \n\nThe final exam is challenging, but fair, in it's current format. This is speculation, but given the expected 2 weeks to study in a normal semester, it would likely have felt a bit more manageable to review all of the content. \n\nOverall, I thought the course was worthwhile, but it is definitely not one to take lightly with regards to workload or effort required. \n\n3 programming projects worth 50%. You need to read 3 academic papers and try to reproduce the figures. No more guidance, paper hard to read.  Exam is 50% and very difficult to understand the requirement.  If you want to take it, you better prepare with a strong heart and large time commitment. There are some changes this semester.  The professor is not engaging and the TAs are very reluctant to give you any really useful guidance or hint. \n\nSome students claimed it is fulfilling to learn RL, I dont disagree. But most of us end up watching youtube/google articles to learn the material. Yes, RL is fun, but not fun by taking this course to learn it.\n\nIf you look at the grade trend shown on the right, you can see the pattern. The course is spoiled by the popularity of the attendance and news article about AI Exellent course. There are many lectures to get through, and they get quite mathematical at times. But the homework assignments and projects are mostly practical-oriented. All the assignments really helped me test and cement my understanding of the theory. The course readings are all papers on reinforcement learning, many by the lecturers themselves, and I found there were too many to all read thoroughly. After taking this course I feel comfortable reading RL papers, and think I could write an interesting paper on the subject myself when I have some time.", 
    "CS-7646": " ML4T is my first course of OMSCS. It is overall a great introductive course to machine learning and stocks. ML4T consists of three mini-courses: (1)numpy and pandas, (2)hedge fund and stocks, and (3)basic ML methods (regression, kNN, decision tree, ensemble models) and reinforcement learning (Q-learning). \n\nStudents may find certain sections easy or hard. For me, because I have already some experience on Python and ML but have no finance background at all, the second part is difficult for me. But as long as you watch the videos and do some reading, there is no problem. If you have no background in finance or ML at all, ML4T is a good choice for an introduction. \n\nThus, I would recommend taking ML4T before ML7641 because ML4T doesn't require a deep understanding of ML or math. It can help you get familiar with numpy and pandas, have a big picture about ML and RL, and understand its applications in stocks. If you want to go further, you can learn more in ML7641 and RL7642. \n\nThe course is overall well scheduled. I can prepare things ahead and avoid big conflicts with my full-time job. But if you want to start an assignment very early (2 weeks ahead), be aware that the instructor will change the rubric a week (sometimes 3 or 4 days) before the deadline of the assignment. These changes would not ruin the framework or design of your codes. But you need to use your codes on different data and generate different results or graphs according to the new rubric. I think he did this to avoid plagiarism from previous assignments. \n\nThe grading of assignments is exactly based on the rubric. The rubric is overall clear to me. But you do need to spend some time to understand the rubric correctly. For me, Piazza is a great resource. The instructor, TAs and students are very responsive on Piazza. Yes, there are a LOT of posts on Piazza, and a lot of duplicate posts. But it doesn't bother me. It \"reinforces\" me to learn better by looking at other folks' questions. This is an awesome course if you want to learn about Trading concepts. One-third of the course focuses on teaching the analysis in Python using numpy and pandas. This is by far the easiest class I've taken in OMSCS. \n\nThe course is mostly about Pandas/Python, then about the stock market and at the end a bit of Machine Learning. \n\nI would suggest this as a good course to learn Python and get an intro to Machine Learning. But the ML part is a bit disappointing mainly because they take sooo long to get to it. The class would be better if they compressed the first two units and focused on the ML. \n\nGreat class to take with other classes. Not much background needed.  Fun projects; entertaining lectures. Project difficulty seems to depend a lot on your coding skills; auto-grader scripts are provided and take out a lot of the guesswork around requirements (if the grading scripts work, your code probably works well enough to pass). Exams are pretty straightforward and don't rely on memorizing minutiae Awesome course!!! Simply loved it.. \n\nI have already done ML and RL. Also, I have had interest in stocks and was familiar with many technical indicators - I have cleared CFA level 1 few years back. So take my feedback and number of hours with a grain of salt.\n\nThis class introduced a totally new perspective to Technical Trading. It was a breeze - its not too tough to get an A. \n\nAt the same time, there is no scope for error - you miss one assignment - you are done.. Just stay focused and calm - you will do good. This was my first class in the program and I enjoyed it. I'd recommend it as a first class for anyone.\n\nMost assignments took me around 3-5 hours. There were two larger assignments with writing components which took me around 20 hours each. \n\nThe class was well run overall although the assignments were usually not finalized until a week (sometimes less) before they were due. This is not a course that can be \"front-loaded.\"\n\nA 90% is required to get an A, but since the assignments are mostly auto-graded and the assignments have clear grading requirements (like 10% for graphs, 20% for code, etc) 90% is very achievable. I liked the material for this course.  It was exciting at times.  Unfortunately, the course is poorly run.  We used reddit instead of Piazza for some reason and it seemed that no one's questions ever got answered - and if they did, they were way too late.  Assignments weren't \"finalized\" until quite late and even then, you couldn't submit them because the no one thought to add the assignment to t-square.  Exams were a joke: trick questions, rote memorization of terms/formulas, questions about python/pandas output - even questions about plot points of a vaguely-topical movie.  I'd still take this class, but I would prepare yourself for this sloppiness.  I would also skip on buying the required textbooks: not useful for the course itself, IMO. I came into this class with little or no background in Python, Machine Learning, or finance. There was certainly a learning curve in all three areas but the course did a good job of introducing the material so that even a newbie like me could catch on. The lectures on Udacity are well done. The assignments are solid and teach you a lot (be careful, often they build on each other so you can't just skip one and think you'll be fine). \n\nI had two issues with the course - 1) assignments weren't finalized until a week (sometimes less) before the due date. The professor would say \"you can use the old version to get started, not much will change\" but both times I did that I had a few hours of rework once the final version was released. I am not sure why a course that's as mature as ML4T can't get assignments finalized sooner, my three previous classes released everything well before the due dates. 2) Reddit was not a good forum for the course. My guess is that anonymity was a factor, some students were downright rude to one another. Other students asked really simple questions that were answered clearly in the assignment or syllabus. I wonder if having your real name tied to the post would have reduced some of that. Also, the threads got too long. I had two questions that never got answered (slack was helpful when that happened). Other times replies would go on the wrong thread and it was confusing to read. I have nothing against reddit, but it didn't seem a good fit for this course. \n\nAs for workload, some weeks I put in only a few hours, other weeks were more like 20 hours when a project was due. I was learning Python while doing the projects, so that may be higher than normal. Agreed with other comments that the midterm was tough to finish (I finished with maybe a minute left, and I'm normally a great test-taker). I finished the final with plenty of time, but several questions were ridiculously unconnected to course content. \n\nFinally, the tone of the class was a bit off to me. Some of the professor's responses on reddit were rude. I've taken other classes in the program where I felt like the TAs and professor really cared about the students and their learning. In this class I didn't get that vibe at all.  Very fun course. I recommend you take this prior to Machine Learning as I think it serves as a good introductory course. I could have done without the finance portions of this course. It's pretty simple, but if you are into trading, you will enjoy this course more than me. I had not done much Python before taking this course, but I have done a lot of Ruby and coding in many different languages. I will say that someone with more Python, numpy, and pandas experience will find this course easier than I did. It was not hard, but there was a lot of learning involved for me since I hadn't used the libraries before. Great introductory course to Python and Machine Learning. Projects vary in difficulty but be prepared to start early for some of them. The projects took me between 3 to 15 hours each, depending on the length and difficulty. TAs and professor respond quickly on Reddit, and the other students are very helpful in providing suggestions and ideas. The course material was fascinating and broken down nicely. Professor Balch and his team of TA's were the most impressive in terms of responsiveness and clarity I have seen out of this program. Posting to piazza did not feel like throwing your seed on the rocks as it sometimes did for other classes; there was always a swift response either from the instructors or classmates. My one complaint was that the order of assignments left all of the hard work for the end. Professor Balch actually indicated that he was going to take our feedback under consideration and adjust that, which is yet another aspect that indicates that he really cares and wants the class to be a success.  Fun lectures, great assignments and crazy exams. The class forum on reddit was challenging to keep up with after having been used to Piazza.\nProgramming experience would definitely help since most of the assignments are python heavy especially vectorization for performance.\nOverall I never expected to learn so much about the Trading domain and now I feel fairly confident managing my own portfolio; which I think was a big plus for me on the financial front.\nThis course left me with an yearning for exploring the trading space - thanks to Tucker Balch - A great teacher indeed!!! As other students have stated, this course was easier in the past, but has progressively become harder and with very little room for any mishaps. There is no curve, and the mid-term and final exams are like sprints, you barely have time to complete them, and a lot of students actually weren't able to complete the mid-term. The extra credit assignment is a joke, it requires more effort to complete than multiple projects combined, and it only contributes to 2% of your total grade. These horrible features of this course make it extremely nerve-racking, because you can easily lose a letter grade in the blink of an eye. It almost seems at times as if the professor dislikes seeing students do good in this course, and he tries really hard to prevent you from earning an A; I was able to earn one in the end, but it wasn't an \"easy A\" at all. I personally avoided asking questions via Reddit, because of the snarky replies the professor would issue to students. The course serves as a good introduction to Machine Learning, and you get to apply Machine Learning to stock trading in the last project, which was awesome.  Something else which you need to consider is the fact that projects build on each other, therefore if you fail to complete a project, or you implement it incorrectly, you will be toast. A fantastic first course. The focus on this class seems to be more towards the trading side of things. If you want a deep dive into ML topics, this isn't such a class. There is use of ML techniques like Reinforcement Learning, but know that the main subject is trading in on itself. Fall 2017 was the first time Reddit was used instead of Piazza and I felt like this experiment didn't work out that well. For an academic class, Reddit just doesn't have enough tools to deal with all the announcements and tags needed. Professor Balch was great and very hands on though! He was quick to reply in all posts and questions and so were the TAs. The lecture structure has changed a little (no longer follows the order on Udacity) but otherwise they were straight to the point. The add on lectures on Youtube helped supplement the material and projects well. The projects don't take too much time to complete and sometimes all it takes is an \"ah hah!\" moment to figure out what you need to do. Great class to pick up as a first class. I liked the course overall but definitely think it has more potential than what's actually being done. I rated it medium because really most of the projects took me around 6 hours to complete. Which I really don't think is bad. There were really only two projects that took around 8-10 hours to complete so in the end I rated it medium because most of the projects were. On average with assignments and lectures (plus the occasional reading), I would say it took me around 12 hours a week. That's on the high side again given that homework is due usually every other week. That being said here's the review. The course is really split into two sections. The front half is a lot of stock and market information with hands on Python assignments to supplement the learning. The latter half of the course is more machine learning in conjunction with Python and stock and finances. You don't need to be an experience python user to take this course. Though I did have experience using the Python libraries and Python is a language I program in every day so it will certainly help. Also, you don't have to be a stock expert. The lectures are straightforward an well laid out in nice manageable chunks. In fact most were 1 hour lectures I could easily do during my lunch if I wanted. The profession is very knowledgeable, funny, and a good presenter; you'll enjoy watching the lectures. This class really glances over a few machine learning algorithms and you'll program a few but I wouldn't say it's a full deep dive into Machine Learning. In fact it's really about using algorithms to trade stocks and manage portfolios. This of course makes it solid intro class. There were of course some drawbacks. Communications throughout the semester was terrible. Reddit was used instead of Piazza for this semester which I think threw a lot of non-reddit users through a loop. I happen to use it often but it made the threads really noisy and messy with people asking numerous redundant questions and not putting comments in the right threads. Additionally, communication from the professor was far and few between. Assignment \"updates\" or comments about questions in the reddit threads (which could easily grow in the few thousands) were fair game for requirements on assignments (even if not listed on the rubric). Assignments were hardly finalized until a 3-5 days before their due date and portals to submit were often times opened days before they were actually due. My TA was impossible to get ahold of throughout the semester. The assignments tended to have subtle but time consuming changes that needed to happen each week (one week give the output in this dataframe and the next is needs to be a series or another datatype). This wouldn't be bad overall if two things happened. 1. There was a blip or sample of what the output should look like. 2. Each week you weren't forced to retool your other classes and functions to accommodate the returns to be some new data type for the input of a new function. Overall, the factors above speak for themselves. I found the course engaging and entertaining enough to give it a Liked, I didn't spend forever on it each week, and it was fairly average difficulty wise. One of the great classes I have taken. While it provided a nice intro to ML, the projects were challenging and interesting, with lots of scope for experimentation that kept me hooked. One of the coolest professor and head TA I have seen in the last 4 semesters. Workload will vary. But if you are inquisitive about trading, then this course is definitely recommended.  Professor Balch & TA's, \n \nThank you so much for doing an amazing job running this course. The response time for this course was amazing. I don't know how you all managed that, but this shows the dedication with which you all work and value your job. Congratulations!\n \nAny feedback without mentioning the lecture videos would, to me, be unfair. For ML videos to be not boring is a monumental task, but I, and I think remaining class shares this sentiment, rather enjoyed them and would listen to them in extended sessions. So, Congatulations on that too!\n \nThe assignments about 80/85% of the time are well managed and well explained, with a clear rubric set for students to meet. In comparison to other better-managed classes, I'd rate this aspect of the class up there with the best. \n \nOn the improvement side, I'd personally like to see following:\nMid-term question creation should be replaced with better directed assignments/projects. I didn't see any value in them. Sorry :(\nSome might not agree with me, but I think first mini-course should be left for students to explore. I'd rather start with Mini Course 2 and ML part immediately afterwards\nRight now, the course gives a touch of ML for Trading systems. I think this leaves room for more \"in-class\" experimentation. Perhaps more algorithms, ideas etc... I'd rank this course from easy-to-medium difficulty; but, I think it should be, with some more directed effort towards ML and its experimentation with Trading systems, medium-to-high difficulty range. \nLecture videos are so good that I would love to see more of them. Other ML algorithms, their analysis etc... Perhaps students don't have to be assigned tasks from them if it becomes too much, but still they can always see them and learn from them in their free time. \n \nI have had great fun with this course, and I hope everyone else has too.  This was a really great class. It was a good introduction to machine learning and finance. Up front, there is also quite a bit of material to get you up to speed on Python, Pandas, and numpy. The summer definitely felt pretty rushed, and they had to sort of combine the last two projects together. This was probably one of the easier courses in the program, but worth the time and effort. The professor was really engaged, and we had some really good TAs as well. Overall the course content is great, but how the course is run leaves something to be desired. Be aware when the schedule is released that it may look like you have 2+ weeks for some assignments, but the professor will take so long in updating and finalizing the assignment that realistically you will have 1 week or less to finish it. And of course they won't let you know when to expect the assignment to be finalized either. \n\nThe projects can be quite interesting, and so far they're decently (but not overly) challenging. Previous reviews mention the course \"ramping up\" the difficulty over the semester, but they've redone the schedule of projects so be aware that some of the more challenging projects (assess learners I'm looking at you) are now earlier in the semester. \n\nI would definitely still recommend this class as the interesting projects/materials make up for the communication/expectation issues and the professors snarky responses on reddit. Pros:\n-Well organized class with worthwhile papers and lectures\n-Dr. Balch and TAs are quite active on Piazza. Reasonable questions are answered with sufficient details\n-Great first course for the program\n-Great intro to machine learning (decision trees, classification, regression, reinforcement learning)\n-Applicable! I went right into investing after finishing the course and made some decent returns :-)\n\nCons:\n-Starts off with hand holding and as soon as deadline to drop comes, workload significantly increases. I remember procrastinating on MC3P3 and ended up spending 20-30 hours on it. \n-Depending on your interest, projects in the end can become time sinks. I really tried to get significant returns compared to the benchmarks! This was my first class in the OMSCS program and I am very glad that I was able to take it. I have never been interested in anything remotely related to finance, so I was slightly concerned about whether or not I would enjoy this course. Professor Balch does a great job explaining the finance content without assuming any prior knowledge about trading. I've actually had conversations with coworkers about day trading thanks to what I learned in this course. It is practical!\n\nI found the projects to be enjoyable throughout the semester. They do a good job of building upon each other as the semester progresses, and they're balanced appropriately. The two most difficult (time consuming) projects were spread throughout the semester. The midterm was fair and shouldn't be too challenging to anyone that stays on top of the course content throughout the semester. \n\n**Major pro**: all assignments for the semester were released in draft at the start of the course. This allowed you to work ahead if you knew you had scheduling challenges coming up during the semester. \n\n**Biggest con**: Although the projects built upon one another, we often had to copy and paste code from one file into another. I would have liked the different files/classes to interact with one another a little better. That being said, though, that's a pretty minor con. \n\nThe coursework was never insanely difficult, but it did a great job providing an intro to some ML and RL concepts. I'd gladly take this course again and certainly recommend it! This was my sixth course in the program. I came at this course after ML and RL, and have had previous experience in the securities industry, so I found this course pretty easy, but not without its challenges. \n\nThe good: The material is really interesting, and Prof. Balch is incredibly enthusiastic about the topic. You get an opportunity to implement some ML algorithms from scratch, and you learn a lot about the markets. Personally, this course is where I learned how powerful and useful Pandas and NumPy are. \n\nThe bad: Really, only one thing -- the assignments are subject to change as late as a week before they are due. Usually the changes only require a few minutes of work to implement, but it is frustrating if you are the type of student who likes to move things from to-do to done as soon as possible. \n\nI believe this course would make a good first course in the program. It's a gentler introduction to machine learning than 7641, and teaches some skills that will prove useful throughout the program. The finance knowledge is also fascinating. Good intro course to ML. Also I learned a lot on stock market. Thanks to the lectures and TAs! It's a solid class with good projects. It's really three classes rolled into one:\n\n1. Working with data using Python, Numpy, and Pandas.\n2. Machine Learning\n3. Financial Markets\n\nI feel I learned quite a lot. I think it's a good class for beginners wanting to learn tools needed for other classes, such as Python/Numpy/Pandas and get introduced to machine learning. \n\nThe TAs were very good and active on Piazza. On the other hand, the professor seemed to sometimes forget about the class for stretches of time, without giving the TAs the tools / permissions to manage it. Great courses for anyone who is interested in both ML and Trading in stock market. The course was divided to 3 parts (intro to pandas, intro to financial market, ML for trading). This structure was excellent and really well-thought. Anyone with zero experience can get through this course smoothly (well you need common sense as well).\n\nLectures are okay and well prepared. There are some recorded on-campus lectures that explained the assignment in details. The assignment was easy since you can test your code in the remote machine so if you ace it, it means full score. Exam and mid-term were okay, you can review 1-2 days before taking it. The reddit experiment was not working and I hope they stick to piazza in the future. \n I really enjoyed this course and would definitely recommend it.  It presents some machine learning concepts, like decision trees, gradient descent, and reinforcement learning, in a context with direct application.  The ML methods were not discussed in too much detail but enough to give the students an understanding of how they worked. \n\nIf you wanted to prepare for this course ahead of time brush up on pandas, numpy, and pyplot.  You'll spin your wheels a while if you've never used these libraries.  Some assignments can't be completed without leveraging the numpy and pandas matrix operations effectively (for loops cause the grader to time out) and there are some assignments that require reports with charts and graphs built with pyplot.  All the financial and market information you need for the course is presented at the beginning and I never wished I had studied that before hand.\n\nI should mention that the course starts off a bit disorganized but that improves.  Expect the first week or so to be on your own.  Also, the assignment instruction are often in a \"draft\" state until less than a week before they're due but none of them had significant changes when they were finalized.  Definitely, start them as early as you can.  You might be able to wrap them up ahead of time and have some stress free weeks. A really great class on its own, but Professor Balch's constant presence in Piazza makes it a game changer. He and the TAs are insanely responsive and always have a nice mix of hints & wit in their replies. \n\nThe assignments start off pretty simple and ramp up near the end. The third section can be challenging but very satisfying to see things working. The lectures are really wonderful, and the textbooks are also fantastic, which is something I rarely say. \n\nMy sole complaint is a big one: the mid-term. Essentially the class compiles a list of questions for the mid-term, which culminates into a 700-question bucket. Those who did well largely memorized as much of this as possible. It seemed like a large amount of busy work and taking exams based on memorization is a pretty crummy way to spend a Sunday. \n\nSo prepare for a really great, fun course with one bummer in the middle. All in all, highly recommended.  Solid course. \n\nPros:\n-Great as one of the earlier courses as it clearly explains the tools you'll mostly be relying on (using numpy/pandas etc). \n-Fun intro to ML/finance topics for those with 0 experience in either. \n-Active Professor\n\nCons:\n-Definitely an intro course as it doesn't go very deep into the subject matter. \n-I wish it went deeper into using RL concepts to trade, discussing more best practices and the 'real-life' hard learned lessons that I'm sure the Prof. has picked up, as well as using derivatives (they're only briefly mentioned). \n-I also wish that project/assignment specifications were finalized sooner. This was very annoying a few times. \n-The timed exams are silly. They're reasonably weighted, but don't have much value in terms of learning anything. \n-The Piazza participation requirement led to a ton of spam (\"+1\"s, memes, etc)\n\nBeing proficient in Python is a big plus. People also struggled with selecting technical indicators. Just don't over-complicate things. Finally, be aware that the class ramps up in terms of time commitment at the end, particularly for one project. My average time commitment was reasonable, but during one project I burned at least ~30 hours in a week. I really enjoyed this class. This was my 7th class in the OMSCS program and this one was one of the most practical classes I've taken. My undergrad included an AI specialization so I already had a decent understanding and moderate experience with machine learning. This class provided a good introduction to machine learning while still making the projects challenging enough for someone in my position to appreciate. \n\nMy biggest complaint with this class has to do with the fact that I took it over the summer. I would highly recommend that you take this class during a full-length semester if possible. I wanted to spend more time appreciating the concepts I was learning/implementing... but because of the fast pace of the summer, was unable to do so. I also didn't really appreciate that the instructors decided to add an extra exam this semester for the first time. It made the summer even more stressful than it already was. \n\nThe class is divided into 3 parts: 1) ML, 2) the stock market, 3) combining ML and the stock market. There are several projects (all coding, some include reports), two exams (finally is not cumulative), lots of lectures (with quizzes), and a participation grade that usually came in the form of a survey sent to your email. \n\nYou'll need extensive knowledge of Python for this class. This was my first OMSCS course and it was a great class to get me back into the groove of taking classes.  Professor and TAs were very active on reddit and the slack channel was great so it felt much more interactive than I have had with other online courses.  Videos/Lectures were great as they were on point with the assignments.  As many said, this is by no means an easy class, the projects build upon each other and be sure to start on the two week project assignments early as you are given 2 weeks to complete it for a reason. Unlike some others who have stated this class was super easy, I will contrast and state I thought it was very challenging. I would not consider it hard, but it was very time consuming, especially toward the end. The first several weeks are no more than a few hours week. After the midterm, the projects get very difficult and toward the end, I was spending upward of 40 hours a week working on them. The first few assignments are very much 'hand holding' to give you direction. The last few are much more like real world programming assignments where you are given a task without much direction and have to figure out how to do it. Expect to spend lots of time Googling. \n\nThe first half of the class was easy as it slowly allowed you piece by piece to assemble the final projects. The interesting thing about this class compared to any other I have taken was that everything builds on top of what you have previously done. You will insert code you wrote at the beginning of the course into the final assignments. One piece of advice I will give is to make sure everything you write is commented correctly and modular enough to be copy/pasted into another file as you will do this almost every week. \n\nOne thing I did hate in the course was the midterm. It was very difficult (I got a high C. ) The reason for this is that half questions come right out of Professor Balch's book, and the other half are programming questions. (ex. What is the output of dFTrading[:, 1, 'IBM']) I have never in my life taken a programming test on paper like this. I can figure that kind of stuff out all day long on a computer but struggled to do it in a multiple choice exam. \n\nOverall I really did like the class. I have an interest in the stock market, so the material was right up my alley. If you find finance boring you will likely not get as much out of it. Make sure you have at least intermediate level Python skills. Brush up on Numpy and Pandas before taking the class and you will do well.  ### Loved the course\nThis was my third course (after CP and SDP) and I have to say this was the most engaging class i have been in. There are 8 assignments that u can even start working on from the first day (of course not recommended). The videos are excellent - short, to the point and very close to the subject matter and the assignment. \n\n#### Assignments\nAll the assignments are evenly spaced and equivalently weighted. I would recommend referring to all the information \n at http://quantsoftware.gatech.edu/Main_Page to learn more about this course itself.\n\nFew over achievers might grumble :), but the first part of the course (mini course for pandas) was extremely important for the final part of the assignments\n\n#### Exams\nThe exams are intended to test if your understood the videos and the concepts and does not try to trick you out of your grades. For the midterm, there are crowd sourced question banks whose intentions are to make sure you actually understood the various parts of the course. If you have gone through them all and figured out the basics behind them, the midterm should be simple enough though it is closed book and proctored.\n\nThe final does not have a question bank, but the same methodology of going through your videos and material should make it simple enough.\n\n#### Parting words\nThe last three assignments as noted as indeed challenging and equivalently given two weeks to complete. You can even start them on the first day though there might be tiny edits to the grading script at a later point.\n\nBut this is one of the best constructed courses and if you have some background in python, should be simple to pick up and any insights in finance would be an added booster.\n\n_Note: Though the course is constructed exceptionally well, it is not an easy A and you would still need to put in the hours required. Especially the two assignments marked as \"Very challenging\" easily took 20-25 hours over two weeks. _ You'll have a better time in this class if you took ML beforehand, so you can start off with a better understanding of the ML mechanics and focus on the financial aspects of the course. The projects were very fun, engaging, and was very applicable to the industry. Even though I got an A, I would hesitate to call myself a competent Quant. Interesting class.  Material is not terribly difficult if you keep up with the class schedule.  Assignments were good challenges, and I appreciated how they built upon themselves -- of course, if you get behind early on it's a challenge in later projects.   Udacity Video lectures are effective and entertaining, the YouTube videos have important material but are generally too long and not as well structured.    Professor B has a sense of humor that you will either love or hate -- if you want to prepare for this course skip the books and binge-watch some Monty Python. This has been a very interesting course... mainly because I've had some business background and have had an interest in computational finance. The projects have definitely been beneficial, but the organization/timeliness of the course team and how/when these projects were presented and what they actually covered was a bit disappointing. Yes, it was the first semester this was offered, so I expected it to be imperfect and feel the students have had grace for that. Going into the semester, I was thinking that between the two brand new courses I was taking, this would be the more organized b/c the instructor had taught this multiple semesters, already had a class website, and had an environment already setup. Another of the disappointments I have had are that many of the final projects have been filled with coding the underlying ML algorithms from scratch rather than actually applying ML to the quantitative finance domain. It seemed that ML knowledge was prerequisite for the course, so I therefore thought that's what the course was about. I'd expect some of this implementation of the basic workhorse algorithms in ML to be in an ML class... kind of like our implementation requirements of 7641. With that mindset, it seemed rather frustrating to receive project assignments approx. 1 week prior to the due date that were requiring this type of development... and again, not necessarily tied-to the trading / computational finance domain. I wish we could have spent the time working on some of the things that the extra credit proposed instead of working on developing my own KNN learner, bag (bootstrap aggregator) learner, Qlearner, or Dyna. \n\n... All that said, it really was a great class and I learned a lot. I actually began really liking Python through this course... it's mandatory, so be ready. Those taking the class do come away with a decent set of software that could be further developed to make a nice personal trading system.... or, if motivated enough, I suppose you could even start your own hedge fund.  This class assumes zero background in finance, numpy, pandas, and ML. It's a very gentle intro to all of these topics. The first 2 weeks walks you through some useful features of python, numpy, and pandas. The pacing is excellent and not \"drinking from a firehose\". After taking one of those famed \"Baptism of Fire\" courses in OMSCS as my first course, this course was very nice in helping me gain back some confidence. \n\nFun Factor: Very High. The applicability of finance and trading (which I also have some personal interest in) made the ML concepts stick just that much better. \n\nI put down 10 hours / week, but it's really more like 4-5 hours a week - potentially even less if you already have extensive python experience. Much of the time was spent fooling around with the people on slack (whose experience and camaraderie, I was told, was probably never to be repeated in the history of OMSCS slack channels). There were extracurricular contests going on to optimize code, etc. that sucked tens of hours each week. \n\nProfessor Balch and a number of the TAs were ever present on Piazza which was very helpful. \n\nLike most other OMSCS classes, the #1 killer is procrastination. Many folks were apparently caught blindsided by some schedule \"squeezes\" that were not anticipated. Also, some folks were seemingly blindsided by not carefully reading the assignments. Every assignment has a grading rubric that serves as the specs for the assignment. Read those 3 times, then 3 times again before turning in the finished assignment. This was one of my favorite classes so far in OMSCS. Dr. Balch's lectures are perfectly \"bite sized\" and he explains difficult concepts clearly and concisely. The professor and TAs are all extremely active on Piazza as well. The work load is not that bad but it does ramp up toward the end of the class. I would highly recommend this class to others! The funnest course I have had so far. Starts kinda slow but the last 2 weeks were a total time sink. This class was quite the predicament. \n\nI came into it with minimal knowledge of python (literally what I picked up from CN) and minimal knowledge of machine learning. I had a basic to medium understanding of finance topics. I ended with an A in this class. \n\nThe problem? Professor Balch is kind of an egotistical dick; it comes out in almost every one of his piazza posts. The midterm was 30 minutes long with 30 questions and about a third of the questions were detailed \"what happens in this pandas/numpy code?\" without access to internet or the python interpreter. \n\nThe other problem? The final project is worth 17% of the grade but you're only given two weeks to work on it (maybe fall/spring will be longer) and the final exam is plopped right in the middle. \n\nSupposedly the final project was split into two projects previously and they had MUCH more time combined to work on it. I still managed 100/100 on it, but it added a few points to my blood pressure. \n\nOverall? I'd still take the class. Just be cautious and heed the rubrics. You can get an A even if you stumble on the exams. Very fun class. The professor(Balch) and all of the TAs were a ton of help in Piazza. The lectures were pretty good and the assignments were very engaging. \n\nI really wish there was more time carved out for the final third of the class as the difficulty and time spent really ramped up. The first two thirds of the class is prepping you with python lessons and some economic theory. Its not until the last third do you really start getting into the interesting machine learning stuff(which is really fun). \n\nOverall, WAY less time spent in this class than ML or RLDM. I learned a TON and it was engaging :D The workload in this class was on the lighter side but they are continuing to tweak the schedule so your mileage may vary. A portion of the course is devoted to learning Pandas, a Python library for working with financial data. No other class I've taken has done this. Usually you have to just learn the libraries on your own or as part of project work. I lot of time on projects is spent endlessly tweaking parameters and re-running your models, which is not terribly interesting. It is rewarding, however, when you come up with a profitable model. Prof Balch was very involved. Took this course to complete the ML specialization requirements. After having taken DVA, RL and ML, it was a shock to see how easy this course is. If you know little about ML and/or python, this is probably a good first class to take in the program, but if you do you are likely to be bored by the programming aspects.\n\nThe finance part was OK. I started out as a believer in the efficient market hypothesis (which basically says that you can't profit by doing ML for trading, and therefore that the material in this class should be essentially useless), and I like having been exposed to the perspective of a professor who obviously disagrees with it. I'm still not 100% convinced, but this was an interesting experience.\n\nOne thing that disappointed me was that the midterm was almost exactly the same as one of the sample midterms that was made available to us for reviewing. In other words, we were given the answers to the midterm beforehand... As someone who wants to be challenged, I find this very disappointing. Very well designed course. I actually took it just for the Python data science aspects and learned a great deal. One thing to watch out for is the assignments and submission windows are often open very late so try to plan accordingly. Good class with a very sneaky workload. \n\nThis class covers pandas/numpy, finance, and ML algorithms. It does a nice job of tying everything together progressively. If you have taken ML in this program, you will find the ML section comparatively very light and you should pretty much know everything, but I do feel I gained something from having to implement some of the algorithms myself. \n\nIf you had asked me half-way through the semester, I would have said this is probably the easiest class I have ever taken. But, the last third of the class covers the ML topics and the workload ramps up a bit, although it still was not too heavy. Just don't completely sleep on it. I would love to have seen a larger focus on the ML section and I believe Professor Balch has indicated he may do so in the future. This is a good class to consider pairing up with a harder class. \n\nFinally, Professor Balch was awesome. He was amazingly active on the forums, held many office hour sessions, and overall just seemed genuinely interested in giving us the best learning experience possible.  Basic course for ML itself but a good introduction to Python/Numpy if you have no experience with them as it is barely any work except for 2 of the projects.  I had zero experience with both Pandas and Numpy and still only spent 5-7 hours every week. I also enjoyed the finance theory aspect. It made me appreciate the finance side of things more than I thought I would have.\n\nThe course itself will teach you not a lot new if you know even a bit about ML. The Q Learning RL project is interesting but is dealt with at a basic high level. I wish we spent more time on reinforcement learning.\n\nThe trading part is basic for an ML course focused entirely on trading. Yes we build some technical indicators to trade on but don't expect to learn anything cutting edge for finance. No Deep Learning. No discussion on high speed algo trading strategies. I wish we were trading in a simulator in real time for our final project or at least had a Kaggle final project. That would have been cool.\n\nThis is a good course if you're looking to get your feet wet in ML/Python but if you already took AI, RL and ML then it can be redundant. I recommend taking this course early on in your OMSCS career before you venture out to the other ML classes as it will be good prep for some of the harder courses. Not a bad class. The first two assignments were a breeze; just a copy n paste from the notes and text. The third assignment onwards got pretty hard.\n<br/>PROS: \n1. Excellent test cases. Even the py.test files were given so you could see the expected answers for the test cases. Prof encouraged students to share test cases as well.\n2. Professor was very active on reddit. Seems like 50% of all posts were from the prof.\n3. Assignment expectations and deliverables were clear.\n4. Course was well planned and executed. \n<br/><ol>CONS:\n1. Professor's posts were a little rough around the edges. If you have thick skin, then it won't be an issue.\n2. Prof's bully behavior encouraged bad behavior from students as well. Some simple questions asked by students got responses like \"you don't belong here at GT\", etc.\n3. Seems like prof was paranoid about class material leaking to future students. No suggested homework solutions were given. TA's were there to help clarify assignment details, but did not offer real help on homework. There were mistakes in notes, but were corrected in the video lectures (I think this was done to make notes useless to unauthorized people who get hold of the notes; just speculating). Going into this class, I had taken AI and knew a fair amount about stock trading.  This class gave an introduction to Machine Learning topics as well as stocking market concepts and in a final project, allowed you to create a market trading strategy that was powered by one of several algorithms you learned in class.  The course used Python and was light in a coding from my perspective as a software developer.  If you were not a coder, getting up to speed with Python and Numpy will take a fair amount of time.  Thankfully, as is becoming a trend in OMSCS courses, most of the assignments have grading scripts so you know the majority of your grade by the time you submit your assignment.  There is the caveat that reports require manual effort to be graded and occasionally, there are additional test cases the TAs use that are not included with the grading scripts but still fit within the specifications of the project.\n\nOverall, this was a very enjoyable class that was fairly graded.  There were two exams that were worth 12.5% of your grade each that were 30 questions in 30 minutes.  As you'd expect with that format, you must be a quick reader and thinker but ultimately know the concepts very well to do well on the exam.  For those that overanalyze or how to think through each exam questions, you will struggle on this kind of an exam and while the exams are not worth a large portion of your grade, you do need to perform decently to get an A in the class.\n\nAs with most classes you enjoy, the Professor makes the class what it is as the instructor lectures on Udacity are extremely engaging and entertaining while also being brief and informative.   Great course. I was expecting to apply my learning into the stock market but it may not be directly applicable. Course content is good, so is the pedagogy. The course's learning curve is a little steep towards the end. Make sure you start the final project implementation early.  This is definitely not an easy class (my overall grade for the class was >95%), especially for a person like me, who don't know much about either ML or trading. The exams were straightforward. The projects were of high quality and enforced students' learning: a basic market simulator, a random-tree learner (and how to beat this type of learners), Q-Learning robot maze navigation, and a learning trading agent. That last project (a learning trading agent) brought together virtually everything we learnt in that class into a single project! It was super fun, but was hard and time consuming. \n\nIn terms of time commitments, there were many quiet periods where nothing was due. But, I spent most of that time time reading suggested materials as much as I could. For instance, I read Prof. Balch book from cover to cover, skimmed Tom Mitchell's \"Machine Learning\" book, etc. And so, you may end up with less than 15 hrs/week on this class. \n\nOverall, I came out with a well-rounded understanding of what's going on in both ML and trading. Kudos to Prof. Balch for this solid class and his amazing organization. He was very funny and had a dry sense of humor. I would imagine taking his class in person might have been a very fun experience. Also, according to my fiancee, he had cute chuckles, which made her laugh. Fairly easy class that teaches the very basics of finance and machine learning. \n\nProbably a good fit if you're interested in learning about finance or have no exposure to machine learning and are interested in a softer introduction. If you've already taken CS7641 Machine Learning and have taken a finance class in undergrad this class may not provide you with much new information. For me, it was a nice refresher on both topics. Don't let the early semester reviews fool you into thinking this class is easy. The class starts out simple with minimal time requirements but will quickly ramp up about 3 projects in. The ML section in the second half is extremely interesting, but you'll be bored to death with the first half/midterm if you don't care for finance. \n\nThe projects are extremely interesting and well thought out, but Tucker often takes almost a week to finalize a project. Don't wait to start on projects as a few of them are very time intensive. Overall a great introduction to supervised and reinforcement learning and would highly recommend. If 7641 teaches you the theoritical part of ML, this course helps you understand the practical implementations of it and how it can be applied to day to day activities such as financial trading. Good amount of introductions to pandas, and financial basics are given, Wish more time was spent on ML, but neverthless learnt a good deal I thought the class became really involved past the midterm. It became more or less like the KBAI project where all the pieces you built (simulator, strategy, ML algorithms, training/testing harness) have to be ready to go for the final project. Any bug from the previous projects is going to cost you time in debugging. Also this class is also going toward automated grading testcases, so without test harness, I could see many people have trouble getting good grade on their projects. Had all the optional parts (implement boosting, ling and knn analysis, all parts of the final project scaled evenly) and test harness not allowed to share, i could see the whole class drops half-to-one letter grade average. By the look of the grade of final project, probably less than 15% people actually implemented QLearning trades generator, which is really the whole point of the class. \n\nToward the end, you are building a QLearning agent to do automated trades generation, which is quite cool to detach QLearning from the more common \"robot in a maze\" application. The future offering is likely to disperse the loads a bit more so the end project isn't so compressed where the common time working on them is upward of 30-40 hours. The future iteration also going to bring back Decision tree next semester, and \"deep learning\" at some point. This course has the potential to mature into a really good course.  Very good intro to NumPy and Pandas. I use Pandas professionally, and the exposure to NumPy (which is the foundation of Pandas) was very nice to experience. Tucker Balch is a great instructor and the TA's (Andrew Cassidy expecially) were excellent. The market fundamentals were nice to get to understand, and the lessons provided good information on them. \n\nAreas of the projects that would have posed most difficult (creating a decision tree algorithm ourselves) were covered very thoroughly in supplemental lectures. This took the overwhelming majority of guesswork out of the course, and instead tested the ability to implement, which I consider a good move. \n\nThe final project actually didn't grade on actual stock algorithm performance, which would have been extremely difficult (everyone is trying to beat the market, and thus very few can). Identifying unique stock signals is an important part of trading, and I didn't have the time (nor millions of dollars) to conduct satellite surveillance of AAPL's parking lot to gauge what the share price should be (this is actually done in real life). I think a good balance was struck on the final project regarding this. This was only my second course in the program and I am enjoying it. It gives a good introduction of some ML algorithms like Decision tree, Random forest, Bag learners. Later you learn Q learners and dyna and use that to the trading problem for the last assignment. Although you get a choice to use some earlier algorithms learned in the class, most end up using Q learner to solve it. It is advisable to learn some Pandas and numpy as they are used extensively throughout the assignments. I had a tough time using pandas for plotting graphs but managed it well in the end. Learning how array slicing works will help a lot. Also learning how to vectorize will shave some secs off your run time and you get bragging rights in slack and piazza for this. Make sure you are active on slack and piazza as tons of great advise are given by some great minds in the class. If not for slack, I would have struggled to understand and approach the problems on my own. And finally, the TAs in this class are a complete joke. You are assigned a specific TA and the one I had did not show up for the Office hour. Barring a few TAs, most don't help much and just ridicule you on Piazza if you ask something obvious. Having said that, I liked prof Balch's humor and approach. He supplemented the udacity videos with some youtube videos and that helped greatly for solving the assignments. Overall a great class. No wonder this is one of the most popular course in the program and more than 90% of the students end up taking this.  I loved this course. Very interesting projects. Get to learn and apply ML algorithms in Python. Good for the resume. Best course I have taken. <b>OVERVIEW</b>\n\nEssentially, the course serves as an introduction to Machine Learning, Technical Analysis for Trading, and Python (including Pandas and Numpy). If you're new to ML, Technical Analysis, or Python, this is an excellent first course. While the material effectively covers material sufficient for an introduction, you are free to take your learning further. For example, when learning about Reinforcement Learning, you can simply watch the course videos, or you can supplement your learning by reading the relevant sections from Suttons' book: Reinforcement Learning: An Introduction and the videos from the OMSCS Reinforcement Learning and Machine Learning courses. The approach you take, combined with the skills you begin with, will determine how much time you spend on the course.\n\n<b>PROJECTS AND EXAMS</b>\n\nThe projects build upon one another, so if you get something wrong it is critical that you go back and fix it. Also, beginning projects early is extremely useful, because some projects require experimentations and papers. I was surprised at how a few students would appear on Piazza or Slack a few days before the project was due proclaiming that they had not started the assignment and was asking how long it would take to complete. Again, the approach you take will determine how much you get from the class.\n\n<b>ENGAGEMENT</b>\n\nI found the unofficial Slack community the most active - 24/7, especially in the days leading up to a project's due date or an exam. In many cases, students would answer questions in minutes or hours. Piazza was also useful, where some TAs were very active. Although, unlike Slack, answers from TAs or the professor ranged from minutes to days. I found my TA quite good and he would pull in other TAs when he couldn't provide a definitive answer. The professor was active on Piazza for the first half of the course, but was sparsely present during the second. Fortunately, the course proceeded smoothly with the head TA (who has previously taught the course) and other TAs actively participating.\n\n<b>TIPS</b>\n\n<ol>\n<li>Begin projects early</li>\n<li>Read a few research papers so that you can write your reports in a similar style</li>\n<li>View the course as an introduction and feel free to go as deep as your interest takes you</li>\n</ol> Good course. Practical introduction to machine learning. Should be an easy A. Funny professor, good laughs on Piazza. I really enjoyed the class, it gives a slow and gentle introduction into ML, python data science tools, and trading. Good class to take for the first semester. This class has some fascinating aspects and some less interesting aspects. All of the harder parts in the second half are quite interesting whereas the beginning starts out a little slow and annoying with a lot of Python API introduction that could be done more efficiently (i. e. learn NumPy and Pandas API's on your own). \n\nThe class is worth taking for its own interest and also as an easy intro to Machine Learning. \nBe warned that the time requirements and any half-finished reports saying it is easy are very misleading. \nIt starts out super easy and lulls you into a false sense of ease which will be shattered one or two days after it is too late to drop the class. After the drop date you will suddenly find the time requirements go up by about a factor of 5. The hours per week workload in the beginning it is maybe 5 hours or even less but after the drop date it can easily jump to 20 hours per week or more if you are not a \"pythonista\" or try for bonus points. \n\nProfessor Balch is super engaged on Piazza which is awesome! One or two of the TA's are also fairly engaged but the rest generally don't help out on Piazza. \n\nMake sure you watch the schedule carefully. Make sure you pay careful attention to assignment requirements and always test on the GA Tech buffet machines or provided VM, especially for execution time restrictions. If you work hard, put in the required time, and ask lots of questions then the assignments aren't too hard and can be aced. However, messing up one assignment, especially from something silly like using a disallowed library or not making sure it works in the grading environment can cost you a lot, possibly even a letter grade for a big assignment. \n\nOne problem with the class when I took it was that the assignments were not finalized in advance, and sometimes not even until a couple days before the due date. Not only does this interfere with working ahead but having the requirements get changed after you already submitted is rather annoying.  Precursor: this course was without a doubt made more difficult (welcome to the OMSCS!). I've compared it with students who took it on-campus a couple years ago and there's a staggering difference.\n2 closed book exams, rather than 1 open-note midterm.\nOptional \"difficult\" extra credit assignments have become full fledged assignments.\n\nThe class is great overall. My favorite aspect was the implementation of learning algorithms. I took RL and ML beforehand, but they were more theory based or had you use libraries. I felt like this refined some of my ML knowledge. I didn't know much about finance or the stock market coming in, so I appreciated taking that away from the class as well.\n\nGetting a good grade is another story. There is no curve, and I could see it being easy to mess up one assignment and totally kill any hope of you getting an A or B. Thus in order to succeed, you have to come at it in full-force. Don't underestimate some of the assignments. Start early or learn regret the hard way.\n\nThe workload is medium. Probably just the right amount of class-work for someone employed full-time. Sometimes I would have to devote all of Saturday or my entire weekend to the class.\n\nThe professor has nice lectures, but the reddit format was painful despite being a \"redditor\". Join a discussion late, and your comments will go buried. I agree with the other poster who mentioned that the class isn't the most flexible around the online student's time. You have to make sacrifices to accommodate the class's flimsical finalization of assignments, with short deadlines.\n\nIf I were to go back in time, I'd still take the class again. This is a well-organized course brings machine learning and finance together. The content on each individual topic is light but the combination makes the course very interesting. I enjoyed the opportunity to apply ML theories, which are usual dry, to solve real life problems. My only suggestion is to merge the midterm and final into one test given the redundant questions.  ##### Overview\n\nLet me preface my review by saying that I went into this course really excited to learn about Machine Learning (with a mild interest in trading), having chosen to specialize in it through OMS CS. Unfortunately, this is a Finance class under the guise of a \"Machine Learning\" class. I put Machine Learning in quotes, because even Andrew Ng's outdated, free Coursera class provides a better introduction to ML compared to this one. By the way, there is zero mathematical background required for what is taught in this course, which is disappointing. If you compare the curriculum to Stanford/UC Berkeley/MIT, you will see that they are miles apart.\n\n##### What You'll Learn\nYou will implement: Linear Regression, Decision Trees, Random Trees, Bagging/Boosting, and Q-learning. The rest of the course is about finance, with some Python syntax thrown into the mix. In addition, this course doesn't feel like a master's level class due to the amount of hand-holding it does (step by step instructions on what to do, you just need to convert it into Python syntax).\n\n##### Positives\nThe videos for this course are well-done, are interesting and are directly tied to the projects, unlike other classes. Also, because there's no curve, the classroom environment becomes very positive (not competitive) and people genuinely try to help everyone else. A class worth taking if you are interested in ML and Stock markets. Agree with comments I have read so far and I'll add my take. \n\nClass spends one third teaching you Python/Numpy/Pandas. Professor already indicated that will shrink that part. I'd feel torn at leaving it out. I had already taken the ML class and had to decide by myself if to learn R or Python while at the same time going through lectures and that was painful. So overall I'm on the side of leaving that part in but shortening it. \n\nI loved that professor asked to implement everything ourselves without relying to any library (other than numpy/pandas). There's nothing like implementing an algorithm yourself. Even something as simple as KNN has its tricks when implementing it. \n\nI loved that the assignments were somehow at par with the class. Every assignment is an increment over the last one. You get to build your own market simulator (or backtester). Stock trading strategies and then ML algorithms for it. \n\nProfessor was incredibly engaged throughout the class. He hosts several hangouts of an hour or more himself. He's amazingly active in piazza. Piazza becomes a firehose of posts and the professor replied to at least one third of them with followups. \n\nIf there would be a second part for this class I'd definitely sign up! A very enjoyable class end-to-end, with a mix of topics that keep it interesting. There are still three main sections: Pandas & Numpy, Trading/Finance, and ML. But the professor has continued to adjust the weightings to bring in the ML earlier and speed through the Pandas faster. \n\nThe projects are interesting, with only one getting tedious (because of a lot of picky details about charts and formats). Don't worry about some late criticism you may read here about \"unclear\" requirements -- while not perfect, they were plenty clear for anyone who was paying attention -- that is to say, most of the class. [Hint: if it's a Classifier, it has to pick categories, not averages. ]\n\nWhy not a perfect 5? Well, as mentioned the materials have been evolving to put more emphasis on the ML section. But what starts as well-produced, clear instructional videos gives way to a lot of fuzzy, hard-to-read slow-paced recorded in-classroom lectures with the occasional low-budget office hours to give important assignment instructions. It all works, but it's a bit duct-taped together. \n\nOverall a continually fun and interesting class with phenomenal instructor involvement. I like this one. As mentioned in other reviews, it's a good intro to ML, and exposure to many of the libraries you'll likely use again to manipulate data in Python (numpy/pandas). The professor is active and engaged. Lectures good, assignments for the most part good (lots of busywork generating graphs though). This is a good course that act as a good pair with 7641. While 7641 is strictly an academic exercise, this course gives a sound base for how machine learning works in actual industry.. Pandas could have been made a prerequisite than being part of the course... donno why all the negative comments.. This was one of the best run courses.. I have completed 7 subjects till date and never have seen a professor involvement so high.. A highly recommended course and an easy one too Professor Blach and the TA staff were awesome. The material is relatively light and I wish I took this course before I took AI. It gives a gentler introduction into NumPy. Loved the course. I learnt a lot in it and the assignments were fun. Good interesting course. Very well run and organized. Staff is responsive on piazza. You will get exposed to one application of machine learning. It is considered also as gentle intro to machine learning. Almost every 2 weeks there is a programming assignment in Python. Assignment in general are not hard and so were the exams. This might be my favorite OMS course. \n\nThe projects are structured incredibly well, each one building on the last. The course structure is very well paced and broken into 3 mini-courses - (1) Python/pandas, (2) Finance, and (3) Machine Learning. I learned a lot in this class and was inspired to learn more about computational investing. \n\nDr. Balch is awesome, and class/TA/prof engagement on Piazza was super-helpful. Plus this had the most Monty Python references I've seen in a single class so far. As we all know, the Monty Python Index (MPI) is a pretty good indicator of high morale. This course was one of the better ones I have taken. I would recommend it to anyone in the program regardless of specialization. I liked it. There are some organization issues associated with having a gigantic class, and a forced presence on Piazza (Piazza is chaos). The projects also aren't finalized until pretty late, but the changes were almost always nothing. But the class is interesting enough. Its a light introduction to machine learning, and a medium introduction to finance. You aren't going to leave this class and be Warren Buffet, or know everything you need to know to make a high frequency trader, but you'll have a decent grasp, and give you enough of a teaser to let you know if you want explore ML or finance further.\n\nClass itself was pretty easy. Projects could be easy, or hard depending on you. I spent a lot of time messing around, but if I had focused I probably could have finished things a lot faster and easier. \n\nId recommend it to someone who wants a light introduction to machine learning.\n\n The workload is tricky indeed - one can't be warned enough about the last 3 projects, you *will* miss deadlines if you do not approach them with extra time allocated. \n\nThose who say that course is disorganized - well, it truly puzzles me, as the course is one of the best organized ones. Huge plus is that python+finance+ML all covered well enough, and tied together, so you really able to learn something (and that something is relevant, not some outdated/unnecessary stuff). \n\nOverall, more courses like this! This is my first course in this program. I didn't have a strong coding background before taking this class, so you aren't worried. Professor and TAs are very engaged and active in piazza. The first two assignments are pretty easy, but the followings are getting harder. \nAll of the assignments are very funny, you will enjoy it. Good introductory class to machine learning techniques. Projects were also pretty fun. If you have an interest in the world of investing or speculating, you will find this course interesting. Very well organized class and the professor is extremely active on Piazza. The course material is very interesting and I highly recommend it. Some things are kind of silly - you can basically just memorize the answers to most of the midterm and final exam by answering sample questions over and over. I believe it's easy to get an A if you watch all the videos since many hints are given on how to complete the assignments. I am interested in the stock market, and I absolutely love this class! I wish there is a second follow up course. This course has lessons which give gentle intro. to python/numpy/pandas which I have not came across in other courses. Take this class before Machine Learning. I use what I learned and made more than enough money to paid for the course. Very useful, A++. This class was fantastic right up until the end, when the instructor sort of pulled the rug out from under some people. There was a somewhat subtle item in the most heavily weighted assignment (which was a paper and could not be auto-graded to test this). It was never explicitly stated what you should do about it, but if you did not implement it exactly the way the instructor had in mind you lost 30% of your grade on the assignment (4. 5% of your overall class grade). The requirement was never placed into the documentation, but it was apparently explicitly told to the TAs like some sort of \"test\" that the students be able to intuit exactly what the instructor was thinking. \n\nOverall, the class was great, but it left a very sour taste in my mouth at the end for Professor Balch. This course has been really great. One thing I would be wary of is not just trying to skimp on the work or starting late on the assignments. The first couple weeks will make this class seem really easy but you will get hit later as the assignments can get a little more challenging. \nOverall I think the class is great to learn about some finance stuff as well as getting some experience with some Machine Learning. This class is not easy, ignore all previous posts that say it is. The first couple of assignments seem light enough and then once you hit assess_learners it's very time intensive. Not the most difficult class but not trivial either; expect to dedicate a fair amount of time to assignments. \n\nAnother concern is that you will look at the schedule and think you have 2 weeks to work on something but really professor Balch won't finalize assignment details until the week before it's due. \n\nOverall a very interesting class with fun projects but the scheduling and workload were a bit uneven. A good opportunity to practice machine learning concepts like decision tree and Q-Learning. Also a good course for practicing numpy and pandas. If you have extensive stock trading or machine learning experience this course is probably too easy for you. This is more of an intro course.\n\nAreas for improvement: Since the assignments build on each other it would be nice if the grading was \n faster. Also the assignments often don't get finalized until within a week of the due date. This created a lot of noise on Piazza in the beginning of the semester, but after a few assignments students realized that the assignments probably won't change much between draft mode and finalization so it's okay to work off of the draft version. Just be aware that the <a href=\"http://quantsoftware.gatech.edu/CS7646_Spring_2018#Assignments_.26_Grading\">assignment descriptions</a> are verbose so it is easy to miss a detail. I think improving communication regarding the assignments could save time for everyone by reducing the noise on Piazza.\n\nOverall I enjoyed this course.\n 8 projects (67% total) and 2 Exams (12.5%/each) account for the majority of your final grads, the rest points are almost giving it for free. \n\nFor each assignment, you can check the project details here (http://quantsoftware.gatech.edu/CS7646_Fall_2017#Assignments). Do notice that each project is tagged as Easy, Moderate, Challenging, and Very Challenging. That's based on Professor's own experience, and MAY NOT suit your case. For me, the hardest project is manual_strategy, which was labeled as merely Moderate, while the Very Challenging one feels like a breeze. So, don't assume the time it requires for each project has a direct correlation with the difficulty labels. You may put yourself in an awkward situation. \n\nAnd regarding the exams, you'll need to answer 30 multi-choices within 35 minutes. You might argue about the limited time given, but trust me, it's perfectly sufficient to finish the test. I completed the Midterm & Final within 20 mins, and I still got 10 mins to go through each question before submitted it. No hard calculation, just concepts/ideas and shrubberies. If you could not answer it within seconds, I highly doubt that you could get the right answer out with more time given.\n\nOverall, if you 1) are interested in learning financial strategies, or 2) want to apply the ML approach you acquired to investing, or 3) need a intro-class before taking Machine Learning, I highly recommend this course. Machine Learning for trading is an excellent course. It's a great starter course, as it isn't too difficult, but beware that the difficulty does ramp up towards the end of the course (though it still doesn't get exceptionally difficult) so don't let the first half fool you into thinking the second half is just as easy. Lecture material is very interesting, essentially being split into half-financial and half-intro to machine learning.\n\nThe projects all build upon one another in some way, so it's advisable to spend a sufficient amount of time making sure each one is done properly. You can work ahead, as all project descriptions and legacy code are available on the class website, BUT, the projects may change slightly closer to release so keep that in mind when you work ahead. **DO NOT** wait until projects are finalized before you start working on them, despite the chance some slight tweaks may be made to projects up to the week before it is due, start them as soon as you can. This is especially true with all of the projects starting from and including *assess_learners*. \n\nI would suggest making sure your *marketsim* project works perfectly when you get there. The most time consuming projects are *assess_learners*, *manual_strategy* and *strategy_learner*, with the latter two using your *marketsim* code, so make sure to allocate enough time to work on these when you get there. Also, for *manual_strategy* you will have to do some research into stock price indicators, and this project is used as a comparison for *strategy_learner* so it's good to choose these indicators wisely based on this research.\n\nThere are two proctored exams,  one mid-term and one non-cumulative final exam. Questions aren't difficult as long as you review all of the material, watch all of the required additional videos (e.g., The Big Short), and go over the practice questions/previous term exams where possible.\n\nAll-in-all, the material is interesting, the projects are overall well-structured and utilize the material conveyed in lecture, and often even have instructional videos to help guide you through some of the more involved projects.  TAs were responsive and easy to reach on PIazza, though Dr. Balch is often very helpful he can be a bit curt. This is an easy course especially for students with some ML background. Dr. Balch is a great person. He is very helpful and quick to respond. I also like his sense of humor. I liked the fact that we coded a decision tree and the q-learning algorithms from scratch. This course also can be paired with other difficult courses, such as machine learning or AI. Love, love, love this class!  A very gentle and applied introduction to ML.  It also teaches you NumPy and pandas from scratch.  There is a lot of info about this course publicly available at http://quantsoftware.gatech.edu/.\n\nThere are 8 projects in the class, and for the most part they increase in difficulty as you go along.  The first two were almost nothing; they can barely be classified as projects.  But it makes sense because they're supposed to serve as introductions.  All of the projects were very interesting and fun to do.  I have no previous ML experience (except for some basic boosting/bagging from CV but that was hardly a decent exposure, as much as I enjoyed CV) and that didn't hurt me in this class at all.  It was so cool in the final project to program a trading system based on machine learning and look at the results.  Code is tested on real stock data from real companies with some made up companies thrown in every now and then.\n\nAll of the project info is available ahead of time (see the link above) with the caveat that everything is in \"draft mode\" at first and will be \"finalized\" later.  For some reason this was a huge problem for some people in the course.  They refused to start until the project was finalized, which is kind of stupid on their part.  We were told repeatedly not to do that and that any changes made would be minimal.  The biggest change that I remember is in the second project.  We had to optimize something different from the previous semester's students.  Aside from that I think one or two other projects had a minor change and all the others had literally no change.  People blew this draft mode thing way, way out of proportion.\n\nThere is a proctored midterm and a proctored final.  Both are closed everything.  The final is not cumulative.  The midterm was extremely easy and was almost a regurgitation of previous midterms.  It sounded like that won't always be the case.\n\n3 textbooks.  One is required and is co-written by the professor.  It's fairly cheap (especially for a textbook) and is a pretty good read.  You'll definitely want it for the midterm at least.  The other two books are Python for Finance by Hilpisch and the ML book by Mitchell.  I can't remember if those two were actually required, but I didn't find them completely necessary.  The lectures were enough.\n\nIt's often said that a finance background is helpful for this course.  I think what people mean is a trading background, not a finance one.  I have almost no finance background but I do have a relatively extensive trading background, and that helped a lot.  I think manual_strategy would be the most difficult for people with no trading background since it requires an understanding of technical analysis and indicators.  This stuff isn't too difficult, but it is a lot to learn on top of everything else if you're new to it.\n\nThat's kind of true of the course in general.  It's not that this material is difficult, it's just that there is sometimes a lot of work in a short timespan.  If you have a good background in Python or trading then it'll be less work, of course.\n\nThis is a good first class if you can get in your first semester.  Also, this course potentially pairs well with other courses, depending.  I paired it with IIS and had no problems.  If you have no Python background and no trading background then I don't recommend taking it over the summer.  But, I do recommend this course in general overall. Highly recommend this class, even if you are not planning on ML specialization this class can provide a good introduction to ML concepts. I found projects very interesting, they provide a good hands on application of ML.\nDifficulty depends on your background but don't think it will be too hard even if you don't meet the class prerequisites.  Engaging course run by a professor who has good industry experience. Cumulative approach to projects where each one built on the previous one. Overall a very enjoyable course. The final assignment which involves building an RL trading agent is the toughest one - if you can complete it then you already have a head-start on the RL course ! This class is definitely a basic introduction to machine learning, with more of the class focused on using NumPy and Pandas and a few financial markets topics.  In terms of difficulty, most of the projects are very straightforward, and Professor Balch provided additional videos that walked through pseudo code or algorithm outlines.  Two of the projects are more challenging, but still reasonable.  I would have preferred that some of the early easy projects be combined to allow for an additional machine learning project at the end.  The huge class size (~700 in the online portion) exposed that there are limits to how high a class can be scaled before execution problems emerge.  This class pairs well with other classes, as long as attention is paid to the higher workload in the last few weeks of the class.\n\nPROS:\n\n--Lectures were clear.\n\n--Professor Balch was active on Reddit nearly everyday.\n\n--The material was interesting and a good example of how machine learning is applied in a single industry.\n\n--There seems to be some measure of updates and improvements each semester, so there is an effort to refine the course over time.\n\n\nCONS:\n\n--The amount of lecture material is light, particularly in the second half of the course.\n\n--Management of the course was often sloppy.  For example, the course started a few days late, project requirements sometimes weren't \"finalized\" until a few days before the due date, important clarifications of project expectations were sometimes contained in a single post buried in the Reddit megathreads that were hundreds of posts deep, messages to the class were infrequent or incomplete, it was often impossible to submit a project to T-Square until two days before the due date, wording of exam questions was often vague, and the checks for course participation were essentially abandoned halfway through the course.\n\n--There was very little feedback on projects.\n\n--The grading was slow for some of the auto-graded projects and participation quizzes.\n\n--It was a challenge to search the Reddit megathreads that were often several hundred comments deep.\n\n--Professor Balch's tone on Reddit sometimes didn't come across as very encouraging.\n\n--Some of the additional assigned shows or movies (e.g. The Big Short) weren't at all relevant to machine learning.\n\n--The answer key used to score the final exam had two incorrect answers (Professor Balch eventually acknowledged one mistake, but stood behind the other even though it directly contradicted an assigned video).\n\n--Professor Balch's frequent references to Monty Python are distracting and could be confusing to those that aren't native English speakers. I liked this course, if you like machine learning and are interested in trading enjoy.  I really enjoyed this course. I took it at the same time as Reinforcement Learning (very manageable to take these 2 at the same time). I see others recommending taking this before ML; I actually took machine learning first.. so I can't really comment on whether or not that is a good idea. Dr. Balch and the TAs were active on piazza and in office hours, particularly in the last half of the course (where you actually need the help). \nOverall, you should take this course. I managed to get an A while learning a decent amount, and if I can do it... so can you! Absolutely fantastic class. Professor is one I will never forget. Well thought out assignments, well planned lessons, and I learned a TON. Quite difficult, but thankfully there's an autograder to help you figure out whats wrong and fix your solution before final submissions. I absolutely loved ML4T, the instructor and the TAs are awesome. \nThe subject is very insteresting, the lectures and projects are well designed and organized.\nThe only thing missing is that the projects could be more challenging.\nThe professor is working on making the course more challenging, but it is still easy in my opinion.\nDespite that, I think it's totally worth it, I learned a lot and I recommend it to everyone. tl;dr: Tucker Balch, what an experience. Take this course. \n\nI came to it with hobbyist Python and 2 years in fixed income software. ML4T taught me from-scratch numpy, a handful of ML concepts/strategies, and a small taste of how equities managers from RenTech to Berkshire view their markets and trading opportunities. The numpy skills would have made it worthwhile alone, but you learn so much more if you give it the time it demands. \n\nTucker encourages a lively Piazza, and supplements the official lectures with plenty of extra videos. \n\nI found the exams challenging but fair. Read the official study guides and previous exams. Ignore the student generated stuff. That worked for me. \n\nThe course left me with an appetite for more ML, so that's what I'll take next. Entirely unexpected, but speaks to the quality here. This course starts slow by introducing numpy and pandas. The first assignments are pretty light. In general there is a lot of hand-holding with the assignments.\nIt can be challenging and time consuming to put together the projects but you can start as early as the first day of the course. It's really up to you.\nMaterial is interesting and the professors seems to be genuinely enthusiastic about both, trading and machine learning. If you have had no previous exposure to machine learning, it could be a more or less painless intro to it.\n\nI will say, however, this is a huge class and piazza is a mess most of the times. As others have said, the course seems to have been revamped some to make it more difficult now than it was in the past. It's not horrible but don't go in thinking it's one of the easiest courses in the program, it's not. There's a lot of good in the course but it currently suffers from poor execution and a lack of communication making the course way more stressful than it needs to be.\n\n\nThe lecture material is good, the assignments themselves are relevant and have the right level of challenge. Unfortunately most of the assignments were not released when they were expected to be. Assignments would be released in \"beta\" form a few days or even a week after we were expected to start them. and then sometimes not \"finalized\" until a few days before the assignment was due. This is troublesome because some of these assignments do need the full allotted time to work on them, and if you waited until an assignment was \"finalized\" you would pretty much guarantee that you don't have enough time to finish the assignment. This wouldn't be as bad if it were minor tweaks being made, but the \"beta\" version was typically just the previous semesters assignment and there was no clear communication on what changed with each iteration of the assignment so you are left analyzing every line of the assignment over and over to make sure you don't miss some gotcha that could cause you to lose substantial points.\n\n\nThis is my 9th OMSCS course and this course in its current form isn't very friendly to OMSCS students who typically have full-time jobs and other responsibilities outside of school. In addition to the above issues, assignments also were not open for submission until a day or two before the due date in many cases. So even if you had worked ahead, you  still would need to plan around having an internet connection and submitting your assignment the day it was due. There were also random participation checks on the forums, punishing students who didn't check every day. In general it is structured in a way that prevented students planning around their life, and instead they must plan their life around the course. Most OMSCS courses I've taken have been more flexible in this regard. Students who suggested changes to the course to improve it were met with snarky comments from the professor on the forums.   \n\n\nIn general I can't recommend the course in its current form unless your willing to deal with the above headaches. There plenty of much better run OMSCS courses. One of my top 3 favorite courses. Professor Balch is very involved which is awesome. The TAs were very good as well. Was one of the more \"fun\" courses I've taken in the program so far. If you are really interested in the stock market and ML then this is a great class. This class won't teach you advanced concepts around the stock market or ML but it gives you a solid base to build on. One of the pieces I really enjoyed was implementing the ML algorithms vs. just using them from a library like scikit. This class is all in python (which can be good/bad). As I already was familiar with python, the first couple of weeks were fairly easy other than learning the ins and outs of the numpy and pandas libraries. The projects definitely ramped up as the class went on but I really liked how the professor made each project build on top of each other. As long as you stay on top of your projects, build out your projects modularly, comment your code well, and don't overly procrastinate this class should be relatively straightforward. The midterm can be a bit tricky with the programming problems but the professor did provide a great study guide - use this and you will do fine on the midterm! Also, Professor Balch is extremely active on Piazza which was a nice surprise (I was not expecting this). Disclaimer: this was my first OMSCS class so I have no other OMSCS classes to compare this to.  This is my favorite course offered so far. I was already very interested in the stock market and this has me hooked on ML. So much so that I changed my specialization. \n\nOf all my classes I have ever taken these had the best projects. They were close enough to a real world example that they made sense and each one built on the other until you merged them all together at the end. \n\nIf you fall behind you are toast because you will use the previous project on the next project. \n\nIf you do the work and put in some effort it should be a fairly easy A. But, there is a lot of work. \n\nAs a bonus, you will get introduced to Pandas which is my favorite add-on library for any language. Although the course was not hugely challenging, I think it gave a great starter how to use Python and build Machine Learning algorithms. I feel much more confident now using numpy and pandas which has set me big time for the next courses and data mining in general. Building the KNN learner from scratch was AAA+... I can now look at any of the sklearn algorithm's and I know the concept they use to declare, fit and predict, which makes it much easier to deconstruct the inner workings of sklearn and other python based ML algorithms. \nFinally professor Tucker was great, he seems like a busy man with all his extra curricular activities but was very involved in the class day to day.  I was looking forward to this class immensely, haven taken the previous version on Coursera. Its an extremely interesting class in finance and machine learning. You will learn the basics by which to model and test theories for trading. Its a well done course and assignments are quite structured. The instructor is awesome. \n\nI wish the class was harder and covered more material. Its a great intro, but a follow up classes would be even better. \n\nI would liked to see more on how to implement systems at scale, quantifying different signals, methods on how to automate trading with API's, etc. \n\nHighly recommend. Amazing class, super interesting material, great as an introduction to the program.\n\nDifficulty is lopsided - certain projects are a breeze, while others are much more difficult.\n\nPositives:\n- Great intro to ML, Python, Pandas, Numpy, Finance\n- Very interesting material\n- Manageable workload\n- Have all of the base work done to create machine learning trading strategies for real systems!  I am seeing if I can apply my strategies to cryptocurrencies for fun.\n\nNegatives:\n- Projects / Homeworks were often not finalized even 1 week before the due date.  This made it difficult to work ahead.\n- Some exam questions tricky / unrelated to what was reviewed in coursework.  Two questions on the latest final were about locations in the Big Short movie - who cares? This was my fifth course in the program, and it was one of my favorites.  I really enjoyed how direct and to the point the lectures were without overcomplicating the material.  I also liked the fact that the professor provided supplementary videos that guided the students on how to tackle projects.  A big portion of this course is getting familiar with numpy and pandas.  Another big portion of the course is getting insight on hedge funds, and other types of funds, and how they try to use mathematical equations and fundamental and technical analysis to find ways to beat the market.  A final portion of the class is learning about basic ML algorithms such as Q-learners and Random forests, and gaining insight on how they can be used to make trading decisions.  For many of the projects you have to write reports that are worth a significant portion of the project grade, and you can even get 1 or 2 extra credit points on a report if you put in the time to thoroughly analyze your results.  I enjoyed how the online students were lumped together with the on campus students.  My biggest complaint is there are a lot of details in the instructions that are easy to miss but can impact your grade on a project quite a bit, so always read the directions carefully.  For example, you could lose 10-20 points for forgetting to put your name.  Staying active on slack is very helpful, because people will often point out important points in the directions that you might miss.\n\nUnfortunately, you will most likely not learn enough from this class alone to apply machine learning strategies in real life situations, but the class will give you a strong foundation if you are interested in exploring that field.   Love this class! The projects are very well designed and all build upon each other nicely. The second half of the course is a bit random at times (additional youtube lectures in addition to the normal Udacity lectures) which is due to additional resources added to the class over time. This semester we used Reddit instead of piazza for the discussion forum which works fine for me (although there are complaints from other students). Just keep up with the lectures and projects, remember check in regularly and you'll do well in this class! This class was phenomenal. I haven't taken any ML courses before, and this seemed to serve as a good intro. The course is divided into three modules - basically numpy applications to finance, intro to finance, and machine learning (with a focus on finance). \n\nThe ML projects were the most work. It sounds like based on feedback, one of those projects was moved mid-semester rather than the end with the rest to attempt to distribute the workload a bit more evenly over the semester, which I thought was effective. Even with that modification, it was still the case that the workload was substantially more in the last month, so I'd advise future students to knock out all the lecture material in the first half of the semester. Conveniently, draft versions of all projects are available from the start of the semester, so I was able to work way ahead and not feel overwhelmed when April rolled around. Typically around a week before the due date there are some final modifications to the project requirements, which although annoying tended to be fairly minimal. I believe the intent was to make enough changes to prevent plagiarism from previous iterations of the course. Only once were these changes extremely substantial and disruptive (for the biggest project, no less), but all things considered I think this course was very organized and made it possible to start projects much sooner as compared to other courses I've taken. \n\nThe second to last project was a huge amount of work for me, but the rest were a manageable level of intensity. The projects largely build on each other (most projects reused code from previous ones), so it's essential to stay on top of them. \n\nThe instructors and TAs were generally friendly and very active on Piazza. There was around a week near a critical deadline where they vanished which proved to be quite frustrating for many, but in the end I think being very active 15 out of 16 weeks vastly surpasses the quality of interaction I've found in other classes. This is my third course at OMSCS. ML4T is a fun course and well run.  Professor Balch is enthusiastic about the material and is highly engaged in running the course day to day, which I think is really important for an online program. I've enjoyed the projects a lot - they give a nice intro into the various ML concepts as well as pandas and numpy. This class isn't the hardest I've taken, but it's not the easiest either. It feels like a pretty good balance, and an excellent first class to take. The projects are not a wash and require a good time investment.\n\nIt's been my largest class with 500? people I think, which leads to the one drawback - it's difficult to stay on top of the Piazza threads and participate meaningfully. They just explode very quickly around project deadlines and before exams.  I  know it's something Professor Balch has been experimenting with, such as using reddit last term. \n\nOverall I highly recommend this course.", 
    "CS-8803-001": " Personal background: This is my first semester and I paired with course with Computer Vision. I don't have formal CS educational background or software engineering working experience. I have been programming with Python for a year or so to prepare for the application of OMSCS. I have taken college maths classes (which I dont think is used in this course).\n\nAbout the class materials: The lectures are very interesting and well structured. Probably not wide/deep enough. But the research challenge arranged by the instructor provided good opportunities for self-exploration and learning from each other. It is a pity that I did not spend much time on it. The hardware challenge also seems very interesting. I am not a hardware person myself but the things classmates posts are really impressive. \n\nAbout the instructor: The instructor Jay is very nice and effective. He almost answered/hinted every question on piazza. In a few cases when I twisted my wording to hide my stupidity when asking questions, he seemed to understand my intention and hinted on my confusion directly. I really appreciate his efforts in running this class well.\n\nAbout the projects: Project 3 is challenging. There are too many details that can mess things up. I decided to give it up to get a B but the deadline was extended.  So I \"had to\" work on it for another week and eventually I scored 6 out of 10 test cases and managed to get a A. (I lost 4 points because my solution was not designed to deal with certain situations due to lack of energy).\n\nMy lesson from project 3 is\n\n1) you need to really understand what SLAM is doing exactly in each step (same for the other algorithms taught in the class) . Only after that you can correctly modify the implementation. It seems a lot of classmates claimed that there is bug in the SLAM code. But it did work, at least for some other classmates and me. \n\n2) read and participate in the discussions on piazza. I had to make numerous decisions for the project and I did not have the time/patient to try them out. For learning purposes I listed the pros and cons for my options but most of my decisions are based on the comments from the instructors and other classmates. Sometimes even 'typing' the question helped me figure out the answer immediately. I heard from the instructor that it is called \"Rubberduck debugging\".\n\nFirst class?\nIf you know python and know how to plan to \"solve a problem\" and execute your plan, I think you should be fine. For me, most of the difficulties of Project 3 in the first two weeks came from my messed up code and code structure, which made it very difficult to debug. course content is only for 6 weeks and first project was fun to do. Optional second project was a tough one. But final project took a lot of time for me, as none of the topics covered in the class comes handy to do that project. Overall, I loved the subject Great course. Enjoyed a lot as I knew some concepts and it helped at my work.\nNot for 1st year due to increased difficulty level in projects and grade requirement to be in the program.\nA project can have sub divisions effectively making it more than one project. Projects carried 70% score. Get guidance from Piazza discussions to attempt at them. Beginning of class and up to lesson 3 it's a breeze and less hours is ok but after that the lessons are comprehensive and requires more work to understand. Few projects are all or nothing. 0 score in one project can push the grade downward (A to B or B to C).\nPython programming basic level is ok as many helpful code (copyright) are given to use in your implementation. \nBut to score good in projects which require time-bound outputs advanced level - using numpy, pandas, matplotlib for visualization - may be required.\nTAs were helpful and replied almost instantly to queries on Piazza. I was able to front load a TON of the work and there were about two weeks of doing absolutely nothing waiting for the final. With that said, the final project was pretty dang tough. If I had only taken this class(and not Machine Learning and Machine Learning for Trading before hand), I would have NOT been prepared. The learning curve is very strange, the 1st project(Runaway Robot) had some hard moments, but then final project really through me(and many others) for a loop. The lectures felt very... shallow and I do not think they adequately prepared me for either of the last projects. \n\nI would have much rather had more time spent on some of the concepts, better lectures, and better Udacity quizzes. \n\nThis class really feels like it needs a face lift. \n\nOverall, I would say this class(as it stands right now) could probably be paired with another easy/medium class. Just be wary of the final project and carve out plenty of time for experimenting for it.  So, this is my honest review of the class. The class is not time consuming with the exception of the projects. There are six problems sets (if I don't recall incorrectly), and these are easy to complete because you have the solution available to you and a video that walks you through the code. For the projects, a mini project in addition to three main projects will be given. The projects are very time consuming.  In my opinion, this turns out to be this way because the lectures and material presented in class are effective in showing basic concepts for this class, but fail to expand more into each of those basic concepts to make such material meaningful to solving the projects. Don't get me wrong. Even with the right background, the projects would be hard and time consuming.\n\nGrading of these projects strictly depends on your code being able to pass test cases. If you don't pass any of the test cases, you don't get any marks. It doesn't matter if you have a 1000 line code. That being said, do well in the mini project, project 1 and 2. These projects are doable, and you can get them done in a week or less except for project 2. Spend more time on that one because part b of this project becomes challenging and is code that you can use for project 3. The deadline for dropping classes is right around the same time project 2 is given, so if you flunk project 2 you will not be able to drop the class. It would be better if you could complete project 2 before the drop deadline to be able to better gauge your success in the class. This is something future students should recommend. Project 3 is the hardest. Spend two weeks or more on it. The connection between project 3 and the class material is the least apparent, so you will spend more time figuring out how to proceed with your implementation. Chances are that you will reuse your code from project 2 part b.\n\nThe nice part is that project previews in Piazza usually come a week prior to the release of the projects in t-square. This allows you to work ahead, which helps with organization and project time allocation. So, as soon as you get the project preview, start working on the project.\n\nAs a summary, my recommendation is to 1) Do well in the mini project, project 1 and project 2 to be successful and 2) organize yourself to allocate enough time for each project, and 3) start working on the projects as soon as the project previews become available. The lectures are very simple and basic, and do not provide enough depth to complete the projects. Expect to spend a decent amount of time reading to get up to speed for the projects. Overall, I loved the two projects, but was a little disappointed by the lectures. This class is easy for the regular assignments and quite fun at times. Professor Thrun is extremely positive and encouraging and makes you feel like you just solved the greatest problem when you complete an assignment. \nThe course allows you to work ahead at your own pace which is really important because the final project requires a lot more time and effort than the regular assignments so you want to \"front load\" this class to give yourself more time for the final project. \nDue to being able to complete the assignments ahead of schedule this class lends itself well to being done in parallel with another class by disciplined students (i. e. don't think you can leave stuff to the last minute, do it ahead of schedule and then relax ;) ). \nProfessor Thrun is busy running Udacity so he isn't generally involved on Piazza but the TA's are excellent and Dr. Thrun takes time about once a month to have live Q&A sessions with students.  In general, I agree with all the posts from my Summer 2017 cohorts. Great content, unbalanced projects requiring deeper dives outside of lecture materials--and time requirement exponentially growing in latter projects. Could have been way better managed--really wanted to love this class. \n\nGreat content, generous of Dr. Thrun for the two office hours, valiant attempt by a single TA running the class. Failed to impart any real understanding beyond the pre-packaged video content due to fear of releasing any real help (or content for future sessions) by openly discussing the problem both before or after the fact. Missed learning opportunity. \n\nAgain, the TA being overtly secretive about revealing approaches (not their fault) to the solutions produced the wrong kind of struggle for students. (Vastly different from ML4T, CP or CV--where you're guided to spend time focused on the right problems. ) And prevented forming a deep understanding of the mechanics of the concepts presented. Instead, this lead to time-wasting, misplaced effort and lots of wheel-spinning. The second downside was that once the project was completed, there were no real discussions about how each student approached and solved the problems\u2014hence you\u2019re left with whatever understanding you had without any affirmation or new insight as to the different approaches taken. \n\nThe lead instructor (not Thrun) was barely involved and didn\u2019t seem to be in touch with the class other than to chastise the class for possible violation of the honor code. To be fair, the generous curve at the end provided some relief but overall, it was pretty stressful (in the wrong way). Great course. The third and final project is by far the most challenging part of the course! The class is not easy for those who do not use math or work in robotics for a living. I liked the class but it was a challenge for me. I do think the ratings on this class at the time I took it are very deceiving. Perhaps others didn't need the time I took but the projects both required quite a bit of time. I am an accomplished programmer, and that helped, but I should've taken a linear algebra refresher before this class. Also, I would suggest those who do not program or have very little coding experience NOT take this class until you've had some experience coding or at least really understand the math (linear algebra and trig) that is necessary. While the sheer number of lines of code necessary isn't huge, the application of the concepts require some experience with programming languages (preferably Python but you can pick Python up if you know Java or C). Also, reading other comments here, they've made some changes to the course. Submission of Project 1 is no longer via Udacity. The Udacity grader is still in place and you can use it for testing, but your submission is via tSquare. Finally, I agree the videos could've contained a little more in depth content, as the concepts needed for the projects are not covered in great detail in lecture. Outside research is required if you are not already familiar with the information. This can take more time than counted on but does lead to learning.  Was already familiar with many of the algorithms that were covered in lecture. Later strategies were interesting. The projects are a whole other beast as they test much more than what is covered in lecture. Compared to other courses such as Computational Photography or Computer Vision I would say the projects are 'easier' conceptually but 'significantly less straightforward' to implement.\n\nEg a project which was basically 'implement particle filters' which I've implemented at least 3 times before took 10x as much time to finish as in other classes. This is due to a lack of scaffolding provided compared to other courses (you have to integrate your code and write almost everything that's not related to the core algorithm). I will say they did cover how to implement particle filters quite well. Just that the bulk of your time in the projects is not spent on the core algorithms the lectures cover.\n\nThe projects build on one another so if you didn't manage to get earlier projects be ready to devote significant time on later projects catching up. Lastly the grades are all or nothing (very much like real life) unlike other courses which test each part of the project separately.\n\nIf you are not familiar with the concepts taught in this class you will struggle with having enough time to implement them. That being said the lectures do cover the material quite well. It's just due to the all or nothing nature it'll be hard for you to know whether it is a bug with the algorithms or an integration bug somewhere else.\n\nSemi extra credit in terms of additional projects/challenges was offered, but I don't consider them realistic given the time devoted to core projects.\n\nI would NOT recommend this to new students to the program. For the final project around 1/3 of the students got 0% on the grade on a piazza poll and less than 1/2 got >50% due to the all or nothing nature.\n_____\nTip for project 3: Ignore almost everything that is suggested for this project by lecture. The biggest challenge is not related to what the project seems to want to test you on at all. If you waste your time on the algorithm covered in lecture. You won't have time to work on the actual time consuming part of the project. You won't even need anything you implemented in Project 2 or Project 1B. Just use the strategy from Project 1A to deal with inputs and focus on the real challenge. Learned this the hard way when I ran out of time and discovered my optimized implementation wasn't even needed or used in the final solution. Also for the mini project before hand, there's a significantly simpler alternative that's much easier than the suggested algorithm. Save your time for Project 2/3 instead of the miniproject. This a good course, requiring decent amount of (hard) work. It will strengthen your problem solving skills (and expose your limitations). \n\nTo succeed, you should (a) get started on the main assignments early; (b) make sure you get a solid understanding of different (first half of the video lectures); (c) make sure you have enough time to try different techniques (or work in a team for the final project). \n\nIf you do not do these basic things, you will complain. \n\nRemember that each point counts and some mistakes are inevitable, so make sure that you do not take it easy. \n\nThe TAs do a good job in grading the assignments on time and asking direct questions on Piazza. \n\nIf I may suggest some improvements for the course:\n\n1) The course lectures, assignments, Piazza discussions do not go into much depth. Ideally, this course would have resident Robotics experts, i. e. , people who do this for a living. \n\n2) It might be a good idea for the instructors to ensure that students are indeed learning different techniques (e. g. , SLAM). A midterm or final exam would be helpful. \n\n3) Encourage or even enforce the \"AI\" part in \"AI for Robotics\". Needless to say, providing help on these techniques (e. g. , the math for some filters) would be key. \n\nIn a summary, it's a good course to take (and to score a good grade in), especially if you are not in an \"auto-pilot\" mode. \n\nI come from a SE background, so I had some reservations taking a course that would require some math/physics. But my fears turned out to be unfounded.  This class is different than the others I've taken in OMSCS. It's largely working in isolation as the quizzes are all in Udacity and Piazza is often a ghost town. Dr. Thrun's videos are really entertaining andinformative. The TAs are phenomenal. Probably the most engaged and verbose TAs I've encountered in the project. Ask a question and you'll get more detail than you'd have expected. \n\nI think this class just needs some way to push interacting with the rest of the class. I know a lot of people take it with another course. This makes sense due to the flexible timeline of completing projects, but it leads to people doing their work quietly and moving on. Which is a shame because this material can be dense and it's nice to be able to play ideas off of others. \n\nBut I definitely recommend it.  The dedication of the TAs is impressive. They prepare introductory videos every week, always share materials related to the course, and are quick to respond to questions. The course is very manageable as all materials are in Udacity and are available right from the start. The video lectures are very easy to follow, however I feel that I need to do some work outside from what the course requires for the knowledge to be ingrained. \n\n(Update)\nSomeone asked if you get to learn more advanced techniques in AI4R... \nI am a total noob, so everything is advanced to me... I guess it is how you make of it. The course gives you many opportunities to learn more advanced techniques, but you can complete the course satisfactorily (I guess) without doing so. \n Throughout the lectures and the problem sets, it feels like you are being assisted like a 5 year-old: everything is well explained, you wouldn't notice much if you do not have a good grip. The problem sets are scored as all or nothing, but the answers are also provided so it seems to be just a matter of having tried or not tried. If you want to get more advanced, materials for advanced study are also provided, but it would not really hurt if you do not glance over them. It is easy to get complacent, until you get to the Runaway Robot and the Final Project, which are really challenging. You really needed to take a big leap, read a lot more and explore other possible algorithms to solve the problem. Most of my classmates talk about using an algorithm not even discussed in the lectures for solving the Final Project. \n\n The TAs are very helpful. They do their best to up the participation, even create interesting videos every week. When somebody asks questions, they are quick to dive in. And when they do, they do not just answer: they give expounded explanations like how things might be different for other cases. But this course can actually be done even without interaction with others, so Piazza is sort of quiet.  These surveys are pretty deceptive. This course is easy on the surface. The math and problem sets are easy at first, but escalate very quickly to linear algebra concepts and calculus that you better remember. On the face of it, Thrun is the instructor, but he only has 3 scheduled office hours, and the second one was a huge bomb. The TAs were super active first 3 weeks, and then activity level is at a 1/10 near the project time. \nThe time given for the final project and runaway robot is inadequate in terms of following the weekly plan. I front-loaded, but still was crippled by the math (lots of trig and rotational motion) for the RR( runaway robot). Groups formed off super early, and it's all cliques of people with too much brain power together to make it fair for grading according to their head-to-head rubric. I am not disappointed in the course, but yet again - the amount of work required is deceptive and is >>>> toward math as opposed to CS.  This was a great introduction to OMSCS for me - it was the first class I took. The course lectures were great and helped give a good introduction to the topic. The projects were interesting and really made me work to use the concepts of the class to solve them. I really enjoyed this class. Pros:\n- Lectures are very good and content is super-interesting.\n- Projects are fairly well-constructed and released bug-free with sufficient lead time.\n- Instructor and TAs were responsive and helpful.\n- No exams.\n\nPotential Cons (depending on your point of view):\n- Workload was highly variable.  Weeks without projects were pretty tame, but projects could be fairly time-intensive.\n- Success on projects was highly non-linear.  For most of them, your solution either worked or it didn't.  Points were awarded for individual test cases that were all fairly similar.  The instructor-provided test harness provided examples, so you weren't totally in the dark, but testing wasn't done in a cumulative fashion where each successive piece of code was built on a previously tested piece.  You've got to construct your own tests and debugging process, but hey, that's life.\n- The lecture content and especially the projects are deep-dives into filtering and path planning.  This is core stuff, but doesn't include the breadth of concepts involved in automated cars, much less robotics generally.  There was no machine vision or reinforcement learning content.\n\nOther Notes:\n- 100% Python\n- No group project, voluntary or otherwise, unlike some previous semesters\n- Taking 6601: Artificial Intelligence beforehand isn't required, but probably helpful\n\nMy grade: A The course is very good. The video lectures are well designed and natural to follow. The projects are VERY time consuming, challenging and they force you to learn a lot. \n\nAlthough I enjoyed the course, I felt there was a gap between the lessons and the knowledge required by the projects. This made me seek the content in many other sources. The textbook is depth but it is way more difficult to understand compared to the video lectures. In one hand, the gap between the depth of the textbook and the shallowness of the lectures can be viewed as a problem, but in the other hand, it induced me to learn from other sources.\n\nThe instructor and TAs are very good, supportive and present throught out the whole semester.\n\nOverall the course is great, the projects are really fun and I recommend it to everyone. Initially the course if fairly easy but the difficultly quickly climbs up after the first two assignments. Workload was around 10-15 hrs per week initially but in the last 4 weeks it was over 30+ Hrs per week therefore I would advice that do not pair it with another difficult course. If you are planning to take two courses then this should be the \"difficult\" course and then other one should be \"easier\" of the two. \n\nI was able to get an A in the course and did fairly well but this course is a very hard course. Like others have mentioned the difficulty of the course has changed over time. The last \"sensor-warehouse\" assignment was apparently an extra credit assignment till last semester but from Fall 2017 has become compulsory assignment and is 20% of the course therefore if you do bad on it then it could affect your grades significantly even if you might have been scoring more than 90% up untill that assignment. \n\nThe TAs are super helpful and they encourage students to share their solutions and learn from each other. Almost all assignments can be solved in multiple ways both taught in the class and otherwise. \n\nFinally, having said all that I think this course is fantastic (but hard). Knowing what I already know I would do it again. I did this course with Intro to Information Security, but if I were to do it again I would do it as the only course as the learning outcome would be much higher.  The course has changed. The last Project which was recently added is tough. \nThe Senior Lecturer and TAs are supportive.  This course is very interesting. One reason I love this course is that it tells the most important concepts in robotics in the simplest way. The advantage is that you can easily understand the concepts, but the disadvantage is also obvious that you don't understand where these concepts come from and you have no idea how to practice them when facing a complex problem. The homework are pretty easy and solutions are given to you so they give you a very good opportunity to practice your programming skills in python. Although you can get free 30% from the homework assignments, the projects are not so easy.  Project 2 and Project 3 each took me more than 600 lines of code. They are not easy, but not that hard. As others said, even if you cannot solve the problem with the concepts from the lectures, you can solve them using geometrically solutions. So, overall, how much you learn from the course is based on how much extra work you paid to this course. One bad side of this course is that you either receive 100% or 0% for project or homework, so a lot of students will receive above 95% for the overall score. So the cutoff for A will be most likely 90%. Here it is right up front- don't underestimate the projects.  The level of effort for most students in the course seemed to indicate these projects were also time-consuming for them.  There were certainly people who seemed to tackle the projects with ease, but they were right there the entire time helping their fellow students.  More experience would make things more manageable, but even with the skills, there are lessons for everyone in this course. \n\nLet me sum this up.  You are a GA Tech student! This means you are not afraid of hard work or challenging problems.  The course material is intriguing and immensely practical.  The lessons learned in the process will vary, but you will improve beyond the lessons taught in the classroom.  You could not get more relevant and interesting projects.  Give this course a shot if you are interested.  The course materials, professor, TAs, and other students will make this a course you will remember for a long time.  Good luck!    Took this along with 6310 in my first semester. Was very easy - you can get pretty far ahead on the homework, and then just sit and wait for the projects. As long as you don't dilly dally on the projects, they are pretty easy to figure out. Project phase was definitely harder but nothing to stress about. Great class!  The lectures had a nice progression for concepts with quizzes, but they did tend to mostly give you only high level understanding of concepts.  I found Prof.  Summet to be very helpful and responsive on Piazza.  As others have said, the projects can take a long time.  The udacity assignments (problem sets + mini robot) should be 100% and that covers about 40% of grade.  Be very careful about falling behind on project 2 as you'll want to have a good implementation of it as project 3 is a very difficult extension of it.  I think all told I spent close to 100+ hours on projects 2/3 together.  I would highly recommend a TDD approach for these later projects because they can get pretty complicated and finding bugs once the system is fully built can be very difficult.  Most of the assignments and early projects culminate in the later ones so if you fall behind or have a bad project early plan to spend extra time on the later assignments. Course is a great concept. Thrun lectures are great. But as noted lectures are not tied closely enough to the projects, nor are they going into grad level detail and math that the projects demand. \n\nSummer 17 project 2 was crazy hard out of nowhere. Needs to be more carefully planned for a summer accelerated term. \n\nFinal project : a good group is your best bet. There is a ton to do and try. Did the most learning on the final project, so a rewarding part of the class, but very time consuming. This is a very interesting and enjoyable class. It's probably the first class I had that was almost entirely work at your own pace as you could finish all the assignments and the Runaway project as fast as you want. \n\nThe course on it's own can be easy, but if you really dig into the concepts I think it's rather challenging if not simply hard. I reviewed many lectures to really gain an understanding. That being said, you could easily do this course with another. \n\nThe only wildcard is the group project. In this program people have families, jobs... so coordinating with people all over the place can be challenging. I probably put more time in the last few weeks on the final project as I did the rest of the course. \n\nGreat class and you'll probably be thinking about the Runaway and Final project well after its over.  A great class if you want to learn how to build a self driving car from a software point of view. Taught by arguably the worlds foremost expert. \n\nThe class is actually quite easy and a great first class for OMSCS. What I learned most from the class is how statistical mathematics is applied to robotics and algorithms. It was very interesting how robots deal with noise and uncertainty. \n\nOne part of the course covers how robots can make optimal decisions given a state. The idea and some (but not all) of the terminology maps nicely to Machine Learning, Reinforcement Learning and MDPs. \n\nOverall the class is extremely well done and polished. Highly recommend. The structure of the class means there's a lot of work at times, and then it's pretty dead other times. You begin with six weeks of fairly interesting lectures + online assignments that aren't too crazy. Then you have three weeks or so to complete the first project. If you had a good grasp on the lecture material it takes maybe 3 to 5 hours to come up with a working solution, though I spent 20+ hours trying and failing at the extra credit portion. Then the class ends with a larger project that definitely requires you to comprehend and do research beyond what was covered in the lectures. You can work alone or in groups up to four. I valued working in a group to be able to bounce ideas off others. In the end probably spent 5 to 10 hours a week for the five weeks we had to work on it. There was also an extra credit option where you actually build a robot and implement some of the ideas of the course, though unfortunately I did not get time to engage with that aspect of the course. \n\nCompared to other classes this one had a less interaction with staff or other students, perhaps because enrollment is smaller and there were less assignments. The instructors were not particularly active on Piazza. There were three office hours which were constantly rescheduled and even with few Piazza posts there was often slow turnaround for responses. There was a small group of students, though, who were quite active and helpful. Overall, I really enjoyed this class.  I enjoyed most of the projects and found the lectures to be enjoyable.  Be careful about the last project in the class which is insanely difficult.  All of the other projects were doable and really enjoyed them overall.  This was my first class I did for OMSCS ever and while I enjoyed this class, I'm not sure if I can recommend it as a first class to take mainly because of the last project and how little time you have to complete it especially if you work full time.  The topic is really fun and interesting and there are no tests and papers as well which is a big plus. The course lectures are very interesting and have a lot of hands on programming in them. The projects are very difficult and time consuming. It is not something that you can just do the weekend before it's due. There were 6 small assignments (one per lecture), only 2 required assignments, and one optional project. We were able to do the final project in groups, which helped a lot. Piazza seemed to help a lot less here than it did in other classes. The course starts out quite easy, probably 6 hours a week or so through the first project. Once the second project started things changed, probably 20-30 hours a week for the rest of the semester. The second project hadn't been assigned as mandatory before and it was not really ready to be released. There were a lot of issues with the descriptions and grading of that project. Hopefully it will be smoother in future semesters. The final project seemed impossible at first, but if you just experiment with things you have learned in this class (or other classes) you will find you can achieve decent results. So my two pieces of advice for the final project:\n1) Write a good script to test with. This will really help with #2\n2) Experiment with different approaches. Just try things. Overall I implemented 5 approaches and fine-tuned the best of those five. \n\nLectures: Not many lectures, only 6 but they were of good educational quality though some of the in lecture quizzes had a bit of disconnect from the instructions given in the \"intro\" video for the quiz. \n\nHomework: You have a homework set for each Lecture. The answers are given during the lecture so you should be able to get a perfect score here. (30% of your grade)\n\nProjects: As noted above the first was pretty straightforward. The second was pretty hard and a bit of a mess for our semester at least. The final project can be done in groups if you want, that might help with my advice above about trying different approaches. I went solo and got a good score. (Projects are 20%, 20% and 30% of your grade)\n\nI believe our professor said the class is being handed-off to a new instructor next semester so things could change... This class was so much fun! The professor invented the Google self driving car and uses the course to elaborate on how some of their algorithms work. I was hoping that we would get to design on our own algorithms that could be run through a self driving car simulator of sorts... but the projects are much simpler than that. The Lectures were intriguing and the TAs were responsive! 24% Problem Sets (6)\n36% Runaway Robot Project\n40% Final Project\n\nProblem sets and the runaway robot project are auto-graded in Udacity. You are done once the auto-grader passes. \n\nFinal project, optionally in a group, requires studying a robot's motion over 60 seconds (1800 frames) in a box with a candle in the center followed by predicting its motion for 2 seconds (60 frames) as accurately as possible. \n\nThe lecture videos are excellent. Some of the problem sets are very challenging, but all in all, not too bad. The best part is you can work on the problem sets and RR project on your own time. I was able to finish them in the first month of class and focus on my other courses for the next two months until the final project. Coursework is trivial through most of the term, however if you don't keep up the final projects will be extremely difficult. Videos are very engaging, but I felt like Thrun was completely disconnected from the course - stopped in for a couple office hours only. Amazing TAs this term, overall one of the top 3 courses in the program.  I took this course along with DVA for my first semester. I liked DVA, but I thought this course was much better - I loved it. \n\n**Positives**:\n\nDr Thrun's lectures are fascinating, and he has boundless enthusiasm for the subject. That enthusiasm didn't just come through in the lectures, but in the three office hours he gave throughout the semester. These office hours were interesting too, and he took questions from students ranging from project implementation details to research and industry topics. Pretty cool.\n\nDr Summet's office hours were very useful, and he held them every week. He was also very involved on Piazza and personally answered many student questions. \n\nThe projects are fun. The course doesn't cover *that* many topics, but you will become an expert in A*/DP path planning, Kalman/Particle filters, and PID control. When/if you finish the projects, you'll feel proud. And if you're like me,  you'll replay the Python scripts over and over once you're done just to watch what you made.\n\nIn my semester, the students on Piazza were valuable and supportive. \n\nThere were no tests, and the homework answers were given for free (they still counted towards your grade). No group projects. You'll have many weeks to prepare for most of the projects.\n\n**Negatives**\n\nThe projects really seem all-or-nothing. They use an automated grader to score your projects, and you'll probably have to spend double digit hours just to maybe get a tiny amount of points from the sample grader. The real test cases they will grade with are not given in advance, but sample cases are provided that closely match. Don't underestimate the time commitment you'll need for those projects. We had a week extension on the last project, and still many people reported that they could not get *any* points on their test runs before having to turn it in. \n\n**Tips**\n\nPython is heavily used, and it will be valuable if you're already familiar with it. Start the projects right when they become available. Try to do the projects in stages, like making sure you have basic functionality before meeting the full requirements. \n\nI wouldn't go so far to say that the lectures didn't cover what you need for the projects (like others have stated). The core of my logic for every project was solely stuff we learned in class. That being said, there are implementation details that will take a while to work out, and parameters that will need to be heavily tuned. You'll have to get creative. Purpose: For those interested in autonomous vehicles.\n\nTopics Covered: Basics of statistics, route planning, and navigation.\n\nCourse Placement: Intermediate python level class but starts from very basic buildings blocks so beginners can easily build up their knowledge over the course of the class.\n\nTime Commitment: Workload starts off ~5 hrs per week ramping up over the course to 30+ towards the end.\n\n2nd Class: Not advised but possible for intermediate to advanced students.\n\nNeeds improvement: Learning advanced topics is left completely up to the student and you can pass without ever touching some of the topics discussed.\n\nGrade in class: A.\n\nUseful Prior Knowledge: Path finding algorithms like A*, stochastic programming like Monte Carlo, and a good understanding of geometry are very useful.\n\nRecommendation: Definitely recommended if at all interested in the field. Projects are easily conceptualized and interesting while allowing a lot of flexibility in developing solutions. Extra credit projects allow you to build your own robot or applications of topics learned in the class.\n Lectures: Lectures will give you a high level understanding of the material.\n\nTextbook: Textbook is mathematically dense. If you aren't math savvy, this is a waste of your money.\n\nProjects: Very little guidance is offered on approaching the projects (which is the majority of your grade).\nThey do simulate a \"real-world\" problem, which is great, but can be solved using geometry. By the way, the lectures are completely unrelated to the project.\n\nOverall: I put 10 hours of work per week, because that is how much time you'll spend going through the lectures/problem sets. But to be honest, you'll spend WAY more time on the projects.\nHere is a breakdown-\nProject 1 - 20hrs\nMini-project: 30 hours (based on Project 1)\nProject 2 - 50 hours (based on Project 1)\nProject 3 - 100+ hours (no, I am not exaggerating)\n\nAt the end of the course, many people posted that even though they've taken several other courses in the program, this was one of the hardest ones. Interesting course. The first half of it is very straightforward, you can easily front load the videos and quizzes from Udacity. Unfortunately, the video lecture series are short and honestly insufficient for the final 2 projects that determine your final grade. The final project is very difficult - start immediately when you receive it. With the limited materials provided by the course, you will need to conduct your own research and reading to discover a solution that works and this discovery process can take days to weeks. Do not underestimate this course, this is not an \"easy A\" anymore and will kick into high gear in the second half of the course; be prepared to work hard. This is probably the most easy course in the CP&R specialization. Lectures are very light, can be watched in a week. The course teaches python along the way without you knowing it. All the problem sets are available in the udacity free course along with solutions and thus 30 points are assured. However, the projects require intuition into the topics taught in class. The runaway robot project is available on udacity and this was our first project. There is an optional project being added in this semester which may become mandatory for future offerings and then this course could require more time. Overall, I enjoyed this course. The only con is the lectures are so light that it makes the concepts deceptively simple, however you have to do lot of searching on the net to gain a deep understanding. I enjoyed this class. The content was very interesting and the TAs were helpful and active on Piazza. Content was completing problems on Udacity (24%) in Weeks 1 to 6, runaway robot (36%) and the final project of predicting the future location of a small robot (hexbug) (40%). I think the course was a lot harder than some of these reviews suggest. \n\nThere were two types of challenges for extra credit: research challenges and hardware challenges. I believe the research challenges were new this semester and consisted of finding an article relevant to the Udacity content in Weeks 1 to 6 and writing a Piazza post about it. One research challenge was due at the end of each week. Hardware challenges consisted of creating an electronic project. \n\nThe research and hardware challenges were only counted towards a higher grade if you are at the borderline between grades (if you earn a B but you are very close to an A, if you do well in the challenges you will be pushed up to an A). \n\nWith the benefit of hindsight, I wish I had not done the research challenges, or at least spent a lot less time on them. Finding papers at the right level took a bit of time and writing about each research paper took more time than it deserved. My time would have been better spent progressing with the Udacity videos. This would have given me more time to do the Runaway Robot project and Final Project. Oh well, shoulda, woulda, coulda! \n\nI guess the same could be said about the hardware challenge but as I enjoyed playing around with electronics versus writing I don't regret doing those challenges. My advice for future students is unless you are quick or enjoy the challenges skip them and focus on the core work. \n\nLastly, I would like to comment on the grade distribution in these unofficial course surveys. The grade cut off for an A is 90% but in these course reviews 75% of people received an A so I suspect these reviews are not a true reflection of current grade distribution.  I liked this very challenging class a lot, although there difficulties as well. I am a programmer, but have no statistics nor linear algebra experience. I wasn't sure I was ready, given the complexity, but I jumped in. I felt like the assignments were incredibly fun and challenging, however, I didn't feel like the instructional videos offered more than a cursory understanding at times, and the book was cryptic if you didn't already understand the material. I'd recommend it for anyone who wants a real challenge and is looking to understand a broad overview of many different aspects of AI. The best instruction came from the guest lecturer Sebastian Thrun.  Make sure you know your linear algebra, especially matrix multiplication and other operations. Also make sure you are familiar with Python. Maybe then you might have a chance at getting at least a \"C\". Unless you have some prior knowledge in this field (AI), can you do well; what is taught in the class is not sufficient to get you an \"A.\"  Interesting but not particularly challenging class. The projects are challenging if you try to implement the concepts described in class, but can be solved geometrically otherwise. If you take this, I recommend getting the optional textbook and doing all the research and hardware challenges to extend the content. The lectures and projects alone are not particularly substantial. This course is very hard just because of project-3. For weeks, majority of student's hardwork produced zero credit. Finally, TAs extended the deadline by a week and gave us some breathing space. We were able to manage some partial credit on the last project and a lot of students fell back in their grades. The course is really interesting and has lots of stuff to learn and enjoy. But the projects demand heavy efforts, time and energy. There is not much of guidance from TAs and usually limited to high level ideas only. It will boil down to keep trying to find the best algorithm around the ideas to pass the testcases.  The course has 6 problem sets and 3 projects. The first two projects are related to the content in the course and require a certain level of mastery of that content to complete them successfully. The last project requires students to go way above and beyond to do well. Techniques learned in the 6 lessons were not applicable to our solution for the final project. \n\nAll the work is solo until the final project, which can be done in groups. \n\nThe TAs are pretty helpful in Piazza and office hours and there are several chances to ask questions directly to Professor Thrun. Interesting lectures. Like other reviewers I feel they don't go deep enough but I think Udacity lectures can/will only go so deep in general anyway. The optional textbook helps with that for this course. \n\nRequired for the summer were problem sets on Udacity (30%), project 1 (20%), project 2 (20%), final project (30%). There were numerous extra credit opportunities, both actual EC and pseudo EC that would push you to a higher grade if you were on the boundary. \n\nUdacity has all the answers for the problem sets and it was expected that we would use them before submitting. That's 30% of our grade just given to us. \n\nProject 1 was the runaway robot project on Udacity. Although it appears at the end of the Udacity course, only the first 3 lessons were relevant. Part 5 of the project ended up being extra credit. The first 4 parts are doable with basic math and probability, but the point is to use what was learned in those first 3 lessons. \n\nProject 2 involved helping a robot find its way around a warehouse. Contrary to what others say, the 3 parts of this project directly correspond to lessons 4, 5, and 6. Part A was a breeze. Part B was not but some really awesome students shared their own test cases on Piazza. Instructors used some when grading. They helped me find serious flaws in my code and my project 2 grade was better because of it. Thank you, awesome students. Anyone who didn't use those test cases only has themselves to blame. Part C had so many kinks it ended up becoming EC. Part B was regraded when it was discovered some test cases didn't match the project specs. \n\nFinal project, hexbug location prediction, sounds irrelevant to the material covered in class. It's not. It's certainly doable with irrelevant items but many successful projects used techniques (or extensions) from class. Using extensions of techniques learned in class is reasonable for a grad-level course in a top-tier school. \n\nTAs were great and helpful. Pryby as well, more so than others here suggest. Since this course is strictly driven from Udacity including assignments, this course might seem a bit mechanical. But the group assignment in the end was fun. Gives an insight into the world of self driving car. Overall an engaging course. If you are interested in self-driving car technology, and who isn't, you want to take this course.  This was *the* perfect course.  It had a world renown professor, the head of google's self driving cars, who knows his stuff, explains complex topics in intuitive ways, is enthusiastic and has a sense of humor.  The TAs are great, on top of every thread.  And if you're into this sort of thing, it is E.A.S.Y.  The answers are given!   You can literally just cut and paste code from the answers page and put it in.  The TAs are ok with this.  The lectures are short, and there is no complex mathematics anywhere that you find in many other OMSCS courses (it's all simple trigonometry).  This is the best course ever, and the *perfect* introduction to OMSCS.  If you are just starting your masters, you want this course.\n\nMy only complaint is it was too easy.  Now, a lot of other reviews say it was hard, so hard they dropped out, and there was too much math.  Let me address this.  First, If they think there was too much math here, or it was hard, they obviously haven't taken a truly hard class, like Machine Learning, Graduate Algorithms, AI, Computer Vision, etc etc.  If they found this hard, I don't see how they would be able to graduate.  There is NO math required to get an A (again, you can just cut-and-paste answers).  \n\nThe reason people think it is hard is because they shoot themselves in the foot.  They did not ask 'is there an easier way to do this?'.  They did not read the requirements carefully, or assumed too much.  For example, for the projects, you are asked to predict the next location of a robot.  The lectures are about Kalman filters, and so many people naturally assumed you should be using a Kalman Filter.  But see, that is not anywhere in the assignment.  Why even bother, when it's such a simple solution? The robot is moving a fixed distance at a fixed angle.  SImple trigonometry will give you the answer.  The next assignment, the measurements are noisy, and these people again, for whatever reason, shoot themselves in the foot and try to use a Kalman filter.  It's non-linear noisy movement, so they try to implement the Extended Kalman Filter.  Again, there is no need to do that!  The EKF isn't even mentioned!  There were posts after posts on the Extended Kalman Filter, pages and pages devoted to the topic, for absolutely no reason.   Why do unneccessary work like 'calculating the determinate of the Jacobian Matrix'?  I have no idea.\nThe only assignments you're not given the answers to are the 3 projects.  There are people reporting 100+ hours on the third project alone.  I handed it in within 3 days, and got a 100%.  These people are trying to do it the hard way, like calculate probabilities for distant objects, trying to implement difficult algorithms like graph slam, all for no reason.  Sure, all those things were suggested in the descriptions, and that's what the lectures are about, so kudos to you if you wanted to go that route.  But, and I can't emphasize this enough, there is no need for any of that.  There's no move limit, you can ram into as many walls as you like - that means you can design the most inefficent algorithm you want.  You can randomly carom your robot about the screen and, while slow and ugly, will eventually traverse the entire warehouse.  I can mathematically prove it if you want.\nPoint is, if you're willing to solve problems in your own way, and not the complicated way, you'll do just fine in this class.  I didn't even know python when starting this course and my final grade is 99.5%\n\n This is the first course of Gatech. I have CS background and quite familiar with python.\nAs I look at some previous review of this course, quite a few people consider it as \"bird\" course. However, from my experience, this is NOT a bird course. \nLectures are very good and straightforward, you will be given problem set to solve after every series of lectures, but all problem sets are straightforward.\nHowever, all projects are NOT easy. I did a little bit trick on couple projects to get 100%. But in the last project, I spent more than 15 hours for 3 weeks, I still couldn't completely solve it. \nAgain, python for this course is easy, but math is difficult, make sure understand the math before any implementation.  Enjoyed Dr. Thrun's lectures & office hours. The course instructor & TAs tried their best to help the class with projects & assignments. We had regular office hours which were very helpful in keeping the momentum. \nAll the 3 projects were fun but could have been better especially the feedback mechanism. Having completed CV in spring which seems to have the most well thought of & organized assignments, this did look a little messed up. They should have taken advantage of Bonnie for creating a more interactive response mechanism to assignment submissions. \nOverall learnt quiet a bit on the subject which in itself is such a vast feild & cannot be expected to be mastered with just 1 graduate level course... Great course: great instructor, great TAs, great content and exciting assignments. My only minor concern was that I found the material a bit too short (you have lectures only every second week). Be sure to start to work on the final assignment early because it is harder than the rest of the course, I found myself running out of time while I still wasn't 100% finished with it. Also, brush up your python a bit to make things easier. The class is quite easy and a great companion course for Computer Vision or Computational Photography class if you can manage 2 classes a semester (I had a bit of prior knowledge in AI, computer vision and control theory, I found half of the course already familiar). ", 
    "CS-8803-004": " very interesting topics. I took the first offering of this class online and as a result some of the assignments/projects were vague in their requirements, but the professor and TAs were very helpful. The project and homework workloads have been pretty much alike. In both cases, the assignment descriptions have been vague and piazza has been a great help. \nThe video material is nice and concise. \nWe haven't had an exam as of March 17th 2016. \nThe first project was insanely ambitious and the next one sounds exciting. \nOverall I think it's been okay for a first run of the course. I'm having a good time. \n\n[Edit, May 11 2016]\nThe final exam showed great improvement from the project and assignments before it. It was, in fact a very well produced exam, which evaluated the student's knowledge and insight, rather than plain memory. \n\nOverall, I still think it was a good first run with an inevitable learning curve from the staff side. Next offering will no doubt be much better. \n\nAgain: A lot of compiler plumbing is present in this course... and not one ARM Cortex processor.  The course name clearly doesn't do much justice to the content. It's got nothing to do with embedded software/programming. \nClose to 1/3rd of the course is dedicated to ILP, VLIW etc which are more an computer architecture topic. CS6290 will provides a more solid foundation in this area (although not specific to VLIW based processors). \nThe next part deals with different aspects of compiler optimizations for VLIW based processors which was clearly more interesting. The lecture videos give a decent introduction to the topic & rest of the details had to be uncovered in the research papers on the topics. \nThe assignments were mostly appropriate to the topics covered in lectures. The TAs as well as Prof. were always active on piazza to that was helpful. They regularly had office hours so there was never a dull moment during the course. \nOverall I would recommend the course if you are interested in very low level working of embedded architectures & compiler optimization for embedded processors.  I liked the subject matter which is why I took the course. I found some of the material quite interesting and some just okay but that is all personal interest based rather than anything wrong with the material. The good news is that the professor does a good job explaining things, material is interesting, and grading was generous based on understanding concepts rather than rote memorization. The bad news is that one of the TA's did not do a good job of interacting with students on Piazza: some questions were ignored, some were marked as answered but still ignored, some were answered with short unhelpful responses (even condescending ones), and maybe 25% got useful answers. There were also a couple issues with mistakes on assignment and project requirements (incorrect assumptions and documentation, missing or incorrect files, etc. ) that didn't get addressed until just before the due dates. If you work hard in this class you will do a lot better than you might feel like you are doing due to the frustrations with trying to get questions answered and clarify buggy requirements. If you are interested in optimizations for compilers for embedded architectures this is quite an interesting course. You just need to be able to overlook the frustrating lack of Piazza support. Reviewing near the end of the course. Great course that focuses on how classic CS concepts like graph theory can be practically applied by tailoring software for embedded systems. \n\nThis class isn't a hardware course, nor is it a course on how to write software for an embedded system. It's a class on how software is manipulated to run efficiently on power, hardware, and size limited devices. \n\nIt covers:\nembedded system instruction set architectures\nhardware support \ninstruction level parallelism\npipelining\nand compiler optimizations that take regular code and compile it such that it can run on embedded systems. \n\nThe course was condensed for summer but I think we still covered the same material. We had 4 homework assignments (initially 5), each taking about 5-15 hours to complete over 2 weeks. There was one project, taking about 20-25 hours to complete over a moth. There were also homework assignments due during this time. I think the full semester may have two projects, and two more homeworks that were smaller. \n\nThere was a proctored midterm and will be a proctored final, the midterm took an hour to complete (you get two hours). The level of difficulty was on par with the homework, but the test is closed notes. \n\nIn the condensed semester there were 2 lectures series and a reading per week for the first half, dropping to one of each after the midterm. The hardest thing to keep up with is covering the material in order to do the homeworks and take the tests, I recommend watching at 1. 25 speed due to reduce time spent. \n\nThe project and one homework were C++ programs. You can do this in your own environment, but you will run some code on GT's deepthought cluster via SSH. There's no GUI, but all you need are basic Linux commands. The assignments were straightforward implementations of concepts from the lectures/readings. \n\nOverall I highly recommend this course. If you are taking CCA, this course will apply some of the Graph theory concepts covered there.  Course discusses optimizations done by compilers for embedded processors such as ARM. \n- Part 1: Architecture: weakest part teaching-wise. I think HPCA would be better here.\n- Part 2: Compilers: very clear and interesting.\n- Part 3: Compiler Optimizations: each lecture dicusses an optimization idea/paper for compilers. Very clear and very interesting.\n\n- Projects: 1 coding project (teams of 2) and 1 profiling/compilation project (individual-based). The first project was very nice and challenging. All in C++. You need to buy a raspberrypi for the second project.\n- HWs: 4-5 total. Take time to complete, pen and paper based. Couple of them needed writing small code snippets. Not hard HWs, but not easy either. Just the right level.\n- Final was medium difficulty.\n- The main problem (a big one) with this course was the TAing. Hope it\u2019s fixed now.\n 1. The name of the course is a bit misleading.  The course deals more with compiler optimizations for embedded systems than programming for embedded.\n2. Even so, the lectures were well done and the required reading adds to the course.  You'll learn a good amount.\n3. The concepts are not overly difficult. or time consuming. The TAs for this semester were not stellar - this was the only real negative about the class.\n\n4 homework assignments - require about 5-10 hours each applying lessons/reading - fairly easy\n2 projects (1 with a partner) - requires about 40 hours total work each - fairly easy if you put in the time\n1 comprehensive (proctored) final exam - takes the full 3 hours, only hard because the questions are not well formed and the required syntax is not suited for an online exam\n\n\nOverall, I liked it, and I could recommend it if you ever plan to work with embedded systems (the under the hood knowledge is valuable). I agree with most of what has been said about the Summer semester. This is a \"1. 0\" or \"1. 1\" version of the class however. The professor and TA's were very active and helpful in Piazza. The only frustrating part for me was the homework being so vaguely or inconsistently worded, so the advice of waiting a day or two and reading Piazza very closely I would also second. The grading was fair however, and the homework did become more clear after clarifications via Piazza, so in the scheme of things this isn't the end of the world. I would still very much recommend this class if you want to learn more about pipelines, VLIW, etc. ", 
    "CS-8803-008": " This was a fantastic course. The lectures, HW, projects were self sustaining and HARD, but you will walk away a much better programmer and have had an opportunity to really apply topics related to computer science. I loved the course topic and organization so much, that I may take it again in Spring or Fall at some point in future. \n\nThe projects require a SOLID understanding of C++ or Java, and if you are not an super start programmer with strong data structure and algorithm skills you will need a VERY STRONG partner. This class is not watered down at all, and partially what made the class so great. If this course is a reflection of the Professors other courses, I plan to take all of them. Background: I'm a software engineer working in parallel algorithm implementation using C++, married with no kids, and this is my 9th class in the program. \n\nThere is a project consisting of writing a compiler for the language Tiger. You're provided with a scanner that gives you a tagged token stream and you have to write a top-down, table-driven parser, modify the grammar to make it LL(1) or as close as you can get, and produce four-address code that assumes unlimited registers as an intermediate representation. In the second phase, you perform register allocation and instruction selection and generate MIPS instructions. Although you learn code optimization, the grading emphasis is on correctness, not performance. \n\nThe project is coding-intensive. You can use either Java or C++ and are provided with a few default data structures that you may or may not use. Most of what you need you have to develop yourself. As it is a table-driven parser, your best bet is to write a code-generator that parses your grammar spec and creates the table, which is what something like yacc or ANTLR does, but you're not allowed to use those and have to write your own parser generator. \n\nThere is also a written homework every few weeks, similar to CCA in that you need to answer some think-cases, but much easier in that you\u2019re just working through existing algorithms, not devising your own and proving they work. There is also a comprehensive final. \n\nAlthough it\u2019s a first run, the course feels like a finished product. It is very well-run with clear requirements and the material is fantastic. Be prepared to do a lot of outside research to figure out how to get a working product unless you\u2019ve done this before, but it is well worth it and extremely satisfying to see your baby in the wild. You\u2019ll leave with the know-how to create your own basic programming language. As said by many, this class is quite hard but interesting if you really want to know the internals of how the code that you write gets transformed internally.  4 Homeworks (30%),  1 Project (group of 2 - 3 members) 35% , 1 Final exam (35%) which is quite good as if we have midterm exams, this course can't be complete in the 3-4 months time.\n Try to choose the team member of the project who is good at C++ / Java, may be 2+ years experienced, as that will save a lot of time in coding for the project.\nPoints which I hated about the class are\n1. the lack of response by Professor in Piazza. Its only weekly once during the office hours he answers the questions\n2. Coordination miss between the head TA and another TA (this TA was scarcastic & harsh in the response).  There were only 2 TAs as the size of the class is < 50.\n3. When you post private questions on piazza on how to proceed for a question in homework, the TA hardly cares and makes it public and waits for other student's response which you hardly get. So it remains unanswered till the due date of the homework. \n4. The homeworks don't cover all the pieces that you read. Few of the concepts won't be tested and the last homework was a copy from the lecture slides\nThings l loved \n1. The textbook prescribed. Sometimes you get that AHA-AA feeling.\n2. The project.  It helps you understand the subject well as you will be designing a compiler from scratch for a programming language.\n3. The course contents and the lecture videos.   I took the course with some experience of java and some knowledge of algorithms and data structures(including graphs). This course is excellent, provided one is ready to spend at least 15-20 hours per week, attending video lectures, reading books and doing projects/assignments. This course will teach you how a program like Java or C gets compiled though different phases, and finally gets converted to machine level code. Be ready to be challenged on programming projects as you will need to use data structures extensively, when implementing different phases of compilers. Lecture videos are excellent and reading books, though encouraged by Prof Pandey, may not be needed in some cases. Overall, an excellent learning experience and highly recommended. If you take this course without having taken the undergraduate equivalent, you will be in for a wild ride (i.e. what are you doing here, walk away slowly). Per other descriptions, you will be implementing an entire compiler! \n\nPros:\n\n1. The lectures are very good and don't cover useless material like other courses (cough, cough, CV). \n2. The projects are useful. You will get an actual compiler at the end of the day.\n3. There's no hand holding while creating the compiler - you will build everything from the ground up.\n4. The TAs (now gradudated) responded almost instantly on Slack and Piazza.\n\nCons:\n\n1. The HW is graded far too rigorously.\n2. The actual project is haphazardly graded (i.e. they're not using a rubric so you will get a somewhat random grade).\n3. The project specification is so vague that you will be constantly asking for clarification on Piazza. This was nerve wrecking and frustrating. The lack of professionalisim on behalf of the TAs made this worse. This is an incredibly difficult class with a very large time commitment. The lectures are dense but helpful for the most part. These lectures gloss over some details which force you to read the book which has moments of utility but is by and large, a jargon-riddled dumpster fire. The book uses some dreamed up syntax to express some of the algorithms which is pretty taxing to understand. The best approach is just to re-write the algorithm in code into you get the results you expect. The homework is very difficult because the questions are vague but expect precise answers. Fortunately, if you head my advice for dealing with the text book, you can use the same approach and produce code to solve your homework. You don't get credit for the code but it certainly make producing nice LaText and reduces the chance of you transliterating something in your process. If you can explain your approach, you might be able to retain some points but overall, the homework grading is very strict. The coding portion of the project is massive. Absolutely massive. I think it should have been split into at least 3 projects but that may have slowed the class down and there is a lot of ground to cover. I have no complaints about the project grading or what they asked of us. The project document is pretty vague and you have to interpret and justify a lot of your design decisions, just like in real life :)\n\nThe final was not fun and was pretty much like the homework. Treat the homeworks like a practice exam in order to get a feel for the final. The final grading has a decent curve so don't give up, always submit at least something. The way the assignments are weighted, you can't afford to skip any single task. Excellent course: content, organization, staff, and programming assignments. \nVery interesting to learn how code is compiled, and how compilers optimize the code internally to make it more efficient. The course covers all compilers phases. Lectures are crystal clear. Professor has been very committed to the office hours (weekly), open to different types of question. TA is very prompt, rarely let a day pass with unresolved piazza questions, with clear concise answers. \n\nProgramming projects! Not for the faint of heart. Implemented either in C++ or Java. No starter code. As I understand, the summer version of the projects is a bit different than Fall/Spring which included more compiler phases but with starter code. Be very well prepared with one of those 2 languages. And explore data structures, you'll need to use lots of sets, vectors, stacks,... etc as well as structs. Projects can be done solo or in teams of 2, but we were strongly advised to work in teams. And having taken the solo option and spent tons of time to keep up with this choice, I recommend you find a team mate unless you're an experienced programmer. \n\nThere are 2 projects, the first is a front-end project where you implement a simple scanner, and implement a parser generator and an LL(1) parser. The second project was much harder, where you implement 3 methods of register allocation on IR code and convert the code into assembly, and simulate the assembly using SPIM simulator. \n\nThere were 4 HWs, that take a bit of time, pen and paper work, but they were excellent in measuring how well you undrstand the material. \n\nThere's a final exam, haven't taken it yet, but it should cover the entire syllabus. \n\nAs I remember Projects: 35%, HW; 35%, final exam: 30%\n\nPerhaps the only con would be the absence of an auto grader, and being given basic tests to try our code against, you will have to devise your own tests, otherwise risk failures with the grading tests. \n\nHighly recommended. The first pre-requisite of this course is patience. Lectures are long and intense and the project is also very long, but you get to learn. Homeworks require pen and paper work but are interesting and not as hard as project. Final is said to be consisting of some MCQs and some essay type questions, but what we got are 3 MCQs (worth about 10%) and rest problems. Final is similar to homework problems.  \n\nThere are a few logistic issues like you dont have a practice exam or you dont know the cutoffs for grades, but overall it was a decent course. Grading is not that strict, but cutoffs are high (not as high as absolute grading). \nBeing patient and not giving up will be rewarded in this course.   I took this during the Summer semester, so it was accelerated compared to a normal-length semester. \n\nThe lectures were good, for the most part. One frustrating series of lectures was on live ranges and webs. Resources around the internet on these topics sometimes consider them equal, and sometimes don't. This part of the lectures seemed to gloss over how they're actually built, which was problematic, since one of the projects was centered around them. \n\nSpeaking of projects, they were useful, and it was cool to implement some of the algorithms/processes used in the various compiler phases. Grading seemed to be very generous; I got full marks on both projects. I'm not sure how they were graded or how many different types of inputs were thrown at them. There was a partner option for the projects, which I reluctantly took advantage of for the second project. Just a heads up in case you're anti-group project like me. \n\nThe exam was tough but fair. I was able to score well after studying the most important algorithms from the class. The good:  \nThis was the most practical of all the courses I have taken.  You use modern compiler tools, assembly code, optimization techniques that can work for any program, and the stuff about parsing is almost exciting.  Ever write a program that got too big to manage?  Parsing and Intermediate Representations is the answer.\n\nThe bad:\nThe course is run entirely by the TAs.  The instructor does not participate.  You may get lucky, but my TAs were horrible.  They may be very nice people but they cannot teach.  Their English is not the greatest, and the questions they ask are vague and ambiguous.  Without exaggeration, every assignment and project was riddled with typos or mistakes.  And not little ones.  We're talking missing verbs, references to variables that don't exist, output examples being wrong, unstated requirements, or just bad English.  \n\nIf I were to give examples I'd be here all day.  A very simple example is being asked to re-write some code.  I added two lines.  It fulfilled the requirements, and it worked.  I got 0 credit, with the explanation 'Instructions say to rewrite'.  Submitting a regrade request led to more points being taken off a different question.\n\nThese TAs seem incapable of understanding ambiguity.  Depending on how you ask for clarification, you will get conflicting answers.  I tried reducing all piazza posts to yes/no questions, and even then they answered 'yes' to 'can I use string concatenation' and then marked points off for using string concatenation.  Stuff like that, all the time.  If you don't give the exact answer they expect, regardless of whether you met all the requirements or not, you fail.  They are very strict and do not appear to read your explanations.  I think they suffer from TL,DR syndrome.  Considering most of the questions are about invented, imaginary grammar, it's impossible to prove your point to them.\n\nSame thing for projects, with the added complication of partners who went through the same confusion, asked the same questions, and got different answers because they asked a different way.  The lectures are about generic parsers, and are unrelated to any actual work, which made things worse.  Try convincing your teammates that both the TA and the lectures are wrong.  Not gonna happen.  So you stop pushing commits to Git, because they keep changing your code, you end up doing all the work yourself, are accused of not being a team player, and then as time runs out they end up using your code in the end because you knew what you were talking about.  This actually happened to me.\n\nIf you don't care about your grade, and can handle nonsensical feedback/scores, you will learn some practical stuff.  Otherwise this course will make you question your sanity. PROS:\n1. If you are interested in this material, it is a good class in terms of what is being taught. You will build a compiler from the ground up.\n2. The grading was generous.\n\nCONS:\n1. You better learn about registers and memory on your own because it is NOT covered in the least. A lot of times is spent on parsing, regex, languages, etc. and zero time is spent on the technical part of a compiler.\n2. As another reviewer said, the course is run mostly by the TAs. When I took it, there was one very vocal TA in that they were active on Piazza and Slack, but their answers were TERRIBLE. When I realized this, I tried phrasing my questions as yes\\no or as multiple choice, to try and steer them towards actually answering them, but never did they just give me an answer! \n3. The professor participated in office hours, but had no idea what the current homework was. He would be asked a question and would have to look at the homework as if it was the first time he's ever seen it. The homework had plenty of typos and ambiguities.\n4. All the answers, from the professor and the TAs were always so laconic. This is an online class based mostly on text. This is a place to answer in full sentence and elaborate, or else what is the function of having a class vs. just having lectures?\n5. The lectures are very general, so not very helpful for the homework and the project.\n\nThis class makes all other classes I've taken before and after seem like a dream.", 
    "CS-8803-009": " Took OMS CS-8803-009 in fall.   It tests lot of skills, MatLab, C, Calculus, differential equations.   The material is so interesting, as it focuses on autonomous cars and airplanes.   I had a great group of 3, two of my group members took the on-campus section.    Secondly it had a good professors, it was joint between Eric Feron and Hughes.    Lastly the TA was great in office hours.    The office hours were held on Saturday am which made them easy to attend.     I learned a lot in the class as I have a fascination with autonomous system.   But like everything you get out what you're willing to put in.       Also it by far the most different course from any I've taken in the program. \n I echo a lot of what the other reviews from this semester say - 1st half easy and pretty enjoyable, 2nd half frustrating and generally a waste of time. You can be successful in this class if you are an effective bullshitter, and can respond to vague questions with equally vague responses that are technically correct. Any PID experience will make things go faster but other than that common sense can get you through most of it. Just DO NOT take this course unless you do real-time embedded systems for a living. The first half of the course was ok. Once the second half started and Professor Jerome Hugues appeared, the misery started.  He does not teach you anything and seems cocky and arrogant. The assignments he gives have no explanations behind them anywhere and are based on the material so arcane and esoteric, that probably only 0.001% of the IT world uses. The responses he gives on Piazza are so confusing - you wish you never asked the questions in the first place. Just spare yourself and stay away from this course. Overall a very good class for general computer science program.\nPrerequisites: Python (basic), C (basic), controls theory (undergraduate level). \n\nI definitely recommend taking the course, especially as one of the earlier courses in your plan of study. The reason being that the content, assignments and projects introduces a lot of different fields - network sockets, controls (primarily open vs closed loop with single and multi-variable feedback), system modeling, embedded programming and architecture design & analysis among other CPS topics. The course can be coupled with SDP course and I think the two together shall provide a strong fundamental mechanisms required for other OMSCS courses. \n\nI found the Udacity lectures to be very good but with lot of information. It is a good thing! I took lot of hand-written notes as I went through the lectures and that was helpful to enforce the concepts/theory/case studies. The assignments were primarily hands-on, i.e. programming in C or Python. Starter codes were provided for all assignments/projects and the tasks themselves don't require a lot of programming but it requires understanding of how the starter code works. Understanding involves ability to read the provided code and also run experiments with the code. This might require exploring some external resources especially in C or Python in case you have minimal experience. The instructors are very helpful and held a weekly Q&A session (Saturday), though not many students participated to take advantage of the instructors availability. Beyond that any additional information required for the tasks has to be researched just like in any graduate course.\n\nThe course towards the end introduces AADL (a model based language) for a project but the time frame to learn AADL was short and coupled with the project deliverable which made the project more challenging. But challenges are fun, right? I found this to be one of the best part of the course. It would have been nice if at least the last two projects were based on AADL as that would give ample time to learn the language and related simulation tool and also be able to focus on the required project tasks properly.\n\nIf you are interested to know about - systems at large, embedded systems, real-time systems and controls, robotics, quadcopters (lot of examples based on this) and architecture development, then take this course. It is a good introduction from both computer science and CPS perspective. After taking eight courses in OMSCS (all As), my biggest regret in this program is taking this course. Don't take it. And if you're signed up for it, then drop it. By the second half of the course a second professor, Jerome Hugues, comes in and is a highly ineffective teacher. \n\nHe doesn't care to teach and rather just gives an overwhelming assignment and wants you to ask question. But he's French so to American students he comes off as a rude ass when you do ask questions. His answers are very indirect because he doesn't want to spoil the process of a student figuring it out for themselves... the end result being that the student never figures it out. \n\nThere are no prereqs to this course but if you don't come from an engineering background then you will be at a disadvantage during the first half and then completely lost in the second.  This class was bad and got tremendously worse after the withdrawal date.  The lectures aren't relevant to the assignments, the assignments aren't complete enough to complete without attending office hours.  In addition, the professor frequently either blows off or is more than 15 mins late to office hours, and then he can't operate webex.  And that's the first half of the class before you get to the second professor who will remind you he's just an adjunct as an excuse for delayed responses when you have questions about the vague assignments with VMs that don't actually work so you lose 3 days on an assignment waiting for him to say how to fix his VM.  Nevermind that 95% of the students are full time students with other responsibilities and some have other classes to schedule around as well.  I had 90% plus on every assignment in this class, and A's in 3 of my 5 previous classes, and I'm now attempting to get a C in this to not bomb my GPA, RUN the other direction. This course is effectively two, so must be reviewed in two parts:\n\n* Part one is taught by Dr. Eric Feron, who is a GT professor. This is the far better of the two course parts. The homework assignments and projects are well-defined and fairly straightforward, if divorced from the content of the lecture videos.\n\n I honestly did not even watch the course videos for the most part, and found them tangential at best to the tasks you're asked to complete. The actual videos are produced well enough but lack any kind of context or narrative thread, so it's very easy to just let it go in one ear and out the other without retaining anything. The Udacity course also commits an imho cardinal sin by embedding multiple videos on a single lesson section and consequently disabling auto-play (which goes back to the aforementioned lack of narrative thread). Ultimately though, as I noted before, this isn't a huge deal because the lecture videos aren't particularly useful -- in fact, the few instances when I did try to reference them to clarify something in an assignment I couldn't find anything pertinent.\n \n The homework assignments varied quite a bit, starting with basically some short Q&A/essays on cyber-physical systems, then going into basically a homework assignment solving a physics 101 problem (calc-based physics 101, to be clear), and then some minor coding assignments in C around black-box testing and input-output feedback loops. The essays required a day or so of work to compile, but neither the physics quiz nor the coding assignments required more than a couple hours work.\n\n Both projects involve commanding either one or a set of [GRITSbots](http://gritslab.gatech.edu/home/2014/11/the-gritsbot/) to accomplish a set of specified tasks, subject to a set of specified constraints, in a MATLAB [Robotarium](http://robotarium.gatech.edu/) simulator. You also have the opportunity to run your code against live robots in the Robotarium for the first project, which is neat but also frustrating, because you're only allotted two attempts in the actual live environment, and will likely find that your robot does not behave live as advertised in the simulation. This is not an issue for grading though, as you are provided a data set to use if needed for the analysis portion of this project, and are graded for code based on the results of the sim and not the live result.\n\n Both projects should be completable with a dedicated weekend of work.\n\n If the _entire_ course was just Dr. Feron's course, I would've probably rated this class \"Neutral\" with an \"Easy\" difficulty. I don't feel like I really _gained_ much from it, but the assignments were for the most part entertaining and it's elective hours.\n\n* Part two is taught by Dr. J\u00e9r\u00f4me Hugues, who is effectively \"on-loan\" from the Institute for Space and Aeronautics Engineering, part of the Universit\u00e9 F\u00e9d\u00e9rale de Toulouse Midi-Pyr\u00e9n\u00e9es. He is highly credentialed and active in the CPS field. But don't for a second be fooled into thinking that implies he's effective as an instructor in this course.\n\n As Dr. Hugues is French, there is a language barrier to be overcome for the predominantly Anglophone demographic of the OMSCS program. His lessons and assignments are of course delivered in English -- you don't need to learn French, of course -- but his spoken English _is_ heavily accented and difficult to understand, and his written assignments often lack precision.\n\n Whereas the assignments for Dr. Feron's portion of the course were well-defined and had explicit questions and/or objectives, Dr. Hugues' assignments were exclusively _extraordinarily_ vague and open-ended questions, as though he's attempting a Socratic descent into teaching the material. That works _great_ in an open classroom setting where students and mentor can collaborate on exploring the topic. It is not at all appropriate for a graded assignment for which you're only allowed one submission.\n\n As another review noted -- and I don't know if this is just a cultural misunderstanding or actual personality -- Dr. Hugues can also be quite brusque when you attempt to ask for clarification. He often declines to answer questions outright, asserting that it's deliberately vague so that you can decide how best to answer (but how can I answer when I don't understand the query?).\n\n It could just be that I am not a smart individual, and certainly some students in the class were able to complete his assignments, but for both of them I found myself completely lost and in the mindset of \"I understand the individual words you've used, but I can't put them together into coherent entities that make sense in my brain.\" I've spent days trying to dissect his project and still don't understand what it is I'm intended to do. I suspect that, given Dr. Hugues' background, he just assumes a _lot_ of systems engineering background as common-sensible, which is probably a valid assumption at his home institution with his home target audience, but _isn't_ valid in a computer science course that has, at best, only an informal prerequisite of anything of the sort. I sure as hell don't, and I'm suffering mightily from it.\n\n It is worth noting that Dr. Hugues' portion of the course does not begin until _after_ the drop date, so Dr. Feron's portion can easily lull you into a sense of false security about where you stand grade-wise. With a _perfect_ score in the course going into drop day, I'm now basically assuming zero credit on all of Dr. Hugues' assignments and hoping I can perform well enough on the final (I think I can, since it is, I believe, prepared by Dr. Feron) to maintain a C.\n\n Consequently, for Dr. Hugues' portion of the course I would rate \"Strongly Disliked\" and \"Very Hard\" in terms of difficulty: I have learned nothing and gained nothing but frustration from it. I _do_ think that if you were able to surmount the language barrier, expand this to a full course on its own merit, and assume less in terms of prerequisite knowledge, this _could_ be an effective course. But absolutely not as it currently stands.\n\ntl; dr: Take this class at your peril. If you have an EE or systems engineering background you're probably going to be fine. If you don't, or have never worked on cyber-physical systems before, this is probably not an appropriate first course. (No, [6263](https://omscentral.com/courses/CS-6263) is not ample preparation.) This class is going to vary a LOT based on whether you have the mostly unmentioned prereqs.\nYou should have a strong math background.  It would be best if you have some sort of engineering background.  \nC, Matlab, AADL...\n\n\nThe material is interesting.  The lectures have almost no visuals and define very few of the in field concepts (mostly AE related).  It is difficult to find outside references if you do not get something.\nThe homework and projects seem like they would be easy *IF* you understand most of the concepts with little help.  If you are starting with ANY sort of deficit in background, they will be miserable.  So... high barrier to understanding what is asked, low-medium amount of actual work.  Almost all of my time was spent trying to look up concepts that weren't explained in Physics, Math, Matlap, AADL, etc.\nHomeworks, team projects, individual project + final exam.\n\n\nThis will be my lowest grade in the program with a 4.0 average otherwise, and most of the way through the program.  \n\nAppending a note after the final:  Final was fine compared to the rest of the course, but released quite late.  I really don't know how they'll adjust the schedule in following terms, but as we didn't even get to the final lecture, clearly they have some things to consider.  It has a lot of kinks to work out.  The prof seems enthusiastic, so I'd expect it to improve, but... expect to have to watch the lectures early, study, and need to pick up a lot of additional info.", 
    "CS-8803-GA": " It is a tough class, but is well worth the effort since you will learn concept that help you in almost every other course that's math heavy. I highly recommend taking this as your first or second course.\n\nAs noted by other reviewers, it takes Practice, Practice, Practice! Do all the homework and practice problems and additionally, the DPV textbook has a ton of practice problems and you can find more from other sources. Excellent course and great professor Eric Vigoda. The video lectures are of high quality and clearly explained by the professor. The course is heavily exam based - 85% of score comes from 4 exams (this might change in future semesters), one programming project (10%), and home works (5%). The course also required you to read the text book (DPV mainly) and do the practice problems. Overall, course is not too hard if you have some CS knowledge (data structures, recursion, graphs etc). The focus is heavily on understanding the algorithms and applying them in new problems rather than memorizing algorithms. So it is very important to do as much practice problems as you can. Overall, this is the most rewarding course in this program! This was a very difficult class, and it took me a lot of time to really master the materials. Listening to the weekly lectures and taking notes alone took me about 10 to 15 hours per week because I had to rewatch them several times to fully understand the topics. Doing the homework took about 5 hours or more per week. And, I spent about 20 hours or more per week to work on extra problems and reading. And so, on average, this class took me about 35 to 40 hours of studying per week. Can you do with much less amount of time? Absolutely! But it depends on a few factors. First, it depends on your goal: are you okay with a B (I'm not; I want my A)? I know some students who spent 10 to 15 hours a week, but were struggling to get into the B range or were solidly in the B range. Second, it depends on your background: are you familiar with the topics already (I'm not) or are you the brilliant type (I'm not; I have to work hard to get my As)?\n\nThe exams were hard but fair. They weren't tricky, but you absolutely need to be careful lest you'd make silly mistakes. But, from personal experience, and from what I gathered from Piazza, it was almost inevitable that people would make small mistakes, some of which had disproportionately large deductions, and so don't kick yourself too hard when you do make those types of mistakes.\n \nTake my review with a grain of salt. I'm the type who pushes myself very, very hard to fully master everything about anything, and I strive for the high scores in my classes, which I did in this class. This was a hard class but nowhere near as hard as 6505. This should be manageable if you have time. My biggest issue was that I didn't like the tests. You would have 4 questions and that was it. If you couldn't figure out a question (Dynamic Programming, Graphs, NP complete, or Max-Flow) you were screwed. But, you don't have a choice unless you do II for your specialization.\n\nThe TAs and Instructor are great and will help you as much as possible. One of the more difficult classes in the OMSCS programming. Light on the programming but heavy on the math. Be sure to practice the material a lot before taking this class. The questions are very similar to the book and class material but require a lot of practice. The topics may be somewhat useful to the job but is definitely more oriented towards learning for learning's sake.  This course is very hard but also very deep. It covers algorithm design techniques such as dynamic programming, divide and conquer, linear programming, greedy algorithms, reduction, and np completeness. \n\nThe course is almost entirely graded on exams. That makes it extra difficult.\n\nIt requires that you spend serious time doing a lot of exercises so you get very good at things like dynamic programming. (I'd suggest you get the book and start doing those exercises now.. and keep practicing DAILY)\n\nI like the course because it gave me a deep appreciation of graph algorithms that I had previously not cared for. If you put in HARD work you should survive. It won't be easy. So I tried this in the fall and had to drop. It was tough material for me to grasp, and I needed a better game plan than what I've done for other classes.\nAfter retaking it this spring, I wound up with an A. Here's how:\nSo this spring when I took the class, I went in knowing that I needed to work on this class every day. So for the first month or so, I did at least 1 dynamic programming problem a day. And not just the ones they recommend - I did all of the ones in the DPV text, all of the ones in the Kleinberg-Tardos text. I also watched Erik Demaine's lectures on dynamic programming. This is all in addition to the every day requirements of this class (the homework and lectures, etc). For dynamic programming - draw the damn table on your scratch paper. Every time...draw the table! When we got around to the NP Complete problems I did the same thing - at least one problem a day. The other topics were tough as well, but these 2 topics are the most crucial to passing this course.\nAnything he says in the lecture is a 'key idea' or 'key concept' is going to show up on a test. Even if you think, how could they possibly test that? Trust me, it'll be on the exam.\nAlso, watch the office hours.\nThere's a project (they choose a different project each semester), but it is not difficult and only worth 10% of the grade. The tests are the bulk of the grade (85%). Prof Vigoda is definitely a great lecturer. Excellent content covered in this course. This course will prepare you for some of the most important algorithms you need to know in a software engineering interview. Exams are pretty easy. Important note - do all HW problems (don't slack) and try to solve as many problems at the end of each chapter as possible. To be honest, I was expecting the exams to be more vigorous in a graduate level algorithm course. This class is very hard in terms of lot of things. Firstly, what to expect in the exam, you never know. However much preparation you do for this class is going to be less. In all other courses, we will get to do the projects where we get 1-2 weeks of time where we can figure out what needs to happen. In this course, we need to figure out in 3 hours of exam time. The exams are similar to homework but home works are not easy either, But you will get a week to figure out for homework where as exams can be very tricky. The professor won't ask any questions that does not make you think. He makes you think a lot during the course. The professor gives a lot of good hints on what to focus on during exam times. They are very very important. Pay close attention to what he says. He is very active on piazza and answers a lot of questions. The professor is very particular about dynamic programming. If you do well in this area, you will get A or B. Otherwise difficult to pass. He asks tough questions of Dynamic programming. It is his favorite part of the course. He initially scared the class saying that if we don't do well n dynamic programming, we will not pass. That happened to be true. This class required at-least 30-40 hours of work for me. So, my advice is not take this class with any other course\n\nThe positive thing about the course is, the curve. The B cut-off was 65% and A cut-off was 84% for Fall 2017.  Believe me, 65% is  not easy to get.. But the curve really helps at the end of the course. The text book used for the course is DPV- Algorithms (Dasgupta + Papapi........+Vazirani). Practice ALL problems from the exercise of this book to pass this course. This is a MUST.  Good luck. Keys to success follow the review...\n\nReview:   \nThe material for this course is pertinent and important. This is a difficult class that is challenging in two ways.  First, the material is difficult to learn and takes some time to fully understand. The book and lectures do a terrible job of explaining the material (the book is vague and the lectures focus primarily on mathematically proving the theorems behind the material rather than the testable material itself).    \n\nThe second part of the challenge in this course is the way the exams and homework are graded. The rubric calls on strict adherence to very specific terminology, formatting, and nitpicks minor details. This can be frustrating because even with a mastery of the material and after solving difficult questions, you may receive a substantial markdown for trivial \"omissions\" in your solution.\n\nAs you go through this course, I would encourage you to stick with it even if you're receiving poor grades. I did very poorly on the first two exams and still managed to pull through. The very first test is the trickiest... it gets a little bit easier after that. Grades are curved pretty significantly too. Worst case, at least you'll get to see all of the material before taking the class a second time, so you'll be better prepared the next round.\n\nKeys to success:    \n-Take this class by itself, it's really tough    \n-Practice problems from the text book and homework on a whiteboard or on paper over and over again.     \n-If you have time before the course starts, brush up on Dynamic Programming (DP)... it is the most heavily weighted topic that takes the most time to master.    \n-In regards to DP:  focus your efforts on variations of LIS, LCS, and Knapsack type problems... there's no need to get more complicated than that    \n-Pay very close attention to the details of the professor's solutions (such as HW solutions) and make your solutions follow his particular format and verbiage    \n-Don't blow off the project: it's free points... it only takes a couple days to tackle & it'll be in python most likely.    \n-Youtube videos with graphical depictions of the algorithms in action really help\n\nI wish you the very best of luck!! The fact that I hated this course isn't a reflection on the professor (Dr. Vigoda) or TAs. They did an amazing job and were very active, I just hate theoretical math. This is a very hard class. If you are like me and 1) were not good in math theory and 2) have not done this sort of thing since college, then this will probably be really hard. I would recommend doing all the homework problems, and all the problems related to the material in the text book. When you are done with those, find another text book and do all the problems there. Practice is the only way you are going to pass, unless you are just really good at this sort of thing.\n\nThere is a project but it isn't worth too much, though it took me a long time to complete. The homework problems are more or less meaningless for your grade, but very important if you want to learn the material. The exams are all closed book. You get partial credit, but that means you made smaller mistake, and you still lose a very large portion, so you really need to know the material. To be fair to Dr. Vigoda, he tells you what he expects you to know to pass, and he holds you to that. Grading is very quick on exams for the amount of students and the content in them. Office hours are very good too, and I had to watch almost all of them to get at least some grasp of the materials.\n\nI would recommend taking this class early, but not before you get some study habits down. It took me 15 PTO days, and studying almost every night to get down most of this material. If I took this when I first started OMSCS (I have 24 credits as it stands) then I would have not been able to adjust to the workload and the amount of effort needed to pass. Also, it is probably going to suck. Many students did not do well on one or more exams (myself included), and though you will see the stereotypical \"look at how smart I am!\" tech students in piazza, remember that others are struggling as much as you are. Don't drop too early, so that you at least get some of the material down, and plow through it.  Great effort from the TA's and Professor Vigoda. You'll do well if you practice doing many problems, from both the textbook and other sources. Keep doing problems. You have to do many problems to truly understand the subject matter. Very rewarding class and the benefits are great for interviews later in life. \n\nYou can't bullshit your way through this course, and that's a good thing. So don't try to, or you'll crash and burn. This course is one of my favorite courses. It is a nice mental stimulation. It is not easy but it is not too hard also. If you do the practice problems and the homework problems you will get a good grasp of the topics. There are plenty of more problems in the textbook as well.  The professor,Eirc Vigoda, is very active and engaged in Piazza. The TAs were great. There are lots and lots of practice problems and office hours to help you prepare for the exam. I did very well on this course by simply studying using the practice problems provided and the textbook. For additional reference, I used the MIT OpenCourseWare lectures. Make sure you join the slack channel also.  So, this class was pretty hard for me. I had next to zero algorithms background, but the topic is everywhere in CS and I wanted to fill in a lot of knowledge gaps by taking a supposedly-more-practical-than-CCA algorithms class, and I got it here. There were 3 exams and a final, 1 project, and homework. Exams were about the same level of difficulty as the homework, so the best advice I could give is to practice doing problems a lot, especially with Dynamic Programming and NP-completeness reductions. If you want an A in this class, you will work for it - exams are regularly 4/5 problems worth 25/20% each, so if you mess one up, there goes your grade. \n\nTAs are really responsive, and the lectures are very well done. I found them exceptionally clear if you pay attention, and more straightforward than textbooks in terms of the explanations on average, but not always (compared to Dasgupta and CLRS). The class was exceptionally well run, and this was probably the biggest factor in my passing at all - homework and exam solutions (though not the final exam) were released the day after the submission window was closed, so you can figure out where the differences were, and learn from your mistakes immediately. There were office hours all the time, though I didn't attend them regularly. \n\nIf you're wondering whether or not to take this, I'm going to recommend it highly. It's hard and time consuming, but it'll enhance your experience in other courses. For example: my section of Reinforcement Learning used Linear Programming and Dynamic Programming throughout the semester, and my (admittedly old) Computer Networks section had a Bellman-Ford project. All of these topics are covered in depth in GA, and will probably be significantly easier with prior exposure to them. It's hard to get in because all but one degree specializations currently require it, but keep at it and you'll be glad you did. This class was one of the hardest I've taken in this program. It's extremely exam based (85% of grade) and the concepts take a lot of time and practice to master. I spent a ton of time each week watching the lectures and doing practice problems in order to keep up with the course. For each exam I probably did 20-30 practice problems to prepare...and still didn't perform as well as I would have hoped. The exams and homework are all handwritten. There is one project that was actually really fun. Overall this class was really good...like I learned a ton. But it is very difficult - I wouldn't recommend pairing this class with another one. Oh, and the grade is curved significantly.  All I can say is... never give up.  There were so many times I wanted to quit because it was so difficult, but I persevered and I am pretty sure I did well enough on the final to pass.  The homeworks seem almost impossible at times.  However, don't let that dissuade you.  If you can't do some of the problems just do the best you can (they are only worth 5% of the overall grade) and wait for the solutions to be released and then go back and learn how to do the problems.  The exam questions are similar to the homeworks and actually seem a little easier than the homework problems.  Professor Vigoda says he wants the HW to challenge you.  So, if you can understand how to do them, you should be pretty well prepared for the exams.  To prepare for this class, you can go to the course website to see the topics and watch some youtube videos on them.  The MIT OCW videos were also helpful at times for a different perspective.  Dr. Vigoda places a strong emphasis on Dynamic Programming.  He once stated on the forums, if you don't know DP you won't pass this class.  DP boggled my mind when I first encountered the topic.  However, I leave the class relatively confident that I could apply it one day if necessary.  The lecture videos are excellent, he repeats the information enough that it sinks in better than some courses where they just state the facts and immediately move on.  I can't believe I'm saying this after how difficult it was... but after it was all over I actually liked it.  If it was easy, it wouldn't have the same meaning or impart the same feeling of accomplishment and that's why we're at GaTech, right? This was my 10th and final class in the program (I ended up with a B). As far as the difficulty, it was the hardest course I took, though I would say that the concepts themselves werent terribly difficult, more so that you need to stay on top of the schedule and practice practice practice with the exercises in the book and elsewhere. The arrangement of the topics (DP then Graph then P/NP) front loaded the difficulty somewhat so it wasnt too much for me to recover after not doing well on the first exam. For those worried about needing a B, the cutoff was 65% (84% for an A). And much kudos to Dr Vigoda, he is a great professor and made the class enjoyable. I absolutely loved this course. My favorite course ever by miles. The material was fabulous, the structure of the course was excellent, the organization was immaculate. Kudos to Professor Vigoda and the TAs. \n\nI didn't find it all that difficult although I seemed to be in the minority on that opinion. I wish there were a sequel because it left me wanting more.\n\nThere are 4 timed proctored exams and they are 85% of your grade. To prepare, get the \"Algorithms\" Dasgupta book and do all the exercises at the end of the chapters. The exams are problem solving questions similar to those. All chapters are covered by the course except the last 2.  I also found the CLR book useful at times as supplement.\n\nThe most important thing to do in advance in terms of preparation for the course is to become skilled at Dynamic Programming. The first exam comes fast, and many students get such a devastatingly low score due to inability to solve the DP problems that they can never recover.\n\nThe partial credit on exams is generous -- too generous maybe -- so whatever happens, make sure to write something.\n\nThis course ought to be required for every specialization. It is the #1 must take course in the program. I can't imagine how anyone could really call themselves an MSCS without it! By far the best OMSCS class I took. Dr. Vigoda's lectures were engaging, thorough, and provocative. The material is difficult and the tests are hard, but everything is presented in such a clear way (and the grading is fair with a generous curve) that the class isn't overly difficult. This class prepared me in ways that I didn't think were possible and completely changed my mind on the benefits of the OMSCS program. Excellent professor (Dr. Vigoda) and TA team!  The material itself is difficult but the work load for me was fairly light.  The exams determine most of your grade but it is very important to do the homework in order to understand the material.  Dynamic programming, graph algorithms, and NP Completeness consumed most of the class with a few other things such as FTT and RSA thrown in lightly.  Memorization does very little good on the tests as they are all about the application of the concepts (i.e. use the algorithms from class to show how to solve this seemingly unrelated problem that you've never seen before).  Understanding Big O notation is required.  The book is also required for homework purposes and reading it is also important.  Surprisingly well run for a first run course and surprisingly fast grading for a written exam based course.  Test solutions are hand written and scanned while using Proctortrack. This is THE class to take in this program. Perhaps the best one!\nCourse structure is unique and heavily based on exams (85% of grade from exams. Only 5% from homeworks and 10% from project)\n\nLectures are super useful and clear. However reading the book is a must to fully grasp the subject. I did well overall, however I attribute it to putting in effort to solve bunch of practice problems from text book. I can see someone who just relied on lectures, didn't do much practice on problems, would have less chance to do well.\n\nTAs are simply the best. There were 3 office hours per week where TAs would patiently answer all questions from students. A big thanks to them :)\n\nProf. Vigoda is very active and friendly on Piazza. He greatly cares about his subject and students. This class was very well organized with great support from TAs and the prof. Even though some of the concepts were hard to undertand, the Udacity video was very well made and it was much better than other videos available in public.  There are 3 mid terms and 1 final exam and you need to make sure you understand the concept well and study some extra problems on top of the homework assignments.  Exams are not extremely hard but they were designed such that you need to use the concept you learned and apply to the problems that are similar but different from homework problems. i.e. just memorizing the answers will not work.  The final was harder than mid terms in my opinion but you have a few weeks to prepare for it.   I actually really liked this class. There is a fair amount of work involved but it is manageable. The math was never overwhelming, and our arguments aren't required to be excessively rigorous as long as they are valid. \n\nI am very excited that I now understand things like linear programing, max flow, the fast Fourier transform and RSA pretty well: all these seemed completely mysterious to me before I took this class but they all turned out to be pretty easy to understand from the lectures.\n\nThe format of the exams and assignments is a pretty weird: you are given a template that you need to print, fill out and **scan** (there are phone apps to do that). Technically for the assignments you can just edit the LaTeX but for the exams you do have to scan your filled out template while being filmed by ProctorTrack... Weird.\n\nAlso be aware that there are **a lot** of exams (3 \"midterms\" and 1 final) and that the assignments and projects count for very little (5% for the assignments, 15% for the project).\n\nOne criticism however: especially at the beginning of the class, I ended up needing to do a lot of regrade requests for my assignments and first exam which I felt were graded incorrectly harshly. Out of 4 regrade requests I did, 3 got accepted, which shows that there was indeed some excessively zealous grading going on. Things got better as the class went on, but if you take this class, do check your feedback carefully and don't hesitate to request regrades if something seems way wrong. This class is very hard, not because the material is difficult, but because to me it seemed very rushed. This was the only course I took this semester and I struggled to keep up with the amount of practice and preparation that was required. \n\nIf you are reading this review and hoping to prepare for the class, study DP, NP Reductions and Max-Flow as well as Min-Cut. These are the main topics you will be tested on. There are graph algorithms as well, but you will never be asked to find a shortest path or anything like that, you will need to know how the algorithm works and based on the problem presented you will need to identify whether or not the algorithm can be used to solve the problem.\n\nThe lectures in my opinion are only good if you read the book first, then watch them once as you take notes and then watch them again just for content. So in other words they are not as good as other OMSCS courses. If you plan on grasping the material just by looking at the lectures, you probably won't because the lectures go quite fast and they only explain the basics of how to do the problems. A lot of times I also found myself going on YouTube to try to look at different explanations because I thought the explanations given were either not clear or just not good enough. \n\nI suggest taking this course on its own and if you have a few classes left, perhaps a semester before you graduate so you can re-take it if you do not get a B. \n\nI would also suggest to become a regular on Piazza and do all the homeworks even though they are not worth many points. Basically, if you know how to do the homework, you will have the needed knowledge to pass the test.  This class was very well taught. So, the material wasn't too hard to grasp from the lectures, however it did require a lot of work in practice problems on top of the homework. Finally the one thing which I felt could be improved is the amount of feedback on exams and homework. The feedback was too brief to be of much use for improvement.  This class is really well done. The lectures are clear and interesting, and Dr Vigoda actively participates on Piazza! It's hard, it's theoretical (your brain gets tired), but it's super-doable (even for someone with little to no formal background, like me). \n\nI personally never manage to prepare for classes ahead of time; and I frankly think with this class, the best preparation you could do would be to come in with a clear head, excited and ready to learn. Once you're in the midst of it, I recommend lots of practice problems and active participation on Piazza (trying to explain concepts to others or formulate clear questions is a great exercise in and of itself). \n\nIt's an exam-based class, and the tests are challenging in that you likely haven't seen the exact problems previously, but they're very fair, and you can figure them out with a solid understanding of the material (as long as you don't get too stressed about seeing something unfamiliar). \n\nSo, take it. You'll be glad you did. This course is very challenging. By far the most challenging class of the program for me (and this is my 9th course)\n\nThe content presentation is excellent. The homework, tests and project are all well constructed, fairly graded, and directly inline with the content covered in the course materials. However, it is not a simple regurgitation of the materials. It is an application of the materials and so you really have to understand and practice the use of the materials (the algorithms mostly) in solving problems because you will have to be able to apply them to other situations on the tests. \n\nThe grading is heavily weighted towards tests with 85% of the grade coming from tests (10% from project and 5% from homework). \n\nHomework, while it has little impact on the grade is a must-do. In fact, to succeed in the class I would say that you have to go out and find other homework from other courses and do those problems as well. \n\nThe project was a coding assignment which was interesting but not too challenging once you wrapped your head around it. They have indicated that they may add an additional coding project in a future iteration of the course, but don't plan on reducing the grading focus on exams. \n\nThis class has probably had the greatest participation in Piazza of both the instructor and the TA staff of any of the courses I have been in and that has been very helpful in understanding some of the nuances around the algorithms and their application. \n\nOverall a great class. I am in the Fall 2017 class which is the first offering. \n\nThis class is the class that replaced CCA; do not be fooled, its not far easier than CCA. While there are mostly no formal proofs involved (although you will have to give informal proofs), there is still a ton of material and concepts. The math isn't terrible, and everything you forgot is re-hashed by Dr. Vigoda so you can get back up to speed (although for graphs you will want to do a refresher on your own; otherwise this isnt needed). \n\nTo prep: I suggest going to the course website https://8803ga. wordpress. com/ and watching at least the first 2/3 of the lectures (the professor links to the videos on this page). I'd particularly suggest, at a minimum, getting re-acquainted with asymptotic notation and the basics of graphs (Depth-First Search, Breadth-First Search, Dijkstra's algorithm, Prim's algorithm, and basic graph terms are either lightly covered or not covered, depending, but you will need to know them),  \n\nThe class is do-able, but be willing to prep OR be willing to spend 40 hour weeks on the course. If you are already comfortable with asymptotic notation and graph theory, Dynamic Programming (DP) and NP-Complete (NP) will take you the most amount of time, so if you have a good handle on those going in it will make life far easier. I would suggest being able to at least hold a light conversation in all of these topics; with no exposure to these, 80-100 hours spent on them before the class will surely pay off.  I really enjoyed this class but found it very easy. I've taken ML, AI, RL and all those were far more time consuming for me (more than 20hrs/w for those). If you have taken an undergrad class on dynamic programming, graph algorithms, and NP completeness, there isn't a ton of new information, just more in depth. If algorithms and theory just make sense to you (I find I do much better in courses on math and theory than practice), then this course isn't really that difficult. If you found your algorithms class difficult in undergrad, or have never taken one before, expect a rough ride (as you can see based on the other reviews). The homework questions were harder than the exam questions, so just be sure you can do the homework questions and you will do fine. None of the exam questions were out of the blue and were very reasonable given what the lectures and homework covered. All I did to study for the exams was practice the hw problems and I recieved >100% on the final grade. For this class just practice practice practice. No need to study useless trivia from the lectures (aside from complexity of common algorithms). I've rated this as 'hard', but really its just quite different than the other classes in the program, more theoretical vs the project-based I've enjoyed in other classes.  Thankfully, its not just a class full of proofs. \n\nThe instruction is clear, professor and TAs are responsive on Piazza, the exams are fair, and grading on assignments and exams was quick (and lenient). Perhaps this is easier for those who had algorithms as an undergrad, you but don't need it to be successful in this class.  \n\nWith the exception of the dynamic programming, homework  only took a couple hours to complete.  However, doing only the assigned problems was not enough for me to do well on the exams, I did most of the problems in the book and others I could find online as well.  For me,  workload was light most weeks,  but spiked just before exams.\n\nI don't think theres a need to prepare in advance.  I came in without a CS undergrad or advance prep and did well.  But if you like to prep, get a head start with the dynamic programming -- I found that the topic that took the longest to master.   This is a tough course. If you do not have ANY background in algorithms, mathematical notation, or informal proofs, you are going to struggle to play catch up.\n\nThere is very little programming, most of the algorithm work is done in pseudo-code. You can front load learning about Dynamic Programming, Divide and Conquer algorithms, and graphing algorithms.\n\nThis class and Machine Learning are the two best ran classes that I have taken in the program.  I took this class for the first online offering. I really enjoyed the class and learned a ton.  However, it was a huge amount of work.  Working a full time job and a new child, all of my free time was spent on the course.  During the first two weeks (Dynamic Programming), I was ready to drop the class but my wife convinced me otherwise.  I'm glad I didn't drop it.  It took a ton of work in the beginning.  Perhaps 30 hours a week doing sample problems and Dynamic Programming finally clicked.  After Dynamic Programming and exam 1, we moved on to Graph Algorithms.  This was a little easier for me since I have supported networks that run BFS/DFS and I had a working knowledge of some algorithms.  Finally, NP-Complete and Linear Programming.    This course definitely seems to be front loaded in difficulty.  I would suggest you put as much effort as you can to learn dynamic programming.   For many it is the toughest topic in the course.  Once it clicks, you are set.  So, work hard, don't give up hope and good luck.  I ended up with an A in the course but I was about to drop it during the second week.  So, don't be discouraged if DP takes you a long time to become efficient. This was my last class in the program and by far the hardest class I have taken. I needed it to finish up the ML specialization and found it to be a very different class from the others I have taken. There is very little actual programming (1 programming assignment this semester that was relatively easy and able to be completed with little code once the concept and problem is understood). The class focusses on theory and math and consists of HW assignments that are worth so little that they are practically optional and 4 tests. This model made it very easy to fall behind if you weren't diligently studying and doing practice problems to prepare for the tests. Professor Vigoda is awesome. The videos are high quality and straight to the point. I liked that he explained concepts in what I found an easy to understand manner. He clearly tried to use simple language and provide multiple examples to drive points home. This class is a lot of work. I took this class along with DB Systems and I stuck it out but overall would recommend taking this class alone. Very rewarding and the staff was super responsive especially the professor. Class was run spectacularly especially considering it was the first semester. I learned so much the past few months that help to put other computer science topics in perspective. This class was both challenging and fun.  It was extremely well presented and executed.  The material is derived from an excellent textbook.\n\nUnless you've recently taken an upper level algorithms course prior or have a recent and strong math background, you will probably have to work hard to do well.  Some students could have used additional preparation before enrolling (e.g., their math background was extremely weak and hadn't even encountered high school level calculus or discrete math).  If you fall into that category, take a discrete math course or find some way to fill in those gaps.\n\nMy advice: don't underestimate the importance of the homeworks and practice for the exams.  Do all of the homeworks, all of the lectures, and stay current with the recommended course schedule (which can be demanding).  If you find yourself having an idle week in this class, you're likely doing it wrong.  \n\nDon't let students who comment about \"no formal proofs\" deceive you.  Usually, that \"formality\" is seen at the undergraduate level and you are expected to prove your claims on much of the material (and understand proofs given in the lectures).  For example, having an intuitive understanding of induction helps with dynamic programming problems and when you get to NP complete problems, those are proofs.  Either way, it's not something to be afraid of but rather to embrace as part of your journey into the core of computer science.   I believe the difficulty of this class is very much related to your preparedness. I generally enjoy math and also took an algos class on Coursera a couple years ago, and I thought the course was highly enjoyable and not too difficult. If you are in a similar boat, you probably won't have much trouble with this course. On the other hand, if this is your first exposure to algorithms, I would highly recommend priming yourself for this course by taking a free algos class first, or you may find this course to be a lot of work.\n\nAnother key to this class is simply to practice a lot. A lot of the homeworks and exams come down to figuring out ways to apply the algos to a novel problem, sort of like puzzles where the algos are the tools you have to work with. Once you are in this mindset, though, it's pretty fun thinking of ways to solve the problems.\n\nOne last note about this course is that the instructional staff is excellent. Compared to other courses I've taken, Dr. Vigoda is much more active on Piazza. Probably the second-most instructor participation of any course after SDP. Dr. Vigoda was very occasionally a bit snippy here and there, but I'd rather have massive presence with occasional errors than a total lack of presence which seems to be the norm (or at least the median) for OMSCS courses. There were also several TAs that were also active and helpful, more than any other class I've taken. Grading for all homeworks and exams took less than one week (though the project took over a month) which is critically important from a pedagogical standpoint, yet virtually unheard of in this program, so major kudos to the staff in this regards. GA is definitely the best OMSCS course along with ML / RL, all because of the tremendous efforts from prof. Vigoda and his TA. \n\nDifficulty is just right. Exam questions could have been alot more difficult, but prof. Vigoda gauged it perfectly so that they are very manageable. This class is difficult, but not impossible. You definitely have to put in a lot of work, or you will fall behind! While the 10 homeworks are worth a total of 5% of your grade, don't slack on them. They prepare you for the 3 midterms and 1 final which are the bulk of your grade. There is also a project for 10% of your grade, which is the only coding you will officially do in this class, though future iterations may include another project. \n\nThe homeworks are generally problems in the text (DPV), or very similar to them. While the previous class required a lot of proofs, this class requires informal proofs and pseudo-code. The book is definitely required, and I recommend also getting CLRS for the graphing section. The most math I encountered was during the FFT section where we had to work with complex numbers and roots of unity. \n\nPrepare for this class by watching the lectures, reading DPV and doing the problems. There's no real substitute for doing the problems. https://8803ga. wordpress. com This is a hard class, it takes a lot of time to understand the material it's very difficult.   The entire grade is based upon exams, the exams average 4 questions and are difficult.   Most people either love or hate this class and it depends on your background and understanding of the material prior to taking this class.   It's a requirement for graduation and the class it NP-HARD.   An absolute must. Don\u2019t call yourself a computer scientist if you haven\u2019t taken this class. It\u2019s about solving problems, efficiently. And it\u2019s what interviewers ask about.\n\n- Lectures are very clear and indepth. Didn\u2019t need the book. Also any prereqs are covered in the lectures, except for graph theory. If you\u2019re dying to prep before the course starts, maybe Graph Theory and BFS.Dijkstra are a good idea. Other than that I don;t see a reason to start early. Go into this class with a clear mind cause you\u2019re gonna think and study A LOT.\n- Exams are fair. Not easy, and not impossible. Just the right balance to test how well you understand the material, and can apply it to new problems.\n- AWESOME staff. Professor is very active on Piazza, he is a true educator that cares about his students. Same with TAs who held 3 office hours per weekto answer HW questions, and any otherproblems from the book...etc.\n- HWs, althoughof very low weight are extremely important. As well as practicing on your own with extra problems from the book or anywhere else. Practice is key here. You gotta train your brain on these kinds of problems. Don\u2019t be disappointed if you can\u2019t solve any of the Dynamic Programming problems. Just make sure you practice enough, and you\u2019ll be fine.\n- There was a coding project. It was very easy and not much of a learning opportunity. There\u2019s room for improvement here.\n- 3 midterms and a final. Midterms are not cumulative, so you can dive deep and practice specific topics as much as you want.\n- This class is a marathon run. There a re no dull moments. Every week you\u2019ll either be busy working on a HW or prepping for an exam. That\u2019s why try not to burn yourself by prepping too much before the semester starts.\n\nBottom line. This is the best run class in OMSCS. And one of the most important to take. Can\u2019t believe there\u2019s a specialization (Interactive Intelligence) that doesn\u2019t mandate this course. Preface: I had not taken a formal algorithms course before. This class kicked me in the rear early. I very early considered dropping the course cause I did terribly on the first exam. However, I stuck through it and am expected to get an A now. I hadn't taken the old CS 6505, but from what I've heard it was crazy difficult with its proofs. In this class, there is little to no emphasis on formal proofs. There is a bit of proving NP-completeness at the end of the course, but it's not very rigorous I'd say. The key to the course: study, study, study.  If you study as much as you can for this course, you'll get a B or A. If you don't put in the hours, you will likely not do well. I dropped this class in spite of being very satisfied with the teaching. I dropped because I didn't put enough time in doing the exercises as the class requires. Its not enough to be able to solve a few problems. One needs to have a lot of practice (as others pointed out). I don't think this class requires too much time a week. Instead I would recommend daily practice. \nCaveat: my comments are as a person with a CS background. If you don't have a CS background there's probably some significant prep work you need to do in Algorithms and Data Structures to pass this class. It won't be easy. This was my 9th course in the program and this course is by far my favorite course of the program. It is my favorite because I find the content very useful and will definitely help you do well on software engineering interviews. Eric is a great professor and he is very active on Piazza. It also becomes addicting, because once you solve a problem it motivates you to solve another. If you want to prepare for the course, I will review Dynamic Programming, Big-O notation/Master Theorem, Basic Graph algorithms like DFS, BFS, Djikstra, etc, and NP. The course is very challenging and I liked that the homeworks are challenging you to prepare for the exam. If you understand the concepts behind the homework, you will do fine on the exam. Excellent course, very well run especially for a new course. The lectures are great and the professor and TAs do a fantastic job. I recommend watching the lectures and reading the textbook. This is my 10th and final course before graduating, and while it isn't as interesting content wise as some of the previous courses, it is one of the best run. Ok, without too much lyrics here is what you need to do in order to succeed in this class:\n\n1. Become good at dynamic programming! This one is the most important and the hardest. Learn how to solve typical most common problems like LIS, LCS etc. Get Dasgupta algorithms book and start solving DP problems (chapter 6). Learn how to write a recurrence and pseudocode for them using pencil and paper! Once you are comfortable - go to leetcode, or hackerrank and practice them as much as you can. Code them if you want, but keep in mind that you'd have to be able to HANDWRITE your solutions!\n\n2. Learn about roots of unity in the context of Fast Fourier Transform. To be more precise - understand, how to multiply 2 integers using FFT Divide&Conquer approach. This one is also one of the most challenging topics. The lectures are good, but assuming you know the basics, which I didn't, so I had to dig all over the internet to understand it.\n\n(If you are good with 2 things above - you'll most likely succeed. Other stuff is also important, but not as much as previous 2. You'd still have to practice all of it, but other topics a bit easier to grasp.)\n\n3. Brush up on modular arithmetic, RSA cryptosystem and all the theory behind it.\n\n4. Learn the basics of the graph theory: paths, flows, spanning trees, DFS, BFS, SCC, Djkstra etc.\n\n5. Don't worry too much about proving problems to be NP-complete, those are fairly straightforward, although, practicing wouldn't hurt at all.\n\n6. Practice linear programming problems, but only after you are good at 1 and 2 (or if 3rd exam is approaching).\n\n7. Make sure you have enough time for the entire semester, and don't hope for the last night preparation. It won't work, unless you are already pro in all the topics above. \n\n8. Do all the homeworks, and do them EARLY!!! They are hard, although worth almost nothing in terms of grade. Doing them is crucial for quality exam preparation, and if you don't do them - you're screwed!\n\n9. Do not rush dropping the course if you screw up on the first exam. There will be plenty of opportunities to catch up, at last you can drop with W after the 2nd exam (if nothing changes next semesters).\n\nThe course is absolutely amazing, and it will develop your brain big time. The lectures are of the highest quality and very helpful. So, work hard, be optimistic, and good luck!\n\n \n\n\n\n\n - 8th class for me (Prev: ML, RL, CV, HPC, IOS, DVA, AI) \n- Well Organized\n- Awesome Content\n- To the point exams, appropriate in length \n- If you are planning to interview with a tech company, take this course\n- Prof Vigoda and his team of TAs are very responsive and helpful \n- Not esoteric theoretical\n- Multiple (three) midterms, allows for smaller syllabus per exam, helps to dig deeper\n- Do all of the text execises, not just the ones identified by the instructor, would help to reinforce concepts", 
    "CSE-6040": "  This course is okay. It gave me some exposures to Python but I don't feel the exposure is in-depth enough. I would actually prefer to have a proper introductory course into Python itself, rather than applications from the start. As I encounter business problems in work, the need for a solid foundation on Python would become obvious. The other reviews got it right. Very Python heavy. I had a couple introductory courses under my belt. One from Coursera's Python for Analytics and the other was Udacity's Data Science course. That was my strong point going in. My weak point was definitely the mathematics and linear algebra. I would definitely recommend learning the basics of matrix multiplication and getting comfortable with that. The tests are long. People have been averaging between 10-16 hours actively working, but most people are making A's on them and there are only 3 of them. Fantastic class - it's basically an intro to python with an emphasis on coding efficiently and coding for data sets. While its primary focus was more on the underlying mechanism of commonly-used packages in python, the course was nonetheless effective when getting students to think about what was required to succeed in the space.\n\nAs stated before, during the Spring 2018 semester there was a massive disconnect between the homework assignments and the exams. There were three exams, all of which were open-source barring collaboration with people (but open-google, short of posting your ask on stackoverflow). However, the exams consisted basically of 6 homework assignments for you to complete in as much detail as possible. Exam 1 (24 hour max) was quite reasonable as the first few homeworks were very easy and were more on the programming, but Exams 2 (24 hour max) and 3 (36 hour max) ended up being harder variants of the homework problems to be done in a shorter period of time. I still aced the class, but the exams were definitely marathons (Exam 1: 4-6 hours, Exam 2: 18 hours, Exam 3: 10 hours, but only did enough to get 80% since I'd already guaranteed my A). Future iterations of this course will probably see updated exam logistics.\n\nNonetheless, nobody said it would be easy, and all things considered it was a deep enough course to justify an intro to programming for data science at the graduate level. For this student at least, a lot was learned. \n\nBackground: Proficient in coding in other languages such as MATLAB, SQL, some other object oriented programming languages, took Regression/6501 prior to or during this course, strong calculus/linear algebra/diff eq background from engineering days. I had zero programming experience going into this course, so as others have said it was EXTREMELY difficult. However with the high value of homework assignments and extension of the test taking window (test 1 was 2hrs, test 2 and the final were 24hrs) I was able to succeed in this course. However, I still lack a great deal of basic Python skills, so I highly recommend a good working knowledge of coding prior to taking this course.  Found this to be hard due to a relative lack of Python exposure (came at this from an R background). Would absolutely recommend having working knowledge of Python prior to starting. Was able to pick up enough as I went along; I started breezing through Datacamp Python tutorials by the end (when the concepts in the class become a bit more involved). Spent 10-15 hours a week at first covering basic Python stuffs, slimmed down as the semester went on and I became more familiar with the syntax. You need to have taken some amount of Python basics before coming into the course, and having a programming background in another language would also make it easier. I had a strong non-Python programming background as well as an intro Python class and I  found the class pretty easy. However, people with less experience found it had a very steep learning curve and could be very difficult.\n\nAssignments are released weekly but you have two weeks to do them. The first programming exam was timed (2 hours), but after feedback from students they decided to change it to a 24 hour exam that must be completed within a 7-day window. I found the exam still only took me 2-3 hours to complete. The final was also 24 hours in 7 days, so they will likely keep that format going forward. \n\nAssignments and exams are in Jupyter notebooks that walk you though the exercises. Lectures correspond to most of the notebooks, but if you're a quick learner you can get almost all the material just from the notebook. Instead of writing the entire large program, the notebook includes some code written by the instructors and you write code to fill in the blanks.\n\nOverall, I found it pretty easy, and it paired well with ISYE 6501 (Intro Analytics). The instructors had some trouble with getting assignments up on time, class organization, and responding to Piazza in a timely manner, but I think most of that had to do with the fact it was the first semester the course was offered online.\n\nMy one course content complaint would be that the end of the course, which seemed like the whole point/the culmination of the course, was extremely rushed at the end (3 shorter assignments due within 2 days of each other). I wish less time had been spent on the Python basics at the beginning and more time was spent on that actual analytical modeling methods. Great class!  Has been my favorite so far.  The videos are excellent and the HW and exams are fair and a fun challenge. If you want to learn Python at a very fast pace and ready for grueling 24 hours exams then you would like this course. Just be prepared to put in a lot during the exam. Few things I wish were better: Lectures can be more intuitive with helpful examples, talk in more detail about the logic explained in the videos. Homeworks are easy as compare to the exam. So I feel there is a gap which can be filled by making homework little more challenging.\nI strongly feel exam format needs to be less lengthy than current. This is excellent course with well thought structure, assignments and exams. Everything (assignments and exams) was done in same online grading system in jupyter-notebook, so there won't be any logistical issues during exams, since basically exams are just like assignment with 24hours-36hours time limit. \n\nThis course use python language, and despite my many years experience using python on daily basis, I still learned a lot in this course, so yeah its absolutely highly recommended course regardless of your experience. \n\nFor new to python students, this course will teach you from basic, but it getting tough quickly, so its better to gain some familiarity with numpy/pandas lib in python beforehand. I came into this class with very minimal coding experience (just blitzed through about 2/3rds of 1301 in the month before this class began). As a result, I found this course to be very difficult. Many people in the class had significant programming experience, so probably didn't have as much difficulty. But even for these, there were challenges.\n\nAs has been mentioned before, you have a weekly jupyter notebook with roughly ten exercises to complete. These aren't too bad and one can often google their way through them. In fact, for all of the homeworks, I only missed one exercise. In the end, my homework score was 99.5%+. Homework counts for 50% of the grade.\n\nThe workbooks are released two weeks before they are due. So get yourself a bit ahead in the beginning and make a habit of turning them in early. Much less stress that way, for me at least. It was common to see people on Slack, Sunday night before homework is due, asking questions about the first exercise. Not sure what they were thinking.\n\nThe exams, though, were a different animal. For those, you'd get about twice as many exercises (usually 20-25) and could be significantly harder than the homework. AND, you had 24 hours (for the midterms) and 36 hours for the final to complete them. This resulted in marathon work sessions for most of us. In fact, in a poll we created in Slack, the average time spent on midterm 2 was about 17 hours. In my case, I did absolutely terribly on them, but, with the homework counting for so much of the grade, I was able to at least pass the class with a mediocre grade. \n\nIf you have significant coding background (or a strong natural aptitude) you'll be fine. But if you're like me, get ready for a lot of work and stress. \n\nIndeed, my biggest criticism is that I've never been in a class where there was such a disconnect between homework and exams in terms of performance. Usually, if one is doing well with homework, one should likewise expect to succeed on the tests. That is definitely not the case here. \n\nGood luck Overall this was a decent course.  The lectures were pretty weak in my opinion, some weeks it was just a TA giving you the answers to the homework.  The homework assignments were pretty solid and the format of using Jupyter notebooks was really nice.  \n\nThe worst part of the course were the exams.  They were quite lengthy and exhausting.  It felt like the homework didn't prepare you at all for the exam so there was a lot of trying to research and learn stuff during the exam which adds to the amount of time needed to complete it.  That said, the final was relatively easy compared to the midterms so that was nice.  One thing that I didn't figure out until the final that might have been helpful for the midterms: instead of spending an entire work day (8 hours) on the exam, work 4 hours one night, then go to sleep, work 4 hours the next day.  The only down side to this is that if you need all 24 hours to complete the exam, you waste some up front (note, the longest I spent on an exam was only 13 hours or so).  I found this course to be very enjoyable in general. The lectures were a bit hit or miss, but the assignments were usually good about guiding you through the problems. I came into the course with some programming experience but only very little exposure to Python, and I thought it was a great introduction to Python including Pandas, NumPy and SciPy. The later assignments focused more on mathematical theory and concepts useful to data analytics such as optimization problems and algorithms, which were very math-y but also very helpful to reinforce my understanding of the workings behind these methods. It helped that there was a refresher on the linear algebra and calculus included as part of the instructional materials.\n\nThe fact that the assignments are autograded with unlimited submissions means you have as much time as you need to test your solutions and get as much credit as you can. The assignments are released well ahead of time so if you need to get a head start and give yourself some time off between assignments that's totally feasible. Some assignments were much easier than others, so I'd say the avg workload was about 4-8 hours per week.\n\nThe exams worked much the same way homework did, open note/internet with no proctoring, but were much longer than the typical homework assignment and with a time limit (both midterms were 24 hrs, the final was 36 hrs). I spent about 5-8 hours with each of the three exams, but I know other students struggled with the amount of time they needed to complete the tests. The professor and TAs were responsive and made some changes to the exam format to help accommodate the students who had issues though, which I appreciated even though it didn't impact me much.\n\nOverall, highly recommended course. As someone who had a programming background, I think it's still worthwhile to take unless you're already very comfortable using Python, Pandas, NumPy and SciPy. This class should be fairly easy for anyone who knows python already. It is possible to complete the class if you have a programming background but little python knowledge, you just need to get up to speed in the beginning. Overall I felt I learned a lot and was challenged in different ways throughout the course.  I'll not repeat what others have said regarding the Spring 2018 offering.\n\n**Infinite Submits** One of the great features of this course was the auto-grader feature that allowed for an \"infinite\" number of submits, taking the highest grade. This completely negated the pressure to \"get it right the first time\" and fostered a \"let's just try this\" workflow that is very similar to how \"real\" programming gets done. Contrast this with other courses that have a \"first submit == only submit.\"\n\n**Honor Code** Homeworks were open-everything, including some conceptual collaboration. Exams were open-note, open-course-materials, open-Stack-Overflow, everything but collaboration with other students. Again, contrast this with the use of ProctorTrack\u00ae in other classes that wouldn't even let you you leave your chair during an exam.\n\n**Jupyter Notebooks** Just an example of how well thought out everything in this course was, in terms of \"ramping up,\" Jupyter notebooks were used via Vocareum for both homework and exams. Downloading of notebooks for local (or other cloud) use was permitted. I now see \"Jupyter notebooks\" offered everywhere online, and Jupyter Lab was easily integrated into my personal workflow, as well.\n\n**CSE 6040 Slack** Was the primary means of sanity and mutual support. Much better than the Piazza mess.\n\n**Pairing with ISYE 6501** The two courses nested nicely. Early on, learning R and Python simultaneously was a bit hectic, but as ISYE 6501 used Python pulp for an optimization homework, and I was able to merge both learnings using `reticulate` and `rpy2`. Also, as 6501 backed off the coding and entered the \"case study\" phase, 6040 entered the \"application to models\" phase, implementing models that I learned in the beginning of 6501.\n I really enjoyed this class, not only because of the gradual learning curve, but also because the assignments were real-world applications of what you were learning.\n\nThe class applied a \"learn by doing\" philosophy to it that worked well with programming. Your homework assignments occur within a Jupyter Notebook that has test cells that determine whether or not you completed the exercise correctly. Having an issue with something? Then just copy the test cell data into a new cell and use that to debug you code. The set-up of the homework made it feel like they wanted you to succeed and were giving you the framework to do so. I wouldn't take it without some background in code, though - you need to have a foundation that this class builds on.\n\nThe part that challenged me the most was the last few weeks when we dove into the deep end with linear algebra. For someone who does pretty well with math but has never taken a linear algebra course (and thought it was a good idea to skip it...which wasn't in fact a good idea), I got to the point where I was able to complete the assignments, but I'm still a little hazy as to the WHY behind what I was coding. So, I'll be taking the Udacity Linear Algebra refresher suggested by another reviewer.\n\nThe midterms/final were discussed by other reviewers for I won't hash them out. I'll just say that once they got the format figured out (24 hours to complete, open everything), they weren't too bad. It's a challenge for sure, but they were doable. Agree with most reviews so far. Better if you have some python experience and linear algebra refresher before you start. That said it does build up slowly on the coding side. It got very intense for me the last 4-5 weeks through the final trying to follow math (mostly linear algebra) I should have known once upon a time but probably didn't learn properly and would have now forgotten at any rate. Completing it and mostly following the math was very satisfying.\nThat said, the homework was reasonably easy to do without following the math, it was laid out step by step with the final destination not necessarily well in focus; I would actually have liked a bit less hand holding along the way (it was pretty much routine to get 100 on homework). \n24 hour exam format was a winner, it gave those of us who don't code for a living a chance to demonstrate what we had learned. The final question on the final exam was great; I wish there'd been a couple more like that along the way. Others in this thread have mostly said everything there is to say. A quick summary of my experience:\n\nGood\n- Multiple Submissions: So good for learning. I was more willing to try things without help knowing that if I couldn't figure it out alone I could get help online later.\n- Can work ahead: So important for an online class for people with full-time jobs. \n- Midterm 1 and Final: Both were definitely challenging, but if you put in the work, it was certainly possible to get a 100%.\n\nOK: \n- Lectures: Sometimes didn't go into enough detail for me. But overall, the lectures combined with supplementary googling usually had me in a comfortable place with the material. \n\nBad: \n- Midterm 2: The drama surrounding this is well known. We had a 24-hour time limit, and many (if not most) required the enitrety of that time. I took 18 hours straight including coding from sunset to sun up to finish with an 84%. I think this was a miscalculation by the staff, and I think they learned from the experience and it probably won't happen again.\n\nMy Background: \n- 22 years old, soon to be married, graduated undergrad in May 2017.\n- Coding Experience: Minimal (light experience with non-Python coding languages)\n- Statistics Experience: Moderate (4 undergrad level stat courses)\n- Math Experience: Moderate (peaked at 2nd year Calculus) Challenging but not unreasonable expectations. This is class is only difficult due to the insane exams.  If you come into this class with some experience programming in Python the homework assignments should be pretty easy. The video are well done but many of them are just walkthroughs of your homework assignment that week.  The exams are insane.  For the two mid terms you are given 24 hours to complete the exam.  However, unless you are a very experienced programmer, you can expect to spend between 12 and 15 hours of work to complete each mid term (based on the results of slack polls).    Again, if you are python pro, you'll finish the exams in like 6 hours, but if you're not, plan on clearing your schedule for 24 hours because you will most likely need the time.  The mid term was also like this although we were given 36 hours to complete the exam instead of 24.  An improvement to be sure but still a very stressful and intense 36 hours.  To give some perspective, someone pointed out in Slack, 18 hours is the length of the California Bar Exam administered over 3 days.  It's not out of the realm of possibility that you'll spend that much time on each exams over one 24 hours period.      Great class, I loved it! I don\u2019t have a programming background, so although I had taken GT\u2019s Python Introduction (1301) and Introduction to Modelling (6501) before, this course was a challenge. I spent an average of 15 hours per week over the 15 week period on this course (including time spent on the exams, which is significant). Grading is very straightforward, with a graded homework assignment almost every week (13 in total); these count for 3-4% each, or 50% in total. The homeworks are beginner friendly, because you have an unlimited number of submissions. Midterm 1 counts 10%, Midterm 2 15%, and 25% for the Final. This term MT2 was the most challenging of all. They gave us a 24h window for MT1 and MT2, and even 36 hours for the Final; if you are a slow coder, you will use most of these time windows. After some negative feedback for MT2, my impression was that the Final was slightly easier. \n\nSo this course was hard, but I had a tremendous learning curve, I am amazed by all the stuff I know how to do with Python now, and I feel well prepared for the coming CS classes in this programme. I'm sad it's over!     Like others have said the difficulty of this class is highly dependent on your previous Python experience. I've programmed in Python for several years, so I was able to complete the programming assignments with little strain. However, even with my previous experience I still found valuable kernels of insight in this thoughtfully prepared course. You can tell professor Vudoc has a passion for the material and a careful approach to the pedagogy of teaching a mixed-level, program-required class. If there is one criticism I share with the other respondents it's that the class seems a little rushed just when it starts to get really good towards the end. If the early material could be compacted a bit and the later material expanded I think this class would be a must-attend, even for those more experienced with CS. However, I understand the need to accommodate those who are not as far along on their analytics journey, so I don't hold it against the staff. Good intro to Analytics concepts. Make sure you know Python going into the class, and it'll be VERY easy. I think the class is fairly difficult if you're trying to learn Python along with the class concepts, though. \n\nVery forgiving grading structure as well.   I really enjoyed this class. At first it didn't seem clear what level of linear algebra we'd need to be successful in the course\u2014as someone who hadn't studied matrix manipulation in about 20 years, I was apprehensive. But the ramp-up was gradual, and they did a good job of explaining sophisticated concepts while providing surface-level challenges.\n\nI started the class having just taken CS1301x, also available on edX. I highly recommend students take this course (or similar) before embarking on CSE6040. I also took the GA Tech linear algebra primer on Udacity. I feel like I would have been playing an exhausting game of catch-up if I hadn't. If you don't have Python experience, get some before enrolling.\n\nI found the challenge balance very satisfying. It definitely broadened and stretched my understanding of the math side of data manipulation. There were times when I thought I was finally in hopelessly over my head, but a bit of research or just plain staring at the code eventually led to (very satisfying) breakthroughs.\n\nI appreciate how responsive the instructor was to changing the test format from two proctored hours to 24 unproctored. It much better measured our ability and concept absorption\u2014and was also confiding to know the staff were listening to our concerns in real time. That's a big deal in an online course. BLUF: This course is intro to Python and it goes really well with ISYE 6501. \n\nMy biggest qualm with the course was the length of the midterms. For my class, our 2 midterms each took an average of upwards of 15 hours (we got 24 hours, but it was still quite absurd). Surprisingly, the final only took me 6, even though we got 36 hours to complete it. The exams and homeworks were open book/note with no online proctoring. The only restriction was that we couldn't ask our classmates for help, so I must say that despite my complaint, I can't really say anything was unfair. \n\nI took the course together with ISYE 6501 (Introduction to analytics modeling) and it was kind of neat because we would code up a lot of the algorithms discussed in the modeling course. \n\nThis course is comprised of lectures and Jupyter notebooks. Lectures are well designed as well as homeworks (You get 1 per week and each one took me a few hours to complete with the tv running in the background, nothing crazy). As far as autograders go, I've had much worse experiences than the one in this course. Learning to debug is extremely important, and you will certainly gain some experience in this course. \n\nIn terms of course content, this is what I imagine is taught at the Python 101 level,  with a sprinkle of harder topics. Many of the weeks went something like: \"Here is an analytics technique/algorithm. Code it in Python. Python already has a built-in function for it, this is how that call goes...\" This is actually a pretty good way to learn, because you essentially teach yourself the way that some of Python's functions work by coding them manually thus giving yourself a good introduction to Python, programming in general and the analytics models.", 
    "CSE-6220": " This course is a fun ride through High Performance Computing. I didn't expect to love the class as much as I did, but seeing how to push computers to their limits in several different ways proved to be an exhilarating learning experience. The class is broken up into 3 sections: the Dynamic Multithreading Model, the Message Passing Model, and Cache-Optimized Algorithms. To do well in this course, I found it necessary to do most of the extra readings, and it was also helpful to go through the video lectures multiple times. If you put in the work for this course, you should do well, and you'll be rewarded by a wonderful understanding of the HPC landscape. My only wish for this course is that it was broken up into multiple courses so that I could dive deeper into each topic. This course is \"Intro to Parallel Computing\". This will teach you the primitives for parallel computing. I learnt and enjoyed the programming assignment. \nThe exams are on tougher side, but it will be a fun.\nThis course will teach you so many tools that can be used to analyze the parallel algorithm , and also cache friendly code. This a challenging, but very rewarding class -- maybe the best in OMSCS.  The course material is excellent and well-organized and the projects do a good job of reinforcing the material.  For example, we implemented MPI collectives using only send and receive operations in one lab, so that you really understood what they did before you started using them as black boxes.\n\nGetting a correct implementation of an algorithm (which isn't trivial) will get you 80 to 90 percent of the project points usually and then it takes some significant fine-tuning and experimentation to get the rest.  The test are very hard, but the problems are well-stated, unlike some other classes where the tests are hard because of ambiguity.  The TAs give generous partial credit and the Prof Vuduc gives a generous curve on top of that.  Note, however, that you're being curved against some very smart classmates due HPC's reputation as a difficult class, the fact it's not required for any specialization, and the substantial drop rate.  I would strongly recommend taking CCA or GA before this class and you need to be decent with C (taking GIOS would certainly be enough prep). Very difficult class, but very rewarding. \n\nThis was my first OMSCS class and I was afraid that it would be too much to handle right off the bat, but while it was very difficult I definitely learned a lot. Professor Vuduc and the TAs were very active and helpful on Piazza, and the lecture videos are put together very well. \n\nThere is a lot of reading between assigned chapters in the text book, assigned papers, and the papers necessary to learn about how to do the labs. Speaking of, the labs can be very difficult to get working fast enough, and I would highly recommend starting them as early as possible. They are all in C/C++, so brush up on that before the class starts. \n\nOverall it was a very informative course and the helpful Prof/TAs made my first OMS course feel less disconnected.  I usually don't write reviews for course, but felt that I should for this one. I have to admit this was the first time I struggled in a course, and have been very mixed on what to write. If you have any significant milestones in life or at work during the semester you intend to take this course, then I don't recommend this class to you. If you are have a lot of free time available then proceed.\n\nIt was definitely the most difficult course I have ever taken. I did think the material was very useful, and came out better for having made it through. The assignments were pretty cool, and required a significant time to complete. Only complaint was that it was never clear what made the best/fastest approach. It would have been nice to see what others did to get better performance.\n\nThe exams were absolutely insane, and not in a good way. Like other reviews said it is about taking what you learned to the next level. Given an entire weekend you might be able to solve all problems given, but in two hours just try to maximize the points you can get. The only real saving grace to the exams are a significant curve. My first class in the program was CS-6505, and those exams were easy compared to this class. Agree with most of the reviews here. This is one of the best courses available. It's really hard but equally rewarding as long you can stay up to the end (I think only 36 of ~80 or so who started remained till the end). The labs are challenging & exams can be brutal (depending on where you stand under the overall distribution). \nProf. Vuduc & all the TA's are very good in what they do. They are almost always available on piazza, we had office hours almost every other week etc. Prof. Vuduc is not only good at HPC but has a very good sense of humor which he mixes well in between the lectures. That kind of lightens up the sometimes heavy content. Overall the video lectures are super excellent & worth while revisiting them when needed. \nIf you are willing to work hard & learn a lot, this is a course you shouldn't miss. I would highly recommend this course.  One of the best course I have taken in OMSCS (having taken ML, CV and RL). \nLectures are fun, HWs are intense, exams show you what your actual understanding of the subject is. If there was a follow up to this course, I would have taken it hook line and sinker. \nTips: \n1) Know your pointers (need not be an expert though)\n2) Leave sufficient time for the projects. \n3) Don't get discouraged, if you work hard you would definitely get to the other side smarter and funnier. \n\nRecommendation:\nJust take it !!! (if you love coding, algorithms and want bragging rights !!!) Intro to HPC has been the best class I've taken in the OMSCS. It blew my mind. Everything about it was awesome. \n\nThe projects were crazy-engaging. It was kind of a competition: the teaching staff often posted the top 5 performers among the submitted projects, with metrics and whatnot, so I got to try my very bestest to make it to that list. It was madness! (good madness)\nEach project illustrated a very advanced element of HPC, so I left with a feeling of having learned a lot. \n\nProf. Vuduc has a very particular sense of humor, which he embedded in his videos. It surprised me how I never got fed up with the jokes. I guess I always find a true nerd's humor amusing. \n\nI'd like to invite everyone to give HPC a chance. The fact that it's not required for a specialization (anymore :'S) shouldn't mean it's not worth the effort. This class is the bomb! It's packed with algorithm design and analysis (and very clever algorithms, by the way), several models of computation that you may not have studied before, and probably should, oh and the projects are spectacular. If you like algorithms, programming, getting your mind blown, and are up for a challenge, this class is for you. It's hands-on Computer Science in my opinion. \n\nThere are some requirements that I'll try and emphasize here:\n - Running time and complexity analysis, Big O and Theta notation, the master method, etc. \n - C and C++. You gotta know how to code in these languages. I mean know them well. If you're afraid of pointers, you should get some practice first. \n - Basic Linux command line knowledge, as projects involve a virtual machine and the Deepthought Cluster. \n - Some linear algebra, as in virtually any other class. \n - C and C++. Yes, you need to be able to get an algorithm from a lecture or an academic paper down to functional C/C++ code. \n - Debugging in the woods with your teeth and a knife. \n\nGive it a shot, You'll have fun! This class is really hard for a first class. If it has been a while since you were in a hard class you might want to wait till you have some other graduate courses under your belt. Labs where _VERY_ time consuming and took me over 50+ hours to complete. One lab took me over 130 hours to complete. \n\nSome things to keep in mind:\n1) If you are not proficient at C don't take this class\n2) If you don't know how to use GDB or Valgrind don't take this class\n3) If you don't have massive amounts of time to spare,.... you guessed it, don't take this class\n4) If you want to learn a lot and can satisfy the first 3 parts _DO_ take this course! This course is a great course for mid to late program students. The lecture videos are very well done and entertaining, getting the core lessons across in a digestible manner. Topics are split across different areas with technical names which I would summarize as local parallelization (OpenMP), remote parallelization (OpenMPI), and cache stuff.\n\nProjects are uniquely challenging in that correctly implementing code (IE successful sorting) will only get you partial credit - full credit requires performance goals (Either completion under a certain time or number of cache misses). I previously took IOS/AOS so I thought that would give me a leg up for projects but I still found myself scrambling to complete projects. I ended up getting full credit for all projects but it cost me - I spent ALL my free time writing code and reimplementing methods to try to get better scores.\n** MY MAJOR COMPLAINT - Though I scored full marks, other people got crazy performance gains as compared to my implementations. While the lectures and papers leading up to projects give hints as to methods to use, there aren't any official recaps to let you know what you should have done.\n\nExams are very difficult. I am not entirely sure the motivating philosophy behind them, but I suspect the goal is to \"elevate\" your understanding of course material. What I mean by this is that the questions ask you to provide algorithms/psuedocode for problems you have not seen before. When I took Advanced Operating Systems I shut myself in my room for two weeks to study material and came out with 90s - for this class I did the same and scored raw 40/50 on the exams. Curves bumped me up to passing grades but it does make me wonder what the exact point is of making things so difficult.\n\nStill, it was a fun class. The TAs are great, Professor Vuduk is great, and you will learn a lot if you put in the effort. This class is definitely one of the best classes I've taken (both in this program and overall). \n\nThe class is very rewarding, and Prof. Vuduc's way of explaining/presenting things is just awesome. However, be aware of:\n- Assignments: they are really hard and require time\n- You need to know both C and C++ (one of the assignments is in C++, and it is not a trivial program to code)\n- Exams are really hard, and there only a few people getting 90%+ on them\n\nAll that being said, don't get discouraged, as this is a very good course, and your grade most probably will be quite good.  HPC is pretty cool. As an oversimplification: this class is about making algorithms as fast/performant as possible. The programming assignments are graded on how fast they run on a high-performance computing cluster. The course material covers parallelization on a shared memory system, distributed computing, and cache performance, and I felt like the class provided a good general intro to these topics.\n\nDr. Vuduc is clearly a passionate educator. He's good at illustrating many of the difficult HPC concepts. The lecture videos have high production quality. The class was well organized and the Piazza/Slack interactions were engaging.\n\nCSE 6220 was my first OMSCS course. I knew it was going to be challenging, but it was harder than I'd hoped. I found the midterm and final to be difficult and grueling. The exams are mostly theoretical / analytical while the labs are obviously practical. There seemed to be a disconnect between these two components of the course. The harder labs took a large amount of time, and I'm not sure how much additional time/energy would have been required to do really well on the exams. That said, if you do well on the labs, you can still get an A even with middling performance on the exams.\n\nI took this course to fulfill a foundational requirement, to challenge myself, and to get exposure to HPC. I came into the class with some light experience in C. I had to spend a lot of time on the labs wrestling with C issues that a more experienced C programmer wouldn't have. I also didn't have strong algorithmic analysis background, which made it difficult to follow some of the analysis portions. Overall it was a hard but good course. I feel accomplished after having completed it. I entered this course with lots of hopes & excitement & reading good reviews about it here. But unfortunately, I ended up being disappointed - which was in part due to my own undoing & in part due to my expectation of this course.\n\nThe Good:\n\n1. Prof. Vuduc has a good sense of humor!\n2. Some parts are interesting, How do you parallelize a seemingly serial algorithm. I liked Unit 1 especially.\n3. Initial labs were really interesting. (Basically lab1 & lab2, lab3 was okay).\n4. Generous marking.\n\nThe Bad:\n1. It's a time sink. The lectures only give you really basic intro - with hundreds of external references, which you may have to read to actually understand the material.\n2. Not much interaction with Prof. Vuduc. The course was mostly driven by TAs.\n3. More theory oriented than needs to be & heavily tilted towards MPI scheme of things (which is really niche).\n4. No mention of CUDA & related stuff. Not even basic NUMA which are becoming commonplace. So this course has limited practical utility.\n\nMisc:\n1. The last 2 labs were about Terasort & Funnelsort. Really ? I came to this course for learning parallel algorithms, not yet another sorting algorithm.\nAnd don't get me started on Deepthought :-(\n2. OpenMPI is really niche, and unless you work in an area that uses it, no point banging your head for it.\n3. Finally, I came to this course reading all the good reviews, but IMHO this course is highly overrated. \nYou should look up the actual course material on udacity to decide on whether you want to take this. This is a very interesting, but very difficult course. \n\nThe lectures are great, the discussions on Piazza are great, the interaction with Professor Vuduc and the TAs is great. \n\nThe midterm and the final kind of sucked ( i. e. they're just really hard ;) ). The approach that the class takes on exams is to get you to take your knowledge to the next level, rather than testing what you learned directly. This could be a good thing or a bad thing; depends on how you look at it. \n\nThe assignments are okay. Their goals are really exciting (parallel list ranking, the N-Body problem, distributed communication collectives, TeraSort, and funnel-sort), but I thought the instructions were a bit lacking. I'd say I spent 40% of my time trying to understand the skeleton code, another 40% learning about the goal of the assignment, 15% coding, and 5% learning things about C. \n\nWhile working on the assignments I found myself more stressed out and frustrated than focusing on putting my knowledge into practice. However, they're continually improving this course, so I anticipate that this will change in the near future. \n\nI do feel quite accomplished after finishing the course, and for what it's worth I took this as my first course while working full time, plus my wife and I had just had our first baby a couple of months before the class started, and I was able to pull off an A. So if you're up for the challenge, then I say go for it, you're learn some really cool stuff. I found this class to be extremely challenging, but very rewarding. I took it my first semester in the OMS program, which was definitely a mistake! I'm coming from a non Computer Science (but still engineering) background, and I had almost no experience with C/C++. I ended up spending between 20-30 hours a week on the course lectures, readings, and assignments, and ended up with a 'B'. That being said, I learned a ton. Prof. Vuduc is an amazing professor, and I found the concepts fascinating. If you're not coming from a CS background, I would strongly recommend doing some prep work on C and parallel algorithms. And be prepared to spend a lot of time debugging and getting your code to run. In the end, I loved this class, but wish I had not taken it my first semester. This is one of the most challenging classes in OMSCS, but crazy fun at the same time. Some algorithms such as Z-order curve will blow your mind. \n\nThe class has video lectures, reading text-books/publications and assignments. The Prof gives guidance on what to do each week, and you must follow that schedule if you want to do well in class. Office hours are held every week, and you must make full use of it. \n\nThere are 5 assignments, all of which are not at easy, even for the experienced C/C++ developer. You develop your project on a VM provided by the class, and then test it on an IBM super-computer, for which you are given access. An initial performance benchmark is provided for most of the assignments and your grading depends on the performance metric. Its better to start the assignments as soon as they are released. After submission, each assignment gets a 48-hour window to improve performance. The class is set up for student to succeed !!\n\nExams are open-book, open-internet, but none of that is of any use if you don't master the subjects. They release previous semester papers, and you should refer to it while reading the class material / lectures. I know a lot of people are writing that this course is very time-consuming and challenging, but I found that it is also extremely forgiving and, as everyone agrees, incredibly worthwhile. I work full-time and took this course along with Network Security. I pulled one allnighter for this course because I am a champion at procrastinating, and even then, I could have just used one of the two 48-hour late day passes everyone is given. I even bombed one of the first assignments and ended up with a 97% in the class with all the extra credit they give out towards the end.\n\nI test much better than my actual understanding, so I found the tests fun and engaging and both the midterm and final had a generous curve (60%->90% and 76%->100% in my case). I would recommend going over the textbook somewhat thoroughly, or at least know where the relevant sections are, since on both tests, I managed to basically transfer pseudocode from the book onto the test for an entire question. Also have the solution manual to the book handy (there's a bunch of pdfs online). On the midterm, one of the questions was almost identical to the last year's midterm solutions. \n\nIf you're worried about taking this class, just take it and stay engaged on Slack and Piazza. Since it's usually a smaller class, all the students are very helpful and the professor and TAs were phenomenal. I started some projects 2-3 days before they were due (spending about 4-7 hours a day on it) and did fine by utilizing other people's questions and answers on Piazza and Slack. I don't recommend that because every single time, I would start an assignment and panic that I wouldn't crack the algorithm in time, but you should not panic if life gets ahead of you a bit and you neglect this class for a week or two.  Projects need to start as early as possible, don't overestimate yourself, almost every people in this class need at least 3-4 days to figure out one project, especially Lab2, Lab4 and Lab5 for me. But overall, compare with exams, projects are much easier. My average score for projects is 100.1 with some extra points, but the midterm only got 72, hope final exam would be greater than 70...   \n\nUpdate: final is 78, with 20 curve points. Although the exam is really tough, the score is not that bad due to the curve points. Overall, great course! I definitely learned a lot! ToDo Interesting lectures, great instructor. Challenging Lab assignments (there are 5 total). Need to know C/C++ programming. Not a lot of TA handholding. Facinating topics.  A tough but very good course! The lectures are good, if a bit too simplistic at times. The exams are very hard (for the given time) but completely open book. The real challenge are perhaps the assignments, which do need a good grasp of C, pointers, pointer arithmetic and recursion. Overall, a great course, though my word might be biased since it was my first into the program, This was one of my first two courses, and with no prior experience with HPC, I found it very difficult. The course requires a lot of hard work and dedication, and of course, expertise in C along with debugging. Instructors and material are awesome and the course is very well designed.\n\nA piece of advice: might not be a very good idea to take this course in first semester along with any other course!\n\nOverall, I loved this course and learned a lot! This class is definitely a challenge. But it's a challenge for all the right reasons. The lectures are well presented and you'll certainly learn a ton. The assignments can be very challenging and count for a large percentage of your grade. In fact if you do well in the assignments you can still do well in this course despite the extremely difficult midterm and finals. \nGoing into this course, I'd make sure you take the prerequisites seriously. Know you algorithmic analysis. I found that I had to brush up on a few areas of maths during the course which didn't help under the heavy workload. Knowing some linear algebra is also helpful as 2 large sections of the course work with matrices. The assignments are mostly done in C, so make sure you're well versed with that. The level of C needed is (imho) about the same as that for AOS or similar courses. \n\nThe class is hard because achieving high performance is a difficult problem. If you do this class, you'll discover that even something simple like sorting which you may have mastered from undergrad now becomes an order of magnitude more complex and if you don't do it right you may have severely degraded performance even though you have N times more computing power. \n\nI highly recommend this class. Even if you're not solving a problem across many compute nodes, performance will always be important and this class will give you the right tools to write high performance software.  This was my first course in the program, and I enjoyed the class and learned quite a bit about HPC programming.  The class is a lot of work, but the TAs are very helpful through Piazza and Slack.  Exams are challenging, but doable with a generous curve.  Definitely study:  review the assigned readings and lectures.  Exams used ProctorTrack but were open notes/book/internet.  The instructor (Prof Vuduc) was great, but only showed up for a couple of the office hour sessions.  I would have liked more interaction with him.\n\nA few things that I disliked:  it felt like there was a lack of feedback on graded work.  For the projects/labs, many times implementing algorithms as presented in class would not get you 100% on the lab (but you could still get an A or B fairly easily).  You need to be creative or research some methods to speed up your code (grades are based on run times).  After the grades were returned, there wasn't really much discussion on ways that people were able to get full credit, so I felt there was an opportunity for more learning that was missed.\n\nSome of the later projects had a few issues with cluster being temperamental - no fault of the teaching staff, but definitely frustrating for the students.  Our grades were based solely on run times, but we couldn't actually get accurate timings on some of the labs.\n\nFinally, the exams are notoriously difficult.  Midterm was 60 points, but only graded out of 50, and the prof recognized that no one would even get close to 60 points during grading.  An additional (generous) curve was added after grading was complete. Definitely a tough course but very fulfilling. Instructors/material are great and the course is a well designed one. My word of advice will be, can you code in C? To be able to write a ~250 lines of code in C with pointers and be able to use debugger is a must. I already had a fair amount of experience in HPC going into this class, so it didn't seem as hard as a lot of the reviews suggest. The one challenge was that 3 out of the 5 labs were in C; I have a lot of experience in C++, but none in C and there was definitely a bit of a learning curve. My recommendation for students is to start the labs early, check the piazza discussions daily, and try to squeeze every possible point out of the labs, particularly if there is any extra credit available. \n\nMy recommendation for the instructors (should they happen to read this) is that I found Unit 3 and lab 5 a bit esoteric and not particularly valuable. I would have preferred that Unit 2, which is on distributed memory systems, be expanded and include more challenging labs, possibly a Cartesian finite volume solver of some kind. \n\nOverall it was a fantastic course, and I definitely learned a lot. There's a few easy, wishy washy courses in the OMSCS program. This is definitely not one of them. This is probably one of the best classes I've ever taken in my life. \n\nThis class is hard. If you are not a competent c programmer with an understanding of basic algorithms you will probably not make it through this class. However, this class is also completely awesome. The lectures are incredibly well done and are interspersed with actual good humor by Prof. Vudoc. The projects are all very interesting. There are 5 of them and I've spent about 20 hours on each. I could have spent double that time optimizing them, but my efforts were good enough to get close to 95% on most. \n\nThe midterm was brutally hard. I have not taken the final yet but expect it will be the same. However, the grading structure is such that you can get a 50% on the midterm and final, yet still get an A or B in the class if you do excellent on the programming projects.", 
    "CSE-6242": " A good introduction course to R and simple machine learning analysis. With 5 extra credit, I think it's pretty easy to get an A which only requires a final grade of 90/105. 1. R is intuitive & easy to learn if you have programming experience\n2. I got a B - thought I deserved A, missed by a whisker. The extra points of AC *will* help. Plan to get those\n3. Course content is fairly easy. Make sure you learn \"Regularization\" well - it is at the end of the course. The videos didn't cover it well, I felt. I should have learnt it from elsewhere. My course concentration at that time slipped a little (Life got in the way)\n4. Final exam was tough\n5. Don't expect too much from instructors. They were always MIA. TAs & fellow students on Slack and Piazza were very helpful. The content is very useful and applicable. And the professor made it easy to follow. The course is based on R and there will be an introduction to R in the beginning so no need to worry about the language. The grades are evenly distributed between 1/3 homeworks(4), 1/3 projects (2), 1/3 exam (1). The homework and projects are managable and relevant to the course content. Hwever, the final exam is brutal even though it is open book. Be prepared. Very well managed class, interesting material for someone with no prior ML/Data science background. It was a great way to start the program When I took this class in Spring 2017 there were lots of issues with the way class was run. You will mostly find negative reviews for that term. Even with all the issues I did learn a lot from this class as it was my 1st ML class. I liked overall course content and enjoyed all projects/home works. This class will prepare you for a Data Analyst role and may even be a good starting place for a DS role.\nIf you are interested in learning R and using R for data analysis and visualization along with few ML concepts then this is the class for you. This was a fun class, with a few frustrating aspects. The class was pretty basic, with the exception of homework #3 which was very calculus heavy (which I have no experience with) and there wasn't much explanation for the math needed. For the rest of the class it was very easy, mostly just homework assignments where you had to shuffle data into different formats and then use libraries to display the data.\n\nOne frustrating aspect was that homework assignments were not graded in a timely manner. They often took 3-6 weeks to be graded. Part of the problem was that several TAs had accidents or unplanned events happen and so other semesters of this class may not experience such a long delay.\n\nI also wish that there had been more helpful feedback on assignments, usually they just marked the number of points you missed with a short comment to what section was wrong, but the comments were usually very cryptic.\n\nDr. Joyner was very kind when you approached him with grading questions and there were several times when an assignment would be awarded points because there were several students that missed a single question or because something wasn't very clear.\n\nOn average I spent 7 hours and 48 minutes per week, but there were some weeks where I did a lot more than others and the range is from 1:20 to 16:41 (that was one of the project 2 weeks).\n\nI would recommend studying calculus (which is does mention on the course info page) before homework 3, but other than that this was a pretty easy class. This is a great class, and how classes should be structured. I agree with most of the other comments mentioned: workload is do-able (plan at least 12-15 hours a week, as the projects take far longer than you will anticipate), there is roughly 9 hours of video total, and the instructor is very active and very reasonable. \n\nThe only thing I will say differently is the math, at least for the last homework, was challenging for someone rusty in partial derivatives. Fortunately this part of the homework is the only homework / project that you actively need a math skillset; fortunately the instructor is very lenient on discussing the math section, to the point where a legendary student (who is also a math professor) walked the class through most of the problem and there was no complaint from the instructor. I will say brush up on Calculus (particularly derivatives, partial derivatives, and the chain rule), Probability, and basic Linear Algebra and you should be fine. Everyone should take DVA before Machine Learning to reduce the initial learning curve of ML. It's a great introduction to R and data analysis. There's some math involved as well, although not too complicated. The workload is moderate, light in the beginning, but picking up during later homework and the projects. The class is a good combination between practical and theoretic. I end up actually understanding regression and the math behind it and become quite proficient in R. It's such a bummer that the professor will not teach next semester. He is very involved with the class. Really great course. The TAs were active, helpful, and obviously worked hard. I felt bad when a student essentially posted that the TAs weren't worthy to grade his work without PHDs. Many other students appreciate your grading! \n\nThe first half was a lot of visualization and getting started with R, which was nice for me because I have never used it. The latter half was similar to ML class, not quite a subset but very similar topics. I'm sure I didn't do great on the final, but I won't let that change my review on the class overall. Contrary to what most people say, I think this course was very poorly managed. TAs impose and enforce policies at will sometimes just a few days before deadlines and once retroactively. Some of the TAs are excellent, but you don't know who's grading your work and whether they decide to create a new rule. I will definitely avoid any courses with Dr. Joyner in the future. I've only seen a few professors that are less ethical and with less skill in management.\n\nThat said, the material is great. They are still using Dr. Lebanon's videos and writings which have numerous typos and are unnecessarily esoteric. But you do learn a bit and nice introductory course. Good introduction to R. Videos at the beginning were good but later on lost its charm. Topics on ML could have been done better. The homeworks, projects and activities are very good. They test and improve our R skills. I ended up using a lot of online resources like Stackoverflow in dealing with different R syntax and libraries that can help do the homeworks and projects. The course teaches on how to visualize data, pre-process data (handle missing data), feature engineering and finally Linear and Logistic Regressions. Knowing some R libraries can really help speed up coding for the homeworks and projects. The visualization part of this course is also pretty good. They teach us about ggplots and other visualization techniques through activities (like graph networks and plotting data on world/country map) which are very powerful in creating visual charts with single line of code. I combined ML4T with this course and overall managed A in both. The 2 are a good combination. DVA exams are good , open book, open internet - second exam was special - very conceptual than memorizing. I didn't spend time outside watching the videos for exam preparation and still ended up doing well. Prof. Joyner's presence has been helpful this semester. Apparently, one of the TAs dropped out, which has significantly slowed grading. Before they got behind on grading, the TAs and instructors were always available on Piazza. Now their presence is more like other OMSCS classes. There are lots of office hours available on slack. A few students expressed concerns about grading consistency with the first two homework assignments, but regrades are underway. The current construction has one homework that is machine learning heavy and that has been the source of the most complaints on Piazza. As with ML4T the topics are introduced in lecture, but possibly not in sufficient depth for someone without recent undergraduate background in CS theory and math (partial derivatives of vectors). Both ML4T and DVA include machine learning topics along with domain topics (pandas, stocks and R, visualization respectively). BTW, there is currently no mid-term, only homeworks, projects and a final. Overall, I'm glad I took DVA this semester. The semester is not over yet and I already managed to use some of my new skills at work. The workload in this class was relatively light. There's only six lectures, very similar to the style of AI4R. The course is very heavy on R programming, and at least some form of statistical background will help you a lot in this class. Coming from a SAS-heavy background with no knowledge of R, I've appreciated the opportunity to get my hands into data manipulation and visualization using R. We also had the opportunity to learn the mechanics behind linear regression, logistic regression, and regularization. \n\nThere are 4 homeworks (technically 3, but the 3rd counts as double and is twice as long), all of which have been doable in a reasonable amount of time. The project this semester is divided into two parts, and is about analyzing and visualizing movie characteristics from IMDB's database to find the best predictors for gross revenue. I thought it was pretty neat to be given a real world problem with imperfect data to analyze. Don't procrastinate on the project. Unless you're really handy with R, it'll probably take 30-50 hours for each part (divided into two parts, due at different times). \n\nI really enjoy watching the lectures (sped up to 1. 5x), and the professor provides the lecture slides so you can actually just sit, comprehend, and follow the notes rather than screenshotting the video every two minutes. The professor is very active on Piazza, which makes up for the extreme lack of TA participation. This is a good course if you are looking for an Intro to R and to ML. The first half of the course is really basic R and most people will do well. There are projects and home works, but, I could not really tell the difference between the two. Course had 3 HWs (33. 5%), 2 projects (33. 5%) and one final exam (33. 5%). So the exam is a pretty big portion of the grade and is fully open ended. It tests your understanding of what is taught in the course. Overall, I would say this is a good course, but not an easy A if you are new to R or ML. \n\nFor those who are looking to take another course along with this one, it can be done. I took this one (DVA) and 6400 (DB-Systems-Concepts) and could manage the workload on both. Preliminary review, so that people choosing a course for next term, might have some information at hand. The instructor is very active on Piazza (not really sure if it's just because this is the first time offering). Office hours are bi-weekly held. Video lectures have been great so far, although there are only 6 hours of video for all the semester (with a lot of in-line quizzes, maybe that increases the amount of time dedicated to the lectures)\n\nThe course is completely R based, but don't be afraid, you learn it from scratch. I'd say this is a good course to pair with another one, it has a medium load. Also I think this would be a very nice introduction to ML topics. Basic calculus/probability concepts are needed for the second part of the course. \n\nHomework and projects feature open ended questions, where you explain/justify your answers (report) and also provide the R code you wrote to justify your analysis (tables, plots, etc). It's also helpful if you already have experience writing \"vectorized code\" (like in Matlab, Python with Numpy/Pandas, etc). \n\nSyllabus:\n\n- R programming (most of the course will be in R)\n- data visualization\n- data processing\n- logistic regression\n- linear regression\n- high dimensions and regularization\n \nEach one of those \"chapters\" is covered in two weeks, so typically in that lapse of time you watch the lectures and work on the homework/project associated with that chapter. \n\nGrading: \nThe course features three assignments, an individual project (divided in a midterm project, and final project), and a final (open book, not multiple choice) exam with the grade distributed equally between these components (33% all hw, 33% project, 33% exam). \" Excellent class! I think Prof. Joyner changed couple of things and now is so much better.  You can work ahead if you want to and you learn a lot along the way. I've never worked with R but by the end of the class, I felt pretty confident using that language to analyze and visualize data. This class has an excellent ratio of Theory and Practice.\n\nAlso, because of the practical side of this class, I was able to get a job as a Junior Data Scientist!! \nSo, in short, you'll learn R, Data Analysis and Visualization, Intro to ML (Logistic and Linear Regression) and hands-on experience in case you want to look for jobs in Data Science. \n\n That's a 10 in my book, hehe. I am adding this in the middle of the term so that it is useful for students registering in Fall 2017. So far, we have completed 3 home-works and one projects. One more project and final exam is remaining. The course starts out easy, first homework is very easy [introduction to R concepts and programming], second homework is moderate [introduction to ggplot2 and data visualization techniques]. The first project was analyzing movies dataset. There were ten questions with lot of subdivisions and each was equivalent to one homework. The third homework is implementing logistic regression algorithm from scratch and optimizing the code so that it runs fast thus enabling to train and test on the dataset given. I am new to ML domain, and the lecture covered in the video was not at all enough to complete the homework, I had to watch the relevant portions in Andrew NG's course to gain the intuition behind logistic regression. It was hard work but at the end, I felt good implementing the algorithm and training it. \nThis course starts off as easy and by the time you realize that the course is taking all the free time you have, it is well past the drop deadline. I would strongly advise students with no experience in ML domain to take this course as a single course. If you want to double up, it can be paired only with courses which are front loaded like the AI4R course. I have put 18 hours per week but that is applicable only to the second half of the course.  This course is by far (as of Nov 2017) ranked the worst among all OMS courses, but I still want to leave my comment, because I'm shocked by the inconsistency of OMS standard after taking 4 great courses. I registered this course after reading the on campus syllabus (My bad), when I saw the OMS syllabus, it was too late to withdraw and waitlist another course, so I decide to take it. The on campus version included all modern technologies SQL, Tableau, D3, Hadoop, Azure, Hbase, Pagerank etc.. But the OMS version is basically week 1-6: intro to R and ggplot in R; week 7 till end: regressions in R. The syllabus speaks for itself, a more appropriate name should be \"intro to regression with R\" or \"the linear regression half of stat 101\". These knowledge might be useful 10 years ago when everything was analyzed in memory, but now... I'm almost to the end of this semester, I've completed most of the homework/project in slow Friday afternoons at work without watching the videos. I have a statistical background, but to be honest, the course (homework) covered nothing more than linear regression, I assume most of us coming to the program should have some knowledge of linear regression. \n\n The only scenarios I think you should take this class:\n 1. you need a low involvement course: eg. you are paring it with an intensive 30+ hour course.  \n 2. (more important) if you are in the Machine Learning specialization, you have to chose 3 electives from the 4 courses offered. If you have one course you don't want (eg. BD4H), you'll have to take all the rest of the 3.  First thing is to clarify that there are two versions of this class, I will talk about the OMSA version.\n\nI loved this class! I can say it is one of the best online courses I ever did. The instructor is very passionate and very knowledgeable and the assignments are challenging but you end up learning a lot.\n\nYou will learn a lot about D3, and some bits about modeling and Big data technologies, but you will get a good general picture of what a full data pipeline project looks like.\n\nThe presentations are very enjoyable and well crafted, and you will make some friends thanks to a group project that will require at least 4-5 meetings. \n\nAll this said, this course could be improved on some aspects, one of which is time management and a bit more of hand holding. So don't underestimate the amount of time you will need for it. There are 4 BIG homeworks, so don't procrastinate and work steadily, if you do that I estimate around 20hours per week.\n This is my first course of OMSCS. I have no previous R programming experience, but I do have ML experience. \n\nIn this course, you will taught for following topics:\n\n1- R Programming Language  (Excellent part! All data scientist should learn a bit R)\n\n2- Data Visualization (This is part I love for this course, you will learn a lot of different visualization of data)\n\n3- Preprocessing Data (Also very good, it is very important to learn how to clean dirty data)\n\n4- Logistic Regression (Not good, they use too complicated terms to describe, even I have previous ML experience, I still couldn't understand these lectures)\n\n5- Linear Regression (Same as logistic regression)\n\n6- Regularization (Not bad, but it can be better) \n\nAgain, this course did excellent job in R and data visualization/preprocess, but I completely dislike the second half of this course. If you are going to be in ML specialization, take CV instead.  Interesting class which teaches students about real world and not just book knowledge. That being said, the class would be fairly easy for someone who already knows R programming language or has already taken machine learning class. I personally learned the concepts in class so i had to spend alot of extra hours to get use to it. The professor is very knowledgeable and was very active on piazza as well, but I felt I learned mainly from other students who were already in this field or were fairly knowledgable and contributed their knowledge on piazza. I took the OMSA class with Dr. Chau. This was by far the most challenging and time-consuming class I have ever taken (my undergrad was ME from Tech).  I also learned more in this class than any other class - a direct output of the fact that I spent more time on this class than ever before.\n\nDr. Chau is extremely reasonable and truly cares about his students. It is easy to get an A in this class as long as you spend the time. Generally you will be able to keep working/debugging code until you are certain that it is 100% correct. You have 3 weeks per HW assignment, which is reasonable as long as you start working immediately and don't procrastinate on the group project.\n\nMy only gripe about this class is that it should be worth 6 credit hours instead of 3. There is no way that the amount of content covered and work required for this class should be weighted the same as courses like ISYE 6501 and MGT 6754 which generally are in the 5-7 hours/week range. Took this as my first and only course in OMSCS for this semester and I would say this was a good choice in terms of work load and difficulty level as I'm working full time and it's been years since graduated from college. This course provided a refresh on calculus and linear algebra which I guess is useful when I get deeper in ML. I also took this course to learn R as a new language, which I think the course material did a good job on that, but maybe too much as it seems like it assumes minimum background in coding. So if you, like me, are a professional developer for years, you may find it boring.\n\nThe workload is light, only exception is the first project which you need to do some partial derivatives and implement a logistic regression model using R from scratch. The requirement wasn't clear until couple of days before the deadline, which makes it hard if you want to finish it early on you own pace. But since most of the HW and projects are due early Monday mornings, you have good chance to spend your weekend and should be able to get it done. I still remember the last project which is due the Monday after thanksgiving and I had to bring laptop with me and did some coding while on vacation in Fairebanks, Alaska. It was good memory though :)\n Joyner ran the class this semester so everything went smoothly and was well communicated. The class is pretty easy if you're familiar with R, otherwise it's about ML4T difficulty. Basically, take this class if you want to practice or learn R, or have absolutely no exposure to data science work (cleaning data, feature engineering, simple models). FWIW I didn't watch any of the lectures and still got an A. The exam was timed and proctored but open everything, including Google. Hmm, interesting course overall - in the end, I got the A I wanted but my brutally honest assessment of myself is that I didn't earn that A. In terms of the R programming side of the course, I use R on a daily basis at work so the assignments were a breeze. The projects were cool and make the student think and formulate informed hypotheses about the data. Based on my own grades, I felt like some parts of the project (the second project in particular) were graded too leniently (i. e., some parts where I felt I put \"adequate\" answers, but nowhere near the best answer or result possible, I still got full marks). \n\nThe final was baffling (in terms of the grade I got on it). My honest assessment of my performance was that I probably earned in the 65-75 range, but I was shocked to see that I scored in the 90s. It was very open-ended and I made sure to answer every part of every question, but I do feel like I missed the bar on some of the questions in which I received perfect marks. \n\nThese are good problems to have, I guess (rather than the other way around). \n\nOverall, nice class, and it's unfortunate that Prof. Lebanon (who produced the very nice lectures) will not be continuing as the instructor of record. Given that, it remains to be seen how generously this course will be graded in the future. This review is for the OMSCS version taught by Dr. Joyner. \n\nIt seems from some of the reviews on here and comments on Piazza, that this class is very polarizing. Either you seem to hate it or love it. I personally hated it. It's my first OMSCS course, so I have little to compare it to. \n\n<b>Pros:</b>\n<ul><li>The class is extremely easy. The first quarter of the class is basically an introduction to R and an overview of the difference between scatter-plots and box-plots. If you can't pull an A, or at least a B, a master's program may not be right for you at this time. </li>\n<li>Dr. Joyner does seem to care about his students and this program. While he seemed overwhelmed at times, you could tell that he cared and wanted everyone to succeed. </li>\n</ul>\n<b>Cons: </b>\n<ul><li> The homework/assignments/exams are poorly written. This is especially true for both the midterm and final exam, which had quite a few questions that could have multiple answers depending on the interpretation of what was actually being asked. A few students started a mini Piazza \"revolt\" where they threatened to escalate issues with the class/midterm if their grievances weren't answered (ironically, they then learned that the person to escalate these issues to for OMSCS is Dr. Joyner).    </li>\n<li> There are a lot of helpful TAs, but they never seemed to be on the same page. There were multiple instances where I would get two very different answers to the same question from different TAs. For example, multiple TAs said on Piazza and Slack that homework had to be done in LaTeX to receive credit. However, when they posted \"exemplary homeworks\" one student had literally hand written his homework, taken pictures with his phone, and cut/pasted the images into a word document.</li>\n<li> The lectures are hilariously bad. It's like they were made in some dystopian future where everyone must speak in a monotone voice and ideas can only be expressed through Word 2010 clip art. More importantly, some of the required readings have massive errors. I was pretty disappointed that this course has been going on for multiple years, and this hasn't been fixed. I spent a bunch of time trying to figure out Dr. Lebanon's logistic regression proof, only to realize (about two hours in) that it's just wrong. </li></ul>\n\nOverall, if you want an easy A or want to learn R, take this class.  **Positives**\n\nI enjoyed the assignments, and they seemed to be only as time consuming as one wanted to make them (for the most part, anyway). If you're a perfectionist and like finding out the \"right\" approaches to problems (eg, using the R vectorization instead of a for-loop, or tweaking your regression parameters to minimize RMSE as much as possible), the assignments can take a while. \n\nEach assignment was written in R, and you'll get a pretty decent grasp of the language. I would feel comfortable using it in a professional environment now.\n\nThere are five activities you can perform that each add 1 point of extra credit to your grade.\n\nThe TA's and students are very helpful on Piazza and Slack. I can't even count how many times I got stuck on a problem, only to find a relevant post somewhere on the community boards.\n\nDr. Joyner seems a lot about making a somewhat infamous class better and fairer to students. I don't agree at all with the below reviewer from my same semester who questions his ethics. It's clear that Joyner listened to student concerns and made fair adjustments. \n\n**Negatives**\n\nTo be honest, a few of the lectures were flat out boring to me. On the other hand, others were hilarious and bordered on the surreal - almost like I was watching a Tim and Eric episode. For example, Dr Lebanon has a penchant for using a cutout of his own head to illustrate topics, like when he mashed together angel and devil clip-art over his shoulder to represent Frequentists and Bayesians arguing... all the while talking about the topic in his droning monotone. Hilarious. I don't want to overstate it though - some of the lectures were great, and I'll likely watch some of them again.\n\nLots of the assignment instructions were pretty unclear, although I'm thankful to the TA's and other students for clearing most of them up. The midterm had some ambiguity in it too (not great for a multiple selection/multiple choice test), but to the instructors credit, they rectified the obvious ones and gave students' credit.   This class is great! Professor Guy is very knowledgeable and taught very well in terms of practically use and theory behind regression, feature engineering and feature reduction. This course is really useful for daily tasks or project for data science work Course was a good introduction to data visualizations (histograms, box plots, scatterplots, etc.) and to logistic and linear regression.  The course used R, which I have come to dislike mostly, at least compared to Python.\n\nVideos are a good introduction to concepts that I had to research further.  After further research, coming back to the lectures made more sense.   Likewise with the readings.  I had to iterate to learn the material.\n\nI really enjoyed the homework and project.  They were challenging, but applicable to further ML work.\n\nThe course instructor wasn't on Piazza much, if at all, but there were several TAs who answered questions quickly, and fellow students were also very helpful.\n\nGrading took forever, but this wasn't really a problem since the homework was only minimally dependent on knowing earlier concepts, so knowing if you did well on something wasn't a hinderance.\n\nThe final was hard.  Even being open book and open internet, it was difficult to complete within the 2 hours allowed.  I feel I earned my grade.\n\n Classwork was relatively simple, but working in R proved to be difficult for this newcomer. When the class took a hard pivot to logistic/linear regression, the material was more difficult, but the grading was more lenient. If you know how to use R, this class will be a breeze. Otherwise, the learning curve for the programming language was the largest hurdle for me. This class used R and covered the  visual presentation of results, and the techniques of logistic and linear regression.\n\nI really liked how the class was organised by alternating easier and harder assessments - each time I finished a harder assessment it was followed by an easier assessment.  This allowed my to catch my breath a bit after a difficult assessment, but perhaps more importantly it allowed me time to think about the work I had just done without charging straight into the next assessment.  I think being allowed a bit of time just to ponder helped me truly understand the topics.\n\nThe staff were active on Piazza and helpful.  Overall I really enjoyed this class.  This semester, the course was well organized and well managed. All the projects, homework and optional assignments were posted at the beginning of the semester, and the rules were very clear.\n\nThe schedule included a project every week (some of them optional and very small, but there were two larger projects) and a Udacity lecture accompanied by a short reading every two weeks or so.  Plus two open-book, open-internet exams. It was very manageable. To do well, one just needs to stick to this simple schedule.\n\nThe course is R-based, but it assumes no knowledge of R, spending the first couple of weeks teaching it. There is no need to learn it beforehand.\n\nThe first half of the course could be called \"Intro to working with data using R\", while the latter half could be called \"Intro to Machine Learning\". It's not clear to me why it spends so much time on machine learning topics, but it does, covering subjects such as linear regression, logistic regression, and regularization.\n\nInteracting with professor Joyner is a great pleasure - he's a fantastic teacher. On the other hand, the course seemed understaffed. I don't really mind the grading taking a little longer, but I think it's unfortunate that our inquiries about specific midterm questions were never fully addressed.\n\nOverall it's a solid course, especially for people new to the program. There are couple of major problems with this class.\n1) Professor is missing. I am not sure why his name is part of this course. This course needs to be redesigned by someone who owns it.\n2) The lectures are from Dr Guy Lebanon are pretty dry, math based and doesn't provide actual implementation basis. To me, it felt like you have to bridge the gap between theory and implementation. Without any background, it is very difficult. The course pre-requisites does not say you need ML background but you do.\n3) The grading throughout the course is inconsistent, the exam fairly difficult.\n4) The TAs are helpful if you know the material. They will not teach anything. I struggled throughout the course with no significant help in understanding the material.\nConclusion: Don't take this course unless the course gets redesigned under a new professor. Course was well run with Dr. Joyner. The homework, activities and projects were interesting and directly relate to the course lectures. Piazza was very active, and the TAs and other students were very helpful with questions. Great course to take as one of the first few courses in OMSCS. The first homework is R focused, so you have some time to pick up R if you have not done it before. Great first course for OMSCS. After taking the course, I have a much better understanding of regression and the basics of machine learning as well as a pretty solid foundation in R.\n\nI have an undergrad degree in CS from 10 years ago and haven't coded much since then, and I found it fairly straightforward to keep up. The homework assignments and projects were fairly time consuming for me because I didn't know R at all, but they were interesting and I learned a lot. Some weeks I spent 10-15 hours, other weeks I spent 0 because there was only a small extra credit assignment due. I found it fairly easy to get an A.\n\nI watched the lectures religiously early on, but later on I found the class discussions and google to be much more helpful. The TAs were helpful, but honestly I found the other students to be the most helpful. The professor was more of a manager of the TAs than a professor, but that's fine.\n\nI was intimated by the requirements of linear algebra and calculus since I am many years removed from college, but it didn't turn out to be that bad. One assignment requires you to do partial derivatives to come up with the equation you need to implement, but it wasn't too bad to fumble through with the help of Piazza. The other assignments did not require much deep math knowledge.\n\n I felt this was a great course to start with in the OMSCS program. I did, however, feel that the projects/homework were unnecessarily time consuming and beat the bush too much. It would have been better to cover more topics with shorter assignments. Also, I fell like a lot less time should have been spent on teaching R. It seems to me that everyone in this program should be able to pick up a new programming language with little to no hand holding.  This is a decent course. Though beware of the comments here because Prof. Guy Lebanon will not be taking Spring 2017. With that in mind I found this course to be a tad too easy. If you have a background in vector calculus and R the homework would be straight forward with basic data munging and proofs. \n\nThe final exam was... strange and the projects were sufficiently challenging. It will be curious what future iterations look like. The lectures are ancient. They were recorded years ago by Guy Lebanon. Guy may be a smart dude, but he is completely incapable of lecturing in a comprehensible way. Also, the descriptions and pre-reqs say nothing about the higher level math you need. I swear there were symbols I've never seen. I did 2 semesters of Calculus over 25 years ago (as well as a semester of linear algebra).\nThe homeworks and projects were generally OK. Homework 3 required you to code logistic regression by hand, when there are perfectly good functions built in, so that was pretty absurd. Especially since the lectures were very high level. It was basically the old game where they teach you how to draw an owl by drawing 2 ovals and then in the next frame show you a finished detailed owl. Good luck with that one.\nThis was my first class. If my next semester is the same experience, I will be dropping out. I learned very little (I actually have taken some ML courses before) and found it highly frustrating. (Only took this class because it was a requirement for ML specialization.  Now that CV counts for ML, I would strongly recommend taking that instead.)\n\nI basically learned nothing in this class that wasn't already covered in the first few weeks of ML.  Do you already know what a histogram, scatterplot and boxplot are?  awesome, you can skip most of the first half of the semester.  \n\nI like Dr Joyner, but I think he inherited a bad situation.  Lectures had a few interesting bits, but mostly took a long time to say something pretty straightforward.  Homeworks/projects were tedious and had to be written in R.  Graders deducted points for random things which weren't even in the instructions.  Both of the exams were poorly-written and somewhat ambiguous.  (There were disputes on a significant number of the questions.)  On the plus side, the homeworks and projects were released ahead of time, so at least you could work ahead if your scheduled allowed. There are two phases for this course - Phase 1 - From day 1 to Exam - 1 - Its good, fun and motivating[R, R and R].\nPhase 2 - Here the course takes a turn and goes into ML side which - will be very hard if you have not  taken any course on ML. I am from non ML side and literally had very hard time progressing in Phase 2.\nBTW - Dont think that the course material is going to help in Phase 2.\n This is an excellent class. I have learned a lot about R that helps me writing predictive analytic coding effectively. Tutorials are so exceptionally well done and applicable it is misleading that it is simple. Exellent instruction which makes leaps into application reasonable *does not mean it is easy*. This is how courses should be structured. The projects and homework are challenging, not simple. They apply what you are being taught while requiring a stretch for you to apply the concepts. I thought this was full of a lot of practical and meaningful work, and highly recommend this class to anyone. You'll really love the assignments. I did. Very interesting to do. Also, just so you know, how people are saying it takes 3 hours is beyond me. Not if you are including pacing projects and homework into your assessment. I read a comment about 30 hours per project over 2-3 weeks... and agree. Plan well, 30/(2-3 weeks mentioned) = about 10-12 hours time. Good course in my opinion. Starts off easy and gets harder at the end. I knew R coming into it which made everything a lot simpler. Definitely a good course to take before you take machine learning. Gives you a background in R, and touches upon the beginnings of machine learning with linear regression. *TLDR*: This is a graduate program, you are expected to work hard and work beyond what is provided to you. This course is an intro to ML/Data Science. Don't take it if you took ML already. \n\nThis was my first class at GT. I paired it along with KBAI. Although it's recommended to not take more than one class at a time, it wasn't my first time taking online classes, so I knew how to deal with the self-discipline of handling an online class. That being said:\n\nThe class wasn't difficult, but it was challenging. The first half of the course is a breeze (assuming you have programming experience and know basic statistics/visualizations). The second half of the course was more challenging, but it's where you learn. We implemented Logistic Regression from scratch, had to derive the cost function (partial derivative), and analyzed datasets, etc. The course serves more as an intro to Data Science as it covers visualizing data, cleaning data, modeling data, and deriving conclusions from data, overall making you think like a Data Scientist. I don't have a formal ML background (although I work in a Data Analytics team, so I'm exposed to it), so a lot of this material was not new for me. I do believe this is a good intro to ML/Data Science. \n\nOn another note, you will have to do independent studying to handle the 2nd half of the course. Prof Lebanon is quite dry and personally it was very difficult to pay attention to his lectures. Also, I didn't enjoy his teaching style. I made good use of Andrew Ng's ML course in order to understand some of the topics discussed in the second half.\n\nHaving completed only one of the extra credit tasks (called Activities), I ended up with an A. Professor Joyner taking over is probably the best thing that could've happened to this class. \n\nOne annoying part of this class however was how unprepared some students seemed to have been for a graduate program of this caliber (this is one of the easier courses of the program). Piazza was almost unbearable with the amount of simplistic questions that could have either been figured out independently or by a simple google search. I understand lots of people don't come from a CS/Software Engineering background, but the amount of hand holding some people needed/expected was almost ridiculous. It was my first course. You would better to learn R in advance since it is a mandatory for homework & projects. However, the course is very reasonable and easy to follow even though two projects are quiet time consuming. The schedule of the course was not tight so that you would take another course as well. There were two exams but it was open book based and not that difficult. If you did not miss any projects and homework, you would get easily get an A. I recommend. The assignments took me a fairly large amount of time to complete, and I used the available 48 hour extension twice (for a ten point penalty). This course taught me a lot of practical skills that I could apply to my current job and would help anyone who deals with any kind of reporting. The data pre-processing required in the projects can get a little hairy, but it's good practice. Several extra credit assignments were given during the course. This was a good class as my first class in the program. You could easily work ahead if you wished though reading the piazza discussions about the material often helped if you waited till later. As with most grad school classes, you get out of it what you put into it. If you want to spend a lot of time and really get things perfect you can. If you want to spend a lot less time and do the minimum you can still do pretty well you just won't learn as much. If you want a good way to learn R this is a good way to do that and learn some visualization things as well. Liked the projects a lot. The exams were a little tricky, but the instructor was willing to go back and look at them (at least on the midterm). Have not yet attempted the final. This was a great course! It focused on the practical side of data science, with very little theory. Our semester had 3 homework assignments, 2 projects, and a final. The lecture material is light (only 6 hours). The homeworks were easy for me, usually requiring only an afternoon. The projects were based on a movies database. They were both really fun, but can be super time consuming depending on the quality of the report you feel comfortable submitting. I probably went overboard on mine, but mostly because I was enjoying myself. Full marks on the project are likely achievable with about 10-15 hours worth of effort (and we were given 4 weeks). I felt the final was very fair and interesting. Several students had issues with it, but those appeared to be more related to how proctor-track displayed (or hid) the exam questions, rather than with the content itself. The grading tended to be lenient this semester, but that may change with the new instructor. I'm sorry to hear Dr. Lebanon wont be teaching next time. He did a fantastic job. The teacher and the TAs were very active and responsive in the forums. I took this course with Dr. Chau (OMSA). The OMSA course consists of 4 very large assignments and a semester-long group project. I believe this may be the most time-intensive course in the OMSA program, and I recommend either taking it early or as a \"capstone\" class to finish up the program.\n\nThe most challenging part of this course was the amount of time that needed to be put into the assignments and projects. The concepts were arguably quite simple, each assignment required learning one or more new programming languages and/or technologies. Setup of the environments required often took a lot of time too. Dr. Chau was receptive to feedback, and modified the last assignment to have one of the questions be for bonus credit, which helped it be more manageable. It's possible the online course will change dramatically based on the course feedback. That said, it is an incredibly time intensive course and you should plan accordingly.\n\nThe project was... frustrating (to me). The assignments were so time intensive that our team struggled to work on the project early on and ended up pulling things together at the last minute. Another challenge was the difficulty in making group decisions when a group leader wasn't established and the whole team couldn't find time to meet virtually.\n\nI will address the concern about using Azure and AWS with a personal credit card as stated in another review. While, yes, it was annoying and uncomfortable to provide that information, for both services we got much, much more free credit than was needed to complete the assignment, and students who did go over the free limit were able to get the charges waived by calling customer support and explaining the situation. The Azure part of the assignment could be completed on a personal computer and then uploaded to the server, eliminating any chance of error/using up the credit.\n\nI learned so much in this class and was exposed to a large number of data technologies. I know there are some people who struggled greatly with this class, but I found it comparable to (if not easier than) my undergrad engineering courses at a top-ranked engineering school, so the quality was what I expected. I think the class does have room for improvement, and could use more TA support to improve communication and responses to Piazza. All said, I wish I had used this as a capstone class toward the end of my degree and had taken it on its own, so I could have gotten more out of the project. I went into this class with no R experience and did well.  Excellent feedback was left on assignments pointing out areas for improvement.  The extra credit assignments were well worth the effort and addressed topics a little outside the flow of the course.  The most time consuming part was the first project which require a lot of figuring out how to use R to accomplish a number of data processing tasks.  Outside resources were needed so don't expect the lectures to cover everything.  The lectures taught by Professor Lebanon, while somewhat verbose, were excellent.  I had to watch them a couple of times to pick up on Professor Lebanon's many insightful points. Really enjoying this class as my first foray into machine learning. \n- Workload is dependent on a few things: your prior experience in ML, and your willingness to apply yourself. I myself had no prior experience and really wanted to apply myself so that I can properly internalize the core concepts and found myself working around 20 hours a week. However someone with experience in ML and ML4T can get by with no more than 10 hours a week of effort. \n- Math is a tough thing to get up to speed on but we have had some really engaging piazza discussions that solidified my understanding and the students really take it upon themselves to make sure their fellow classmates are in a position to succeed. It's great. \n- Instructor is very responsive and I have yet to see a relevant question unanswered by him. Hes got some great experience in ML and does a good job of breaking down the concepts into digestible chunks. \n\nFinal takeaway is to definitely take this class if you are in the ML track but if you are already quite proficient in ML and R, this class may not give you anything more. \"What can one man do against such reckless hate?\"\n\nI hate to make this sound like an amazon review, but DON'T LISTEN TO THE OTHER REVIEWS. \nThe people ridiculing this course are drama queens who take no self-direction and want everything handed on a silver platter. \nMost likely they're industry professionals out of touch with how education has changed in the past 20 years or graduates of inferior schools. \nHonestly every point made by other reviews is complete bull****. \nThe instructor/TAs are very helpful if you have questions and easily accessible via Piazza, Slack, and email. \nYou can ask them anything related to homework, lectures, and even more in-depth questions related to the material. \nEvery time they WILL help until you confirm your questions are answered. \nI just can't fathom how people are saying they couldn't get in touch with the TA's when they are literally on slack every single day at set hours. \nHonestly, it seems that people who waited until the last minute to do their assignments couldn't get the right answers. \n\nNext, I didn't see much ridicule about lectures or course content, which we can all agree was thorough and useful. Although I did wish we spent less time on R and include another project. \nThe homework and projects were fair with more than enough time, but once again people waited until the last minute to ask questions and panicked when they didn't receive a step-by-step solution to solving the problem... pathetic. \n\nThe only complaint I will make is that grading took way too long. However, if you really need feedback you can just ask the TA if your code is correct. Regardless, you should know if your code is working based on the questions, so the feedback is not useful except for stating why you lost a few points (maybe for not including enough graphs). \n\nDon't let other reviews scare you. \nI know I sound like a drop in the ocean, but being a GT alumni I know the difference between a good and bad course. \nThis is definitely the former. While there is room for improvement, this class definitely isn't quite the hot mess that it was in some previous semesters. Like the Fall 2017 semester, Professor Joyner once again joined the instructor team to help ensure things ran more or less smoothly. And by \"help\", I mean he appeared to be \"the\" instructor for the course (despite what the course sign-up states, Professor Chakraborty was not involved in anything student-facing). Dr. Joyner and the TAs did a nice job keeping us up-to-date and on-track, though it's a continued pet peeve of mine when an instructor literally ignores their students for the entire semester.\n\nContent-wise, the first half of the course's lectures were pretty good. Dr Lebanon's explanations and manner-of-speaking tend to make things needlessly complicated, especially when getting into the more math-heavy topics, but nothing was too overwhelming. The second half of the course was a lot harder to follow, again mainly due to the way the content was presented. Several students posted alternate sources of information on Piazza that made the concepts much easier to understand. It's like too much focus was placed on the theory and exact formulas rather than what it actually means in practice.\n\nThe projects and homeworks were all pretty fair, in my opinion, even though I came in with no R experience whatsoever. Some assignments were intimidating to start, but became more manageable after spending some time playing with them. The TAs also posted helpful hints for some assignments. The exams were both a bit crude, handled via ProctorTrack. The midterm had a lot of disagreement with wording and ambiguity. The instructor team did eventually address a few of the questions about a month later and gave some points back, but other questions were never clarified.\n\nGrade-wise, it still seems fairly easy to get an A as long as you're not waiting until the last minute to do an assignment (and almost everything is available from the first week of class, so there's no need to wait). Four homeworks worth 10% each, two projects worth 20% each, two exams worth 10% each, and 5 activities worth 1% each. Since that's 105%, you've got 15% of leeway to stay in \"A\" range. There didn't seem to be many issues with grading as long as you followed the requirements.\n\nCommunication-wise is where things could have been better. The TAs were great for office hours on Slack and generally responsive on Piazza, but private posts would get ignored and it seemed like there were some topics the TAs didn't want to get involved with.\n\nAll-in-all, a pretty good class if you're interested in R, but the lectures were often awkward to watch and the algebra portions didn't really add much to the course in any meaningful way. This course builds a very solid foundation with R and basics of data science. Though it does not delve much into many ML algorithms, it focuses well on visualizations and key regression algorithms. Since it was a first offering, the structure of the course was bit vague and exam a bit surprising. But that said, overall a good course that is very informative I took the first iteration of this course with prof. Guy Lebanon. The course is fairly easy and doesn't require a lot of time, it's a good introduction to some machine learning (very basic) and data visualization, which may come in handy in later courses. There were some complaints with the grading in the end, but that's expected from first time courses. Lectures are high level and not close to what may be needed to complete the homework and assignment. It requires higher level maths. I personally feel not much was learned through this class. Also, the course content needs to be refreshed. Fun and solid class, but very light in material. I watched all the lectures the first weekend, they were mostly review but nonetheless they did help hammer home some good fundamentals so they were worthwhile. Workload picked up in the second half of the class. I have taken 10 classes and this was one of the easiest. \n\nProfessor Lebanon stressed he wanted the class to bridge the gap between a purely academic class with one with applications more for the real world as well. As somebody who has served both as a professor at top research institutions and worked at respected companies in industry, he is qualified to design such a class. \n\nI took the class in Fall and I see there are negative reviews from Spring. Not exactly sure what happened, because the lecture materials are the exact same and I understand the assignments were almost the exact same. Sounds like assignments not being returned in a timely fashion is a valid concern, but I imagine should be fixed with future iterations of the class. But some of the complaints about the material and the ambiguity of grading seem unwarranted, I don\u2019t necessarily expect a class to have to explicitly lay out grading criteria ahead of time and they weren\u2019t in the Spring and students did not complain. I am puzzled why reviews are THAT different between semesters. Maybe the class got a reputation as an easy intro class (I would say mostly true) and maybe this shifted expectations and student demographic of the class. Great course! I've used R programming language for years but still learned a great deal about more efficient ways to manipulate and plot the data. This is great introduction to ML (Logistic and Linear Regression). If you have any back ground in this topic then the class is very easy. Essentially the class teaches you how to use R in a very gentle manner. \n\nThere were 5% extra credit on offer. \n\nThe class has been significantly improved since Dr. Joyner took over. I had no complains as the class was run extremely well. This class can easily be done with another easy or medium difficulty class. \n\nThe projects and HWs were well thought out and lead from one to the other in a systematic manner. Finally the exams were easy multiple choice with open everything. So the class was essentially an Easy A class. \n\nI would recommend that all new starters thinking of doing ML specialization do this course as it has been significantly improved. You can ignore all the old bad reviews.   A very good introduction to R and data visualization concepts. Also, a brief introduction to ML concepts. The lectures were not helpful at times; especially towards the end (Regularization etc).\nProjects were time consuming so make sure you have enough time in hands to complete and submit on time.\nExtra credits for the Activities did help in the end to get an A grade; inspite of the difficult and slightly confusing final exam (open everything).\nOverall, I am glad I took this course in-spite of the bad reviews from previous semesters. This time around it seemed a lot better organized in terms of communication - I believe it was the Joyner effect. When Professor Lebanon taught this course, it was excellent. A few bumps with it being a new course were far outweighed by a highly engaged class and teaching staff that made it very enjoyable. There were real-world problems and a challenging/fun exam that pushed you to think instead of just recite back lectures/material. It was useful to learn the guts of the mathematics behind some of the core algorithms (e. g., gradient descent). Some students complained/struggled about having to use high school/early college Calculus but it should be reasonable/expected in a graduate program like this one and in particular the field of ML and Data Science. R was also incredibly useful to learn and has served me well in industry. I loved the inaugural professor (Lebanon) as he had a very practical approach without neglecting the theory, either. The general workload wasn't bad, but the projects could definitely suck you into trying to work indefinitely to improve results (self-imposed). All programming was exclusively using the \"R\" language... I was happy to pick up a new tool out of the deal! The biggest concern I had, but I accepted during the first, registration, week of class was the homework/project/final grades were all equally weighted at 1/3 of the grade. This was a concern and a bit of stress toward the end of the semester, but I was a consenting adult/student like everyone else in the class, so I didn't think it was unfair. I would say the course was neither unbearable nor easy. I earned an A and think those who participated did reasonably well. __Pros:__\n\n- Easy class to get an A, especially with all the extra credit activities and lenient assignment/project grading.\n- The topic is fairly interesting and gives you a solid foundation for machine learning.\n- TAs and Prof. Joyner are super helpful in terms of communications and clarifications. Great work there.\n\n__Cons:__\n\n- The class felt too easy for a top graduate level CS program\n- The video lectures are useless beyond just giving an overview of the topics. Reading extra materials and researching online is a must\n\n__Misc:__\n- Remember to use Brent's notes for your exams (you'll know what they are when you are taking the course) They are the best. This was my first course in OMSCS. Initially I was apprehensive about R and linear algebra and calculus (last time I did that was 17 yrs ago). For learning R, the course provides sufficient time to learn the language and I also heavily used the DataCamp \u201cData Analyst with R\u201d track and it made the homework\u2019s and projects a breeze. To tackle algebra and calculus, I referred to Khan Academy. Both these resources are more than sufficient to prepare for the course. \n\n The homework\u2019s, projects and activates are announced up front so that we can plan about them. Make sure you do all the activities since they are extra credits and help if one of the homework or project does not go well. The grading is lenient and it is not difficult to score an A. I think this is a great course to take first up in the program. This course has been an incredible source of stress, anxiety, and frustration. Though I expected the work to be difficult (my courses last semester in the OMSA program certainly were), it has bordered on impossible at several points given the unreasonably complicated nature of the work we are assigned.  I spent more time decoding confusing instructions and being my own IT support this semester than I did working on any visualization projects or concepts. I was very close to withdrawing from the class and if it weren\u2019t for the group project and the fear of letting my teammates down, I probably would have dropped it.\n\nFor each homework set I spent at least the first week (40+ hours) just trying to get my computer set-up with the software/environments necessary to even start programming. In several instances this has required making changes to the firmware, multiple uninstalls and re-installs all of which are incredibly time-consuming and I think not the point of this course. My only computer is my work computer and I have felt quite nervous about how these changes I have made might impact my machine and my ability to do my job if it were to crash. \n\nTo complete a homework assignment students were required to join Amazon Web Services and Microsoft Azure, both of which required entering personal credit card information. For each of these services there was the potential of running up thousands of dollars in charges if a mistake was made. This is an entirely unacceptable risk to ask students to take. Often learning takes place when mistakes are made and to put a financial burden on students who are already paying to learn is wrong.\n\n\nAt several points throughout the semester direct messages to the instructors went unanswered for days. At one point a very urgent message (labeled as such in the subject line) was ignored for 84 hours. At the point it was answered it was too late.\n\nThe difficulty I have had this semester has caused me to question my future in this program. If the 40+ hours per week of work needed for this course is indicative of any future courses, continuing to pursue this degree will be incompatible with maintaining my full-time job and family responsibilities.  I understand that Tech\u2019s rigor is a part of its great reputation, and fully expected my classes to be very challenging. However, I did not expect to be subjected to unreasonable expectations and poor communication by professors in a professional graduate curriculum like the \u201cweed-out\u201d courses I had during undergrad.\n Simple course. Try to do activities as they are very simple and easy scoring. Homeworks too are quite simple project need some thinking. Try to do R before starting the term. I got a lot out of this course, and I enjoyed it!\n\nThis course covers R and data visualization in the first half of the course, and then it goes into both theory and use of logistic and linear regression in the second half of the course. I think that the first half of the course is generally useful and not overly challenging. They do provide pointers to an entire book on visualization using the ggplot2 package, which if you read from cover to cover and play around with it could satisfy those who already have exposure to R and ggplot2. The second half of the course will probably be challenging if it is your first exposure to linear and logistic regression, and it will probably not be overly difficult if you have studied those topics before. I did not have that exposure before this class, and the rest of my review assumes that. \n\nAs for pacing, the class is relatively slow in the beginning. You are probably looking at more like 6-8 hours per week on average of required work. If you dive into additional references and optional assignments, you can spend more (and get a deeper understanding). The pace really picks up from the first project onward. As students in past semesters have noted, the projects will take up as much time as you have, and you will always feel like you could have done more. On average, you are probably looking at more like 12-15 hours per week at that point, and it may be bursty. \n\nNow, as for the class logistics... I think most of the reviews for the semester have been at an overly negative extreme, and the one just below seems a bit too positive (hello fellow undergrad alum!). There were problems. They were not handled in the best manner. Piazza became out-of-control negative. Communication from the professor was often sparse. CIOS feedback should be given to avoid this in the future. I am proceeding under the assumption the professor will take CIOS feedback to heart. But if he doesn't, I would avoid his classes in the future. Course mainly covers R, tools for data visualization in R, Logistic Regression / Linear Regression, and regularization. \n\nThe actual content in the course can be considered light however, the videos and the supplemental readings are so well done I wish every other course could use this course as a template. They are really produced in such a way that is not too math intensive but uses enough to give enough depth in the concepts reviewed. \n\nThe professor and TAs are really involved. They definitely seemed to want to help and resolve all student issues. \n\nThe only thing I disliked about the course was the final. The professor did not prepare us for the final at all. The content on the final was related to what we had learned in the course up to the point but was applied in a completely different way than how it was applied in the homework and project. Also, the final was 33% of the grade (way too high given the type of test given us). I would of preferred an additional midterm + final composing the grade instead of a singular final. This course was very organized and instructors and TA's were very friendly. This class was very active on Piazza and most of my general questions were asked and answered by other students. I did however have a specific code question and sent a private post to my assigned TA but received no response. \n\nThe first half of the course teaches the basics of R and how to model data. This was really helpful because I had no experience with R coming into this course. The second half of the course teaches a few machine learning techniques. I think this is a great course to take before you take the harder machine learning courses. \n\nThe homeworks in the first half of the course were very easy and fun because you get to play with R to create all kinds of visuals for the data. The homeworks in the second half took longer but I felt they were valuable lessons to learn machine learning if you haven't learned it already. There were 2 projects, both of which are not hard if you dedicate the time to do them. Project 1 took much longer than project 2, but project 2 builds off of project 1 and is easy if you did well on project 1 and were able to reuse some of the code. The exams were very easy if you watched the Udacity lectures and read the course readings. Exams are open book, notes, internet (the only thing not allowed is help from another person, chat boxes, etc). The instructor tried to stick very closely to the materials provided and gave us points back for materials on the exam that were not covered or phrased misleadingly. \n\nI think the grading was very lenient on all homeworks, projects, and exams. It would be hard not to receive an A in this class. This is an excellent foundation course for anyone in general, but for anyone considering ML, this will give you a good course to start with. The course is very well structured, and the prof. and TAs were very active. If you want to prepare for this course, I would suggest you complete the Exploratory Data Analysis in R course on Udacity to get a heads up with R. This way you can start with the more interesting topics which start after the mid semester. For math, I found most resources I need from just Khan Academy. I took this class after ML, which made it very easy as most of the ML concepts were just refresher. This is a great introductory class for R / data visuals, but not a great one to start learning ML. I really appreciate Dr.Joyner's effort to keep the course organized, especially by releasing assignments in advance so that I could better manage my time (among other priorities). However, this course doesn't take much time at all. The only time consuming part will be the two projects (and only if you want to get in-depth). Final exam is on an easy-medium difficulty (definitely a lot easier than ML midterm).", 
    "CSE-6250": " There are 4 assignments and 1 final project and I wanted to quit 5 times. All of them are excruciating and there are 0 scores all the time, even during the stage of final project. \n\nCompared with Machine Learning, the workload for this one is waaaay much heavier and the assignments are way much more difficult. For ML, the assignment does not have a fixed answer, you can basically write it in any reasonable way; however, for all 4 assignment here, your scripts must generate a set of unique right answers (some of them need to be within in a certain range), if your script does not compile, you got 0 (because they were auto-graded). \nFor each homework, there are several questions. Although TAs claimed that they would grade them independently, it is highly possible that, if you can not solve the 1st one, you cannot go any further. \nThe videos on Udacity are \"useless\", you can barely learn nothing from there; but you will learn everything else via assignments, final project, labs, and student discussion posts on Piazza. \n\nThis course is about Health, but it's not healthy at all to take it - so many sleepless nights, excruciating debuging process, having no idea where to go, etc. etc. :) This has been the most intensive, hardcore, and outrageously awesome course ever. Unfortunately, I could not enjoy it as much because I took 6505 CCA along with this course, but I still got a lot out of it. \n\nThings I liked\n- hands on exposure with real big data in a practical field (medical)\n- exposure to technologies that are currently being used in the field today. \n- the guest lectors. \n- Hands on experience on what machine learning really is capable of doing. \n- good community of help through Piazza. \n\nThings that I wasn't so fond of but are good\n- hacking away, just trying to get things set up before I could even run my code. You should really have experience working on a linux server so you can start using AWS and the hadoop environment. \n- Trying to differentiate equations that weren't ever mentioned in the course lectors or course prerequisites\n- making matrix multiplication work through Spark. \n- Easy Chair. it was anything but easy... or a chair. \n\nThings I didn't like \n- sometimes I felt TAs were very short. I can't entirely blame them, there is a lot on their plate. I wanted to turn in a newer version of my final project which I knew was still within the deadline. Not much luck talking about it. \n- Class still has a lot of kinks that need to be worked out. How to give feedback on the final project wasn't very clear until the last moment. \n- First homework assignment was using python pandas/numpy environment. Easy, know it already. Anyone that has already taken Machine Learning probably already knows about that environment. it would have been better if there was an assignment on the AWS EMR environment with a little bit of python to follow through. \n- Main lectures were interesting but almost completely useless. \n\nI was deceived. Somewhere probably on the syllabus, I remember reading that this course would most likely take over 15 hours every week. So I assumed it wouldn't be too bad. 20 or so a week was something I could manage. it was more than double that.  This is the most \"practical\" course I've taken so far ( out of 9 ). It is very harsh at the beginning if you're not well prepared ( to meet the pre-req ). I had some experience with hadoop, mapreduce and piglatin before, thus the first 2 homework were not that bad. But learning scala and spark within 2 weeks was brutal. TA, professor and especially classmates are very helpful. The second half of the course is about project. I did learn a lot for writing and coding. It is also almost self-paced which made life much easier if compared to the first half. It is a very useful course if you plan to learn big data and use the related tools. But be prepared it is not an easy one.  **Important note:** I took another course which was very time consuming (not GA) as well while I was taking this course, so that may influence my view of this course as well. And just for you to know I had taken more than half the labs of  this course and all OMSCS ML-related courses before day 1 of this course.\n\nDo you want to learn Big Data? OK, then take the best course or MOOC you can find online or offline or start some coding by yourself. Don't take this course. That's my best advice. Why?\n\n- **Professor is almost never around.** This is perhaps the biggest issue, and from my point of view, where all the other problems come from (he just doesn't see what is going on). You don't see him around in Piazza and he doesn't respond emails. I've been in other very few courses where professor is never around, but this course takes it to the next level. He participates with teams when it's time to start the project though. I can attest that.\n- **It's outdated.** They use spark 1.3 in virtual environment for homeworks. Latest spark version by the time of this writing is 2.3. So, it's mainly focused on RDDs, which is being left behind in favor of DataFrames. You can still use DataFrames in spark 1.3, but it's not mature enough. The same happens to other tools used. Some of the tools are not even the most used tool of their type out there. So sometimes you feel like you're learning it for academic purposes mainly or to get the grade. Having to give almost 40 hours every week to something like that can be frustrating.\n- **Feedback takes a long time to arrive**. There were times I had to wait a lot to get an official response, way more than other courses. TAs do this, I don't remember having seen professor do it.\n- **Fighting against environment**. They give you an environment you have to set up at the start of semester. It's good help, but you'll end up fighting that environment the rest of the semester.\n- **So much work is worth very few points**. 4 Homeworks take lots and lots of hours every week, but they are worth 10% of the whole grade each. Only 40% of the grade after 8 weeks of no social life, maybe 200 hours of work or more (each homework is given 2 weeks).\n- **Forget you had a family.** Your family will miss you for the whole semester. If you have a spouse, he/she won't be happy you decided to take this course.\n\nFrom my point of view, this is one of the **most important subjects for Machine Learning Specialization** because of how often you are asked to know this stuff for a job, and I liked the fact that GT had a course on this. I waited to have a good amount of ML knowledge before taking it, and I think the intention is good, but this course needs a revamp desperately and a professor with time well spent on Piazza.\n\nThis course was way too hard, and half of it was because of the wrong reasons (getting environment to work correctly, lack of documentation, lack of lecture on subjects needed for homeworks). \n\nI think they are thinking in improving this course, hope they do. I could have taken 2 other courses in the time it took to finish this course.\n\n I came into the class already knowing SQL and Spark in scala fairly well, and had taken the rest of the ML specialization already, so take my workload and difficulty ratings with a grain of salt. Here are some things that might be helpful to know:\n- You need to know how to calculate partial derivatives, use the chain rule, etc. You have to derive various update equations and then code them. In other words, if you weren't able to derive the equations, you wouldn't be able to do the entire rest of the homework and would get a terrible score. That could really rain on someone's parade.\n- You are required to use scala for Spark (except on the Group Project). You are not allowed to use pyspark. \n- There are 4 homework assignments and then a group project. No exams.\n- You need to know SQL for most of the homework\n- The first homework uses Pandas and sklearn. The rest do not.\n- The second homework uses Hive, Pig, Map-Reduce, and scala Spark in Zeppelin. You don't need to know Hive, Pig or Map-Reduce very well. Just do the practice lab before the course starts and you will be fine on those.\n- The 3rd and 4th homework are scala Spark. You need to know it pretty well.\n- The 4th homework uses Spark's Graph-X. \n- The Group Project is worth a lot of your grade. A lot of people did projects based on Deep Learning.\n\nWARNING: when testing your homework using their test scripts, do not assume your code is correct if it passes. Their tests are inadequate. Many students complained of having passed all the tests but then losing lots of points.\n\nPros of the course: Great practical experience in big data. The homework was very worthwhile and I enjoyed it.\nCons of the course: This course could be great if anyone on the teaching staff would dedicate even a little bit of effort. They will give you a set up for Zeppelin using Docker that takes many hours to complete and then you find out at the end that the set-up doesn't work, and in fact, when they gave it to you, THEY ALREADY KNEW IT DIDN'T WORK because it didn't work in the previous semesters either. And they still keep handing it out. No respect for students' time whatsoever. The instructions in general are frequently ambiguous or wrong, and no efforts are made to correct them. The TAs make brief appearances on piazza to give 3 word responses that do not answer the question that was asked. The professor of record has no interaction with the class whatsoever -- not even a single piazza post -- except each group for the group projects were allowed to meet with him for 10 minutes over 3 days of his choosing. Then after we all cleared out our schedule for the great honor, at the last minute, he cancelled and told everybody on that day they needed to move to day x. Which of course most of us could not do without any advanced notice. So I never had a single interaction with him. Lastly, the pacing of the course is bizarre -- almost backwards. The more time a homework or task takes, the less time you are given to do it. And the easier it is, the more time you are given to do it. The homework and project are not given out ahead of time so there is no way for students to correct for this.\n\nI still liked the class despite all this in that it really did help me become confident with big data technologies and scala Spark in particular. It just frustrates me to know end that the course could be SO much better with just a little effort. Took this course on my first sem in OMS. It was a useful course to me because I got to learn big data technologies like spark, hadoop, scala etc., - but you could have learned more if you just read a book on each of those subjects as this course does not go deep into each technology.\n\nThere were a lot of difficulties setting up env in the beginning. TAs were kinda responsive, but not very helpful. The homeworks were not structured well at all! I did have plenty of time to complete each homework, but I had no idea whether my code was right or wrong! There was no feedback or guidance on this part. So, for many assignments - students who check their code on few test cases after submission learned that they had missed a minor edge case which was only in the TA's test set and lost marks due to that. IMHO, if you actually want to learn big data technologies, grab a few books with big data tech. names on them and just do the programs in the book. You'll learn a lot more that way.\n\nThe only interesting part of the course was the project (which fortunately was a huge chunk of your final grade). You are allowed to choose from a wide range of pre-selected topics. The project can be done in a group of 3 or solo. You can also get access to datasets which are normally not available for free access online. I would say this was the only useful thing I got out of this course.\n\nI would assume this course is going to be restructured or rebuilt soon because of the complaints that were made during my semester. Overall, if you are not comfortable learning and implementing with 3-4 technologies in a short period of time, you are going to have a hard time. If you want to take this course, pair it with some lighter course and read additional big data material on your own to get the most out of this course. This course is tough but you will learn a lot. Don't take this with any other tough course. It would be too hard to manage your time between office family and studies. But all said.. this is the course if you really want to learn the big data tools. If you dont have any ML experience or advanced statistic experience you will suffer in the beginning and you will have to work hard to get the homeworks done on time. If you are taking this course make sure you start working on assignments as soon they are released. They are not easy to work on if you start in last 4-5 days.  I'll try to share my personal experience (which is very different from the other reviews). I'm aware that my background definitely helped a lot, so I hope this review could be helpful for people with a background similar to mine. \n\nThe main skills needed for this class are:\n- Experience on Linux CLI, environment variables, how to install packages/libraries, etc. Also knowing how to use a Virtual Machine. \n- Some background in Machine Learning: what cross-validation is, typical metrics, how to train a model, and how to run predictions on it for supervised and unsupervised methods. \n- Experience working with data in both databases and structured files: SQL, aggregation functions, joins, constraints, etc. \n- Having the maturity/confidence to quickly learn on your own how to hack your way in some new programming language. \n\nI have 15 years industry experience with databases (not big data), scripting languages in Linux, and I had previously taken ML, ML4T, RL. The assignments took me like 20-30 hours each (spread through 2 weeks, a workload of 15 hours/week). \n\nOn the other hand I can see how for someone with no experience AT ALL in the skills mentioned above, this class could take as much as 30-40 hours/week. \n\nSome people have mentioned \"you HAVE to LEARN Pig/Hbase/Hive\". I don't think that's exactly the case. I found myself googling things like \"how to left join pig\" and adapting some snippet from S. O. On the other hand if you don't really know what an outer join, group by, etc. are, of course it will be hard to look for something you don't understand. \n\nCompleting the labs before the class started helped me a lot: http://www. sunlab. org/teaching/cse6250/spring2017/lab \nIn that way, I didn't waste time setting up the environment for each assignment (the labs are closely related with assignments 2, 3, and 4). \n\nAs other reviews as mentioned, you are mostly on your own on the 2nd part of the class, but I think the grading was very lenient. Sadly I ran out of space for this review Do you want a challenge? Do you want to use all the big data software we hear so much about (e. g. hadoop, spark)? Do you also want less sleep? :)\n\nIf you answered yes to all of those questions, then take this class. The class was incredibly interesting, with lots of work and investigation required by the student. The lectures are really light on material, as the professor says, it is expected that the student goes out and learns and experiments on their own. \n\nI would highly suggest being familiar with Python, some Scala, and Machine Learning concepts BEFORE taking this course. I really did love the course, it was incredibly challenging, but very rewarding at the end. \n\nThe professor does need to get things a bit more organized in terms of expectations of deliverables, but given this was the first semester and the professor seems to react well to lots of questions and a bit of criticism, I am certain it will improve.  *Context*\n* Software engineer with many years of experience.\n* Significant experience with SQL, Unix, Python, Git, Docker.\n* Some experience with Scala.\n* No prior experience with Spark, Hive, Pig, Hadoop\n* Taken (ML4T, RL, AI) previously. \n\n*Pros*\n* Hands on experience with the Data Science Pipeline. Data exploration and pre-processing, feature construction, Model training, etc.\n* Hands on experience with Big Data Tools, brief enough to touch several tools aspects, but difficult enough to force you to think through the problems and grasp the basics.\n* Interesting and relevant Healthcare related Problems. You will actually use ML techniques to tackle these types of problems.\n* A taste of the variety of problems in Healthcare that can be tackled with ML.\n* The Homework is well structured, from easier to hardest.\n* The project is based on some suggested topics, but it is fairly open ended.\n* The professor participated more in Piazza than in other courses. The TA were usually responsive.\n* An automated environment with all the required software for Homework was provided. After the initial setup investment it worked the rest of the semester without issues for me.\n* A server with enough resources was provided to do our projects, turned out to be really useful.\n\n*Cons*\n* The auto grading process is tricky, it is really hard to know how/what caused point deductions, even when all local tests passed. You have 50% chance of getting a very good grade or a really bad grade, regardless of your efforts and local checks.\n* The grading and re-grading experience depended on the particular style of the given TA. They should have common principles and be more consistent.\n* The automated environment setup could be tricky for some people. In my case, I spent like 5 hours setting it up, then it worked fine. This is a very hard class but you will learn a lot and feel proud at the end. The homeworks require you to know Python, Hive, Pig, Scala, Spark. I knew the first 3 and took the \"labs\" before starting the semester. The labs are basically non graded tutorials you do on your own to learn Scala/Spark and other tools. Even with the labs and some background knowledge (I took Machine Learning before), the homeworks could take you 60 hrs. My life could have been much easier if I knew Scala before hand, but I learn while taking the class. If you survive the 4 homeworks with a decent grade, the second part is much easier - basically a project (a paper) about a Healthcare related topics from a list of topics suggested by the Professor. TLDR: Do the labs and learn basic scala before the semester starts and you will be fine. Still time consuming This was a very fast paced class. There is a mountain of technical + industry vertical knowledge that is being covered in the first few weeks and students are expected to be self-starters. If you expect the lectures to cover the material you will be disappointed. I spent close to 20 hours every week learning + iterating on the homeworks/projects. It has been a great experience but the time commitment is a must. As mentioned by others, this is a VERY challenging course unless you already use big data technologies and know Scala. I had completed half of the labs prior to taking the course and have taken all other ML / data courses in the program, so the machine learning and general data concepts weren't extremely challenging. The catch, though, was trying to drink from a fire hose in order to complete the homework assignments. The challenge w/ the assignments was picking up Scala, working with provided virtualized / containerized environments (for Hadoop, Spark, Scala, Zeppelin, etc. ) that weren't fully functional or compatible with the requirements of the assignment. Get ready to troubleshoot the tools you're given. \n\nThe instructor and TA were not at all very interactive on Piazza. IF we got an answer, it was often not necessarily answering the question given, wasn't complete, or so general the question needed to be asked again from a few additional angles. Many times there just wasn't a response. We completed our final project submissions and hadn't received feedback on an assignment submitted about 1. 5 months prior... most recent grading feedback was 2 months ago. TA office hours were non-existant... really were \"message the TA and hope for a response\". The prof' did host a couple opportunities to have a brief chat session to discuss the project, but this was about it. \n\nScala is nice now that I've done it, but was a bit of a paradigm shift for me, so work on it ahead of time. Aim to complete all of the labs prior to the beginning of the semester. If one could hang with the class pace of assignments for a little over half of the semester, then the 2nd portion was dedicated to an individual/group project and was much more tolerable as you could select/control the technology and environment to work within. Also, as w/ any course w/ a team project, vet a good team early. \n\nYou will pick up a lot of pertinent technology, but will work for it (find help early). This course is very hands-on and you'll get very awarding learning experience, but it's best to take it with another easy course or on its own. \n\nThe difficulty highly depends on how much time you can allocate. Nothing is impossible but every single part of every assignment is time consuming. There are 4 homework assignments due every 2 weeks for the first part of the course and a project for the second half. Every assignment involves serious effort. Expect to spend several full days on each. This course covers several big data tools, but it's not a programming course. So you need to learn on your own well enough to finish the assignments. Make sure you start early. Assignments are assessed by autograding using different data sets than the ones you have, so I kind of miss the Udacity autograder that I used to hate, since at least you know you get it when you get it. The project focuses more on your ability to interpret data and understand the topic you choose. Your report/paper will be graded for the project, not your code. \n\nThe instructors and TAs are very active on piazza and helpful. It's a new course so there are some problems every once a while, so make sure you keep an eye on the announcement and pinned messages, in case there's any code or instruction update. The teaching staff are aware of the problems and are trying their best not to make things confusing. It's not perfect but they listen to suggestions and will likely make this course more organized.  This is a hard course and it lacked a bit of organizing. Its probably because it was the first iteration for OMS, but the TA's were very helpful. The assignments are meant to be hard so you actually spend your time working and learning. I liked it that way. I had to actually implement a lot of it on my own with little help from piazza which I thought was very good. You might actually not find code snippets online as well since we are using multiple technologies. \n\nIf you want to go in prepared, this is what you need to know. These are not buzz words, but actual tech stuff I used this course. \n1. Python, sklearn, pandas, matplotlib (HW1)\n2. hadoop, hive, pig (HW2)\n3. Scala , Spark, mllib, graphx (HW3, HW4, project)\n4. vagrant (I dint have to go beyond setting it up and running some scripts)\n5. aws-docker, I dint use it just played with for project\n6. Heath informatics and machine learning concepts\n7. IntelliJ and Pycharm were the editors I used. Makes your life tad bit easier. \n\nYou are allowed to use any of the big data framework for project but I used scala and spark. \n\nIts a great course and I took it along side ML. They kind of complemented with each other and they deadlines dint overlap much, so worked for me.  Summary:\nLearned a ton, very interesting, very rewarding. \nDifficult, very time consuming. \nGrading seems lenient. \n\nThe first half of the class involves 4 homework assignments, each given 2 weeks to complete. These are all pretty time consuming and require the full 2 weeks to complete. Just make sure you don't try to start them late. The second half of the class involves a more open-ended project. The workload was probably lower in the second half. Also, there is lots of extra credit available throughout the class. It seems a sizeable amount of students did not finish all of the assignments, but if you do, there is a good chance you can get >100%. \n\nThere is not much info in the lectures, but there is some good info in the labs. The professor wants students to learn by doing. Personally, I agree that this is the best way to learn (by trying to tackle something I am not quite sure how to do yet), but I can understand some students preferring a more structured approach, where they are told more explicitly how to do what they need to do. I would say the most important skill in this class is just to be a quick learner. \n\nOverall, I learned more in this class than any other I have taken. I would recommend this class if you have any interest in using big data tools. Just don't expect an easy class. I would probably take this class by itself or paired with an easier class.  This is definitely THE class you need to take if you are into big data technologies. It is the most brutal and most rewarding class that I have taken in OMSCS, and it is the hardcore class I expect to see in a top MSCS program. I personally learned a ton from this course and loved it very much. But be aware of the survival bias. Every two weeks, there were students withdrawing from this class, and only 30+ survived till the end of this semester. \n\nFirst half of the class is about 4 homeworks. Within two weeks, you need to learn new tools, watch tutorials online (in addition to lectures and labs) and finish the coding assignment for each homework. Don't be misled by the difficulty of the first homework, which only takes less than 20 hours of work if you are good at python. Homework 2~4 easily costs you 60-80 hours each. If there were no such intensity, I would not have learned so much in less than 2 months. \n\nSecond half of the class is about a research project on a topic of your choice. Personally, it's my favorite part. At this point, most survivors should be familiar with all the big data tools (spark, hadoop, etc. ) and getting ready for the real meat of this class. There is a pool of topics for you to select, and you are also free to come up with your own topic. Your task is to use the big data tools you've learned to \"reproduce and improve\" a recently published journal paper in the field of Big Data for Healthcare. Given the complexity and shear size of the data, even partially \"reproducing\" other's work is not as easy as it sounds. You can secure a good grade by simply reproducing the result itself. From what I have read as reviewer (you can see all papers of the class), most people couldn't get to the point of matching the published papers. \"Improving\" basically means a publishable work, and very few (maybe 2~3 per semester) can meet that standard. \n\nYou need true passion and serious commitment to succeed in this class."
}